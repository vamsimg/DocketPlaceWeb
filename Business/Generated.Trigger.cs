/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 05/09/2012 12:40:52 AM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Trigger.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("trigger_id: {trigger_id}")]
	public partial class Trigger
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _trigger_id = int.MinValue;
		/// <summary>
		/// trigger_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int trigger_id
		{
			[DebuggerStepThrough()]
			get { return this._trigger_id; }
			protected set 
			{
				if (this._trigger_id != value) 
				{
					this._trigger_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("trigger_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _store_id = int.MinValue;
		/// <summary>
		/// store_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int store_id
		{
			[DebuggerStepThrough()]
			get { return this._store_id; }
			set 
			{
				if (this._store_id != value) 
				{
					this._store_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("store_id");
					this._store_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _uploadedad_id = int.MinValue;
		/// <summary>
		/// uploadedad_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int uploadedad_id
		{
			[DebuggerStepThrough()]
			get { return this._uploadedad_id; }
			set 
			{
				if (this._uploadedad_id != value) 
				{
					this._uploadedad_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("uploadedad_id");
					this._uploadedad_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _creator_id = int.MinValue;
		/// <summary>
		/// creator_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int creator_id
		{
			[DebuggerStepThrough()]
			get { return this._creator_id; }
			set 
			{
				if (this._creator_id != value) 
				{
					this._creator_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("creator_id");
					this._creator_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _priority = int.MinValue;
		/// <summary>
		/// priority
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int priority
		{
			[DebuggerStepThrough()]
			get { return this._priority; }
			set 
			{
				if (this._priority != value) 
				{
					this._priority = value;
					this.IsDirty = true;	
					OnPropertyChanged("priority");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _header = String.Empty;
		/// <summary>
		/// header
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string header
		{
			[DebuggerStepThrough()]
			get { return this._header; }
			set 
			{
				if (this._header != value) 
				{
					this._header = value;
					this.IsDirty = true;	
					OnPropertyChanged("header");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _type = String.Empty;
		/// <summary>
		/// type
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string type
		{
			[DebuggerStepThrough()]
			get { return this._type; }
			set 
			{
				if (this._type != value) 
				{
					this._type = value;
					this.IsDirty = true;	
					OnPropertyChanged("type");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _value = String.Empty;
		/// <summary>
		/// value
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string value
		{
			[DebuggerStepThrough()]
			get { return this._value; }
			set 
			{
				if (this._value != value) 
				{
					this._value = value;
					this.IsDirty = true;	
					OnPropertyChanged("value");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _notes = String.Empty;
		/// <summary>
		/// notes
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string notes
		{
			[DebuggerStepThrough()]
			get { return this._notes; }
			set 
			{
				if (this._notes != value) 
				{
					this._notes = value;
					this.IsDirty = true;	
					OnPropertyChanged("notes");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_active = false;
		/// <summary>
		/// is_active
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_active
		{
			[DebuggerStepThrough()]
			get { return this._is_active; }
			set 
			{
				if (this._is_active != value) 
				{
					this._is_active = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_active");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _creator_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin creator_
		{
			get 
			{
				if (_creator_ == null) 
				{
					_creator_ = GetParentEntity(Admin.GetAdmin(this.creator_id)) as Admin;
				}
				return _creator_;
			}
			set
			{
				if(_creator_ != value) 
				{
					_creator_ = value;
					
					if (value != null) 
					{
						this.creator_id = value.admin_id;
					}
					else 
					{
						this.creator_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Store _store_ = null;
		/// <summary>
		/// The parent Store object
		/// </summary>
		public Store store_
		{
			get 
			{
				if (_store_ == null) 
				{
					_store_ = GetParentEntity(Store.GetStore(this.store_id)) as Store;
				}
				return _store_;
			}
			set
			{
				if(_store_ != value) 
				{
					_store_ = value;
					
					if (value != null) 
					{
						this.store_id = value.store_id;
					}
					else 
					{
						this.store_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private UploadedAd _uploadedad_ = null;
		/// <summary>
		/// The parent UploadedAd object
		/// </summary>
		public UploadedAd uploadedad_
		{
			get 
			{
				if (_uploadedad_ == null) 
				{
					_uploadedad_ = GetParentEntity(UploadedAd.GetUploadedAd(this.uploadedad_id)) as UploadedAd;
				}
				return _uploadedad_;
			}
			set
			{
				if(_uploadedad_ != value) 
				{
					_uploadedad_ = value;
					
					if (value != null) 
					{
						this.uploadedad_id = value.uploadedad_id;
					}
					else 
					{
						this.uploadedad_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PlacedAd> _placedAdsBytrigger_ = null;
		/// <summary>
		/// A collection of PlacedAd children objects
		/// </summary>
		public EntityList<PlacedAd> PlacedAdsBytrigger_
		{
			get 
			{
				if (_placedAdsBytrigger_ == null) {
					_placedAdsBytrigger_ = DocketPlace.Business.PlacedAd.GetPlacedAdsBytrigger_(this);
				}
				return _placedAdsBytrigger_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Trigger).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Trigger).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Trigger).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Trigger() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a PlacedAd for this Trigger object
		/// </summary>
		public PlacedAd CreatePlacedAd()
		{
			return DocketPlace.Business.PlacedAd.CreatePlacedAdBytrigger_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetTrigger(this.trigger_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_creator_ != null)
			{	
				this.creator_id = this.creator_.admin_id;
			}
			
			if (_store_ != null)
			{	
				this.store_id = this.store_.store_id;
			}
			
			if (_uploadedad_ != null)
			{	
				this.uploadedad_id = this.uploadedad_.uploadedad_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Triggers].[trigger_id],
	[Triggers].[store_id],
	[Triggers].[uploadedad_id],
	[Triggers].[creator_id],
	[Triggers].[priority],
	[Triggers].[header],
	[Triggers].[type],
	[Triggers].[value],
	[Triggers].[notes],
	[Triggers].[is_active],
	[Triggers].[creation_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Triggers";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Trigger into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="priority">priority</param>
		/// <param name="header">header</param>
		/// <param name="type">type</param>
		/// <param name="value">value</param>
		/// <param name="notes">notes</param>
		/// <param name="is_active">is_active</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void InsertTrigger(int @store_id, int @uploadedad_id, int @creator_id, int @priority, string @header, string @type, string @value, string @notes, bool @is_active, DateTime @creation_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertTrigger(@store_id, @uploadedad_id, @creator_id, @priority, @header, @type, @value, @notes, @is_active, @creation_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Trigger into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="priority">priority</param>
		/// <param name="header">header</param>
		/// <param name="type">type</param>
		/// <param name="value">value</param>
		/// <param name="notes">notes</param>
		/// <param name="is_active">is_active</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertTrigger(int @store_id, int @uploadedad_id, int @creator_id, int @priority, string @header, string @type, string @value, string @notes, bool @is_active, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "TriggerInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@uploadedad_id", EntityBase.GetDatabaseValue(@uploadedad_id)));
			parameters.Add(new SqlParameter("@creator_id", EntityBase.GetDatabaseValue(@creator_id)));
			parameters.Add(new SqlParameter("@priority", EntityBase.GetDatabaseValue(@priority)));
			parameters.Add(new SqlParameter("@header", EntityBase.GetDatabaseValue(@header)));
			parameters.Add(new SqlParameter("@type", EntityBase.GetDatabaseValue(@type)));
			parameters.Add(new SqlParameter("@value", EntityBase.GetDatabaseValue(@value)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Trigger into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="priority">priority</param>
		/// <param name="header">header</param>
		/// <param name="type">type</param>
		/// <param name="value">value</param>
		/// <param name="notes">notes</param>
		/// <param name="is_active">is_active</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void UpdateTrigger(int @trigger_id, int @store_id, int @uploadedad_id, int @creator_id, int @priority, string @header, string @type, string @value, string @notes, bool @is_active, DateTime @creation_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateTrigger(@trigger_id, @store_id, @uploadedad_id, @creator_id, @priority, @header, @type, @value, @notes, @is_active, @creation_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Trigger into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="priority">priority</param>
		/// <param name="header">header</param>
		/// <param name="type">type</param>
		/// <param name="value">value</param>
		/// <param name="notes">notes</param>
		/// <param name="is_active">is_active</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdateTrigger(int @trigger_id, int @store_id, int @uploadedad_id, int @creator_id, int @priority, string @header, string @type, string @value, string @notes, bool @is_active, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "TriggerUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", EntityBase.GetDatabaseValue(@trigger_id)));
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@uploadedad_id", EntityBase.GetDatabaseValue(@uploadedad_id)));
			parameters.Add(new SqlParameter("@creator_id", EntityBase.GetDatabaseValue(@creator_id)));
			parameters.Add(new SqlParameter("@priority", EntityBase.GetDatabaseValue(@priority)));
			parameters.Add(new SqlParameter("@header", EntityBase.GetDatabaseValue(@header)));
			parameters.Add(new SqlParameter("@type", EntityBase.GetDatabaseValue(@type)));
			parameters.Add(new SqlParameter("@value", EntityBase.GetDatabaseValue(@value)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Trigger from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
		public static void DeleteTrigger(int @trigger_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteTrigger(@trigger_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Trigger from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteTrigger(int @trigger_id, SqlHelper @helper)
		{
			string commandText = "TriggerDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", @trigger_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Trigger object.
		/// </summary>
		/// <returns>The newly created Trigger object.</returns>
		public static Trigger CreateTrigger()
		{
			return InitializeNew<Trigger>();
		}
		
		/// <summary>
		/// Retrieve information for a Trigger by a Trigger's unique identifier.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
		/// <returns>Trigger</returns>
		public static Trigger GetTrigger(int trigger_id)
		{
			string commandText = "TriggerGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", trigger_id));
			
			return GetOne<Trigger>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Trigger objects.
		/// </summary>
		/// <returns>The retrieved collection of Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggers()
		{
			string commandText = "TriggerGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Trigger>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Trigger objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Trigger objects.</returns>
        protected static EntityList<Trigger> GetTriggers(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Trigger>(SelectFieldList, "FROM [dbo].[Triggers]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Trigger objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Trigger objects.</returns>
        public static EntityList<Trigger> GetTriggers(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Trigger>(SelectFieldList, "FROM [dbo].[Triggers]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Trigger objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggers(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetTriggers(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Trigger objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggers(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetTriggers(string.Empty, where, parameters, Trigger.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Trigger objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggers(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetTriggers(prefix, where, parameters, Trigger.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Trigger objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggers(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetTriggers(string.Empty, where, parameters, Trigger.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Trigger objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggers(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetTriggers(prefix, where, parameters, Trigger.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Trigger objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggers(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Trigger.SelectFieldList + "FROM [dbo].[Triggers] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Trigger>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Trigger> GetTriggers(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Trigger>(SelectFieldList, "FROM [dbo].[Triggers] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of Trigger objects by a Admin object.
		/// </summary>
		/// <param name="creator_">creator_</param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersBycreator_(Admin @creator_) 
		{
			string commandText = "TriggerGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<Trigger>(@creator_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Trigger objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggersBycreator_(Admin @creator_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Trigger objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggersBycreator_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Trigger objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersBycreator_(Admin @creator_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Trigger objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersBycreator_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Trigger objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersBycreator_(int @admin_id) 
		{
			string commandText = "TriggerGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<Trigger>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Trigger object from a Admin object.
		/// </summary>
		/// <param name="creator_">creator_</param>
		/// <returns>The newly created Trigger object.</returns>
		public static Trigger CreateTriggerBycreator_(Admin @creator_)
		{
			Trigger trigger = InitializeNew<Trigger>();
			
			trigger.creator_id = @creator_.admin_id;
			
			trigger.creator_ = @creator_;
			
			return trigger;
		}
		
		/// <summary>
		/// Deletes Trigger objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeleteTriggersBycreator_(Admin admin) 
		{
			string commandText = "TriggerDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Trigger objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeleteTriggersBycreator_(int admin_id) 
		{
			string commandText = "TriggerDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Trigger objects by a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersBystore_(Store @store_) 
		{
			string commandText = "TriggerGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Trigger>(@store_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Trigger objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggersBystore_(Store @store_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Trigger objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggersBystore_(int @store_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Trigger objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersBystore_(Store @store_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Trigger objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersBystore_(int @store_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Trigger objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersBystore_(int @store_id) 
		{
			string commandText = "TriggerGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Trigger>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Trigger object from a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>The newly created Trigger object.</returns>
		public static Trigger CreateTriggerBystore_(Store @store_)
		{
			Trigger trigger = InitializeNew<Trigger>();
			
			trigger.store_id = @store_.store_id;
			
			trigger.store_ = @store_;
			
			return trigger;
		}
		
		/// <summary>
		/// Deletes Trigger objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
		public static void DeleteTriggersBystore_(Store store) 
		{
			string commandText = "TriggerDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store.store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Trigger objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		public static void DeleteTriggersBystore_(int store_id) 
		{
			string commandText = "TriggerDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Trigger objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_">uploadedad_</param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersByuploadedad_(UploadedAd @uploadedad_) 
		{
			string commandText = "TriggerGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<Trigger>(@uploadedad_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Trigger objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggersByuploadedad_(UploadedAd @uploadedad_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Trigger objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		protected static EntityList<Trigger> GetTriggersByuploadedad_(int @uploadedad_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Trigger objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersByuploadedad_(UploadedAd @uploadedad_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Trigger objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersByuploadedad_(int @uploadedad_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Triggers] 
WHERE 
	[Triggers].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<Trigger>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Trigger objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <returns>A collection Trigger objects.</returns>
		public static EntityList<Trigger> GetTriggersByuploadedad_(int @uploadedad_id) 
		{
			string commandText = "TriggerGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<Trigger>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Trigger object from a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_">uploadedad_</param>
		/// <returns>The newly created Trigger object.</returns>
		public static Trigger CreateTriggerByuploadedad_(UploadedAd @uploadedad_)
		{
			Trigger trigger = InitializeNew<Trigger>();
			
			trigger.uploadedad_id = @uploadedad_.uploadedad_id;
			
			trigger.uploadedad_ = @uploadedad_;
			
			return trigger;
		}
		
		/// <summary>
		/// Deletes Trigger objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
		public static void DeleteTriggersByuploadedad_(UploadedAd uploadedAd) 
		{
			string commandText = "TriggerDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedAd.uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Trigger objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		public static void DeleteTriggersByuploadedad_(int uploadedad_id) 
		{
			string commandText = "TriggerDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class TriggerProperties
		{
			public const string trigger_id = "trigger_id";
			public const string store_id = "store_id";
			public const string uploadedad_id = "uploadedad_id";
			public const string creator_id = "creator_id";
			public const string priority = "priority";
			public const string header = "header";
			public const string type = "type";
			public const string value = "value";
			public const string notes = "notes";
			public const string is_active = "is_active";
			public const string creation_datetime = "creation_datetime";
		}
		#endregion
	}
}
