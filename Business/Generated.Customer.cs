/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 8:48:45 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Customer.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("customer_id: {customer_id}")]
	public partial class Customer
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _customer_id = int.MinValue;
		/// <summary>
		/// customer_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int customer_id
		{
			[DebuggerStepThrough()]
			get { return this._customer_id; }
			protected set 
			{
				if (this._customer_id != value) 
				{
					this._customer_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("customer_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _email = String.Empty;
		/// <summary>
		/// email
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string email
		{
			[DebuggerStepThrough()]
			get { return this._email; }
			set 
			{
				if (this._email != value) 
				{
					this._email = value;
					this.IsDirty = true;	
					OnPropertyChanged("email");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _mobile = String.Empty;
		/// <summary>
		/// mobile
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string mobile
		{
			[DebuggerStepThrough()]
			get { return this._mobile; }
			set 
			{
				if (this._mobile != value) 
				{
					this._mobile = value;
					this.IsDirty = true;	
					OnPropertyChanged("mobile");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _title = String.Empty;
		/// <summary>
		/// title
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string title
		{
			[DebuggerStepThrough()]
			get { return this._title; }
			set 
			{
				if (this._title != value) 
				{
					this._title = value;
					this.IsDirty = true;	
					OnPropertyChanged("title");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _sex = false;
		/// <summary>
		/// sex
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public bool sex
		{
			[DebuggerStepThrough()]
			get { return this._sex; }
			set 
			{
				if (this._sex != value) 
				{
					this._sex = value;
					this.IsDirty = true;	
					OnPropertyChanged("sex");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _first_name = String.Empty;
		/// <summary>
		/// first_name
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string first_name
		{
			[DebuggerStepThrough()]
			get { return this._first_name; }
			set 
			{
				if (this._first_name != value) 
				{
					this._first_name = value;
					this.IsDirty = true;	
					OnPropertyChanged("first_name");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _last_name = String.Empty;
		/// <summary>
		/// last_name
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string last_name
		{
			[DebuggerStepThrough()]
			get { return this._last_name; }
			set 
			{
				if (this._last_name != value) 
				{
					this._last_name = value;
					this.IsDirty = true;	
					OnPropertyChanged("last_name");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _postcode = String.Empty;
		/// <summary>
		/// postcode
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string postcode
		{
			[DebuggerStepThrough()]
			get { return this._postcode; }
			set 
			{
				if (this._postcode != value) 
				{
					this._postcode = value;
					this.IsDirty = true;	
					OnPropertyChanged("postcode");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _password_hash = String.Empty;
		/// <summary>
		/// password_hash
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string password_hash
		{
			[DebuggerStepThrough()]
			get { return this._password_hash; }
			set 
			{
				if (this._password_hash != value) 
				{
					this._password_hash = value;
					this.IsDirty = true;	
					OnPropertyChanged("password_hash");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_active = false;
		/// <summary>
		/// is_active
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_active
		{
			[DebuggerStepThrough()]
			get { return this._is_active; }
			set 
			{
				if (this._is_active != value) 
				{
					this._is_active = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_active");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _verification_code = String.Empty;
		/// <summary>
		/// verification_code
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string verification_code
		{
			[DebuggerStepThrough()]
			get { return this._verification_code; }
			set 
			{
				if (this._verification_code != value) 
				{
					this._verification_code = value;
					this.IsDirty = true;	
					OnPropertyChanged("verification_code");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _phone = String.Empty;
		/// <summary>
		/// phone
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string phone
		{
			[DebuggerStepThrough()]
			get { return this._phone; }
			set 
			{
				if (this._phone != value) 
				{
					this._phone = value;
					this.IsDirty = true;	
					OnPropertyChanged("phone");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _suburb = String.Empty;
		/// <summary>
		/// suburb
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string suburb
		{
			[DebuggerStepThrough()]
			get { return this._suburb; }
			set 
			{
				if (this._suburb != value) 
				{
					this._suburb = value;
					this.IsDirty = true;	
					OnPropertyChanged("suburb");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _state = String.Empty;
		/// <summary>
		/// state
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string state
		{
			[DebuggerStepThrough()]
			get { return this._state; }
			set 
			{
				if (this._state != value) 
				{
					this._state = value;
					this.IsDirty = true;	
					OnPropertyChanged("state");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _email_broken = false;
		/// <summary>
		/// email_broken
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool email_broken
		{
			[DebuggerStepThrough()]
			get { return this._email_broken; }
			set 
			{
				if (this._email_broken != value) 
				{
					this._email_broken = value;
					this.IsDirty = true;	
					OnPropertyChanged("email_broken");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _mobile_broken = false;
		/// <summary>
		/// mobile_broken
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool mobile_broken
		{
			[DebuggerStepThrough()]
			get { return this._mobile_broken; }
			set 
			{
				if (this._mobile_broken != value) 
				{
					this._mobile_broken = value;
					this.IsDirty = true;	
					OnPropertyChanged("mobile_broken");
				}
			}
		}
		
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Docket> _docketsBycustomer_ = null;
		/// <summary>
		/// A collection of Docket children objects
		/// </summary>
		public EntityList<Docket> DocketsBycustomer_
		{
			get 
			{
				if (_docketsBycustomer_ == null) {
					_docketsBycustomer_ = DocketPlace.Business.Docket.GetDocketsBycustomer_(this);
				}
				return _docketsBycustomer_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesBycustomer_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesBycustomer_
		{
			get 
			{
				if (_logEntriesBycustomer_ == null) {
					_logEntriesBycustomer_ = DocketPlace.Business.LogEntry.GetLogEntriesBycustomer_(this);
				}
				return _logEntriesBycustomer_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Member> _membersBycustomer_ = null;
		/// <summary>
		/// A collection of Member children objects
		/// </summary>
		public EntityList<Member> MembersBycustomer_
		{
			get 
			{
				if (_membersBycustomer_ == null) {
					_membersBycustomer_ = DocketPlace.Business.Member.GetMembersBycustomer_(this);
				}
				return _membersBycustomer_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PointsLog> _pointsLogsBycustomer_ = null;
		/// <summary>
		/// A collection of PointsLog children objects
		/// </summary>
		public EntityList<PointsLog> PointsLogsBycustomer_
		{
			get 
			{
				if (_pointsLogsBycustomer_ == null) {
					_pointsLogsBycustomer_ = DocketPlace.Business.PointsLog.GetPointsLogsBycustomer_(this);
				}
				return _pointsLogsBycustomer_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Voucher> _vouchersBycustomer_ = null;
		/// <summary>
		/// A collection of Voucher children objects
		/// </summary>
		public EntityList<Voucher> VouchersBycustomer_
		{
			get 
			{
				if (_vouchersBycustomer_ == null) {
					_vouchersBycustomer_ = DocketPlace.Business.Voucher.GetVouchersBycustomer_(this);
				}
				return _vouchersBycustomer_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Customer).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Customer).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Customer).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Customer() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a Docket for this Customer object
		/// </summary>
		public Docket CreateDocket()
		{
			return DocketPlace.Business.Docket.CreateDocketBycustomer_(this);
		}
		/// <summary>
		/// Creates a LogEntry for this Customer object
		/// </summary>
		public LogEntry CreateLogEntry()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryBycustomer_(this);
		}
		/// <summary>
		/// Creates a Member for this Customer object
		/// </summary>
		public Member CreateMember()
		{
			return DocketPlace.Business.Member.CreateMemberBycustomer_(this);
		}
		/// <summary>
		/// Creates a PointsLog for this Customer object
		/// </summary>
		public PointsLog CreatePointsLog()
		{
			return DocketPlace.Business.PointsLog.CreatePointsLogBycustomer_(this);
		}
		/// <summary>
		/// Creates a Voucher for this Customer object
		/// </summary>
		public Voucher CreateVoucher()
		{
			return DocketPlace.Business.Voucher.CreateVoucherBycustomer_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetCustomer(this.customer_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Customers].[customer_id],
	[Customers].[email],
	[Customers].[mobile],
	[Customers].[title],
	[Customers].[sex],
	[Customers].[first_name],
	[Customers].[last_name],
	[Customers].[postcode],
	[Customers].[password_hash],
	[Customers].[is_active],
	[Customers].[verification_code],
	[Customers].[creation_datetime],
	[Customers].[phone],
	[Customers].[suburb],
	[Customers].[state],
	[Customers].[email_broken],
	[Customers].[mobile_broken]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Customers";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Customer into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="email">email</param>
		/// <param name="mobile">mobile</param>
		/// <param name="title">title</param>
		/// <param name="sex">sex</param>
		/// <param name="first_name">first_name</param>
		/// <param name="last_name">last_name</param>
		/// <param name="postcode">postcode</param>
		/// <param name="password_hash">password_hash</param>
		/// <param name="is_active">is_active</param>
		/// <param name="verification_code">verification_code</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="phone">phone</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="email_broken">email_broken</param>
		/// <param name="mobile_broken">mobile_broken</param>
		public static void InsertCustomer(string @email, string @mobile, string @title, bool @sex, string @first_name, string @last_name, string @postcode, string @password_hash, bool @is_active, string @verification_code, DateTime @creation_datetime, string @phone, string @suburb, string @state, bool @email_broken, bool @mobile_broken)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertCustomer(@email, @mobile, @title, @sex, @first_name, @last_name, @postcode, @password_hash, @is_active, @verification_code, @creation_datetime, @phone, @suburb, @state, @email_broken, @mobile_broken, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Customer into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="email">email</param>
		/// <param name="mobile">mobile</param>
		/// <param name="title">title</param>
		/// <param name="sex">sex</param>
		/// <param name="first_name">first_name</param>
		/// <param name="last_name">last_name</param>
		/// <param name="postcode">postcode</param>
		/// <param name="password_hash">password_hash</param>
		/// <param name="is_active">is_active</param>
		/// <param name="verification_code">verification_code</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="phone">phone</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="email_broken">email_broken</param>
		/// <param name="mobile_broken">mobile_broken</param>
		/// <param name="helper">helper</param>
		internal static void InsertCustomer(string @email, string @mobile, string @title, bool @sex, string @first_name, string @last_name, string @postcode, string @password_hash, bool @is_active, string @verification_code, DateTime @creation_datetime, string @phone, string @suburb, string @state, bool @email_broken, bool @mobile_broken, SqlHelper @helper)
		{
			string commandText = "CustomerInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@email", EntityBase.GetDatabaseValue(@email)));
			parameters.Add(new SqlParameter("@mobile", EntityBase.GetDatabaseValue(@mobile)));
			parameters.Add(new SqlParameter("@title", EntityBase.GetDatabaseValue(@title)));
			parameters.Add(new SqlParameter("@sex", @sex));
			parameters.Add(new SqlParameter("@first_name", EntityBase.GetDatabaseValue(@first_name)));
			parameters.Add(new SqlParameter("@last_name", EntityBase.GetDatabaseValue(@last_name)));
			parameters.Add(new SqlParameter("@postcode", EntityBase.GetDatabaseValue(@postcode)));
			parameters.Add(new SqlParameter("@password_hash", EntityBase.GetDatabaseValue(@password_hash)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@verification_code", EntityBase.GetDatabaseValue(@verification_code)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@phone", EntityBase.GetDatabaseValue(@phone)));
			parameters.Add(new SqlParameter("@suburb", EntityBase.GetDatabaseValue(@suburb)));
			parameters.Add(new SqlParameter("@state", EntityBase.GetDatabaseValue(@state)));
			parameters.Add(new SqlParameter("@email_broken", @email_broken));
			parameters.Add(new SqlParameter("@mobile_broken", @mobile_broken));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Customer into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="email">email</param>
		/// <param name="mobile">mobile</param>
		/// <param name="title">title</param>
		/// <param name="sex">sex</param>
		/// <param name="first_name">first_name</param>
		/// <param name="last_name">last_name</param>
		/// <param name="postcode">postcode</param>
		/// <param name="password_hash">password_hash</param>
		/// <param name="is_active">is_active</param>
		/// <param name="verification_code">verification_code</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="phone">phone</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="email_broken">email_broken</param>
		/// <param name="mobile_broken">mobile_broken</param>
		public static void UpdateCustomer(int @customer_id, string @email, string @mobile, string @title, bool @sex, string @first_name, string @last_name, string @postcode, string @password_hash, bool @is_active, string @verification_code, DateTime @creation_datetime, string @phone, string @suburb, string @state, bool @email_broken, bool @mobile_broken)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateCustomer(@customer_id, @email, @mobile, @title, @sex, @first_name, @last_name, @postcode, @password_hash, @is_active, @verification_code, @creation_datetime, @phone, @suburb, @state, @email_broken, @mobile_broken, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Customer into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="email">email</param>
		/// <param name="mobile">mobile</param>
		/// <param name="title">title</param>
		/// <param name="sex">sex</param>
		/// <param name="first_name">first_name</param>
		/// <param name="last_name">last_name</param>
		/// <param name="postcode">postcode</param>
		/// <param name="password_hash">password_hash</param>
		/// <param name="is_active">is_active</param>
		/// <param name="verification_code">verification_code</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="phone">phone</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="email_broken">email_broken</param>
		/// <param name="mobile_broken">mobile_broken</param>
		/// <param name="helper">helper</param>
		internal static void UpdateCustomer(int @customer_id, string @email, string @mobile, string @title, bool @sex, string @first_name, string @last_name, string @postcode, string @password_hash, bool @is_active, string @verification_code, DateTime @creation_datetime, string @phone, string @suburb, string @state, bool @email_broken, bool @mobile_broken, SqlHelper @helper)
		{
			string commandText = "CustomerUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@email", EntityBase.GetDatabaseValue(@email)));
			parameters.Add(new SqlParameter("@mobile", EntityBase.GetDatabaseValue(@mobile)));
			parameters.Add(new SqlParameter("@title", EntityBase.GetDatabaseValue(@title)));
			parameters.Add(new SqlParameter("@sex", @sex));
			parameters.Add(new SqlParameter("@first_name", EntityBase.GetDatabaseValue(@first_name)));
			parameters.Add(new SqlParameter("@last_name", EntityBase.GetDatabaseValue(@last_name)));
			parameters.Add(new SqlParameter("@postcode", EntityBase.GetDatabaseValue(@postcode)));
			parameters.Add(new SqlParameter("@password_hash", EntityBase.GetDatabaseValue(@password_hash)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@verification_code", EntityBase.GetDatabaseValue(@verification_code)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@phone", EntityBase.GetDatabaseValue(@phone)));
			parameters.Add(new SqlParameter("@suburb", EntityBase.GetDatabaseValue(@suburb)));
			parameters.Add(new SqlParameter("@state", EntityBase.GetDatabaseValue(@state)));
			parameters.Add(new SqlParameter("@email_broken", @email_broken));
			parameters.Add(new SqlParameter("@mobile_broken", @mobile_broken));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Customer from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		public static void DeleteCustomer(int @customer_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteCustomer(@customer_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Customer from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteCustomer(int @customer_id, SqlHelper @helper)
		{
			string commandText = "CustomerDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Customer object.
		/// </summary>
		/// <returns>The newly created Customer object.</returns>
		public static Customer CreateCustomer()
		{
			return InitializeNew<Customer>();
		}
		
		/// <summary>
		/// Retrieve information for a Customer by a Customer's unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <returns>Customer</returns>
		public static Customer GetCustomer(int customer_id)
		{
			string commandText = "CustomerGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer_id));
			
			return GetOne<Customer>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Customer objects.
		/// </summary>
		/// <returns>The retrieved collection of Customer objects.</returns>
		public static EntityList<Customer> GetCustomers()
		{
			string commandText = "CustomerGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Customer>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Customer objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Customer objects.</returns>
        protected static EntityList<Customer> GetCustomers(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Customer>(SelectFieldList, "FROM [dbo].[Customers]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Customer objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Customer objects.</returns>
        public static EntityList<Customer> GetCustomers(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Customer>(SelectFieldList, "FROM [dbo].[Customers]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Customer objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Customer objects.</returns>
		protected static EntityList<Customer> GetCustomers(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCustomers(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Customer objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Customer objects.</returns>
		protected static EntityList<Customer> GetCustomers(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCustomers(string.Empty, where, parameters, Customer.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Customer objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Customer objects.</returns>
		protected static EntityList<Customer> GetCustomers(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCustomers(prefix, where, parameters, Customer.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Customer objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Customer objects.</returns>
		protected static EntityList<Customer> GetCustomers(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetCustomers(string.Empty, where, parameters, Customer.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Customer objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Customer objects.</returns>
		protected static EntityList<Customer> GetCustomers(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetCustomers(prefix, where, parameters, Customer.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Customer objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Customer objects.</returns>
		protected static EntityList<Customer> GetCustomers(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Customer.SelectFieldList + "FROM [dbo].[Customers] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Customer>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Customer> GetCustomers(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Customer>(SelectFieldList, "FROM [dbo].[Customers] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		#endregion
		
		#region Subclasses
		public static partial class CustomerProperties
		{
			public const string customer_id = "customer_id";
			public const string email = "email";
			public const string mobile = "mobile";
			public const string title = "title";
			public const string sex = "sex";
			public const string first_name = "first_name";
			public const string last_name = "last_name";
			public const string postcode = "postcode";
			public const string password_hash = "password_hash";
			public const string is_active = "is_active";
			public const string verification_code = "verification_code";
			public const string creation_datetime = "creation_datetime";
			public const string phone = "phone";
			public const string suburb = "suburb";
			public const string state = "state";
			public const string email_broken = "email_broken";
			public const string mobile_broken = "mobile_broken";
		}
		#endregion
	}
}
