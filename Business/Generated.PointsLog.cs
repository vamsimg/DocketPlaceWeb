/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 4:55:25 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a PointsLog.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("pointlog_id: {pointlog_id}")]
	public partial class PointsLog
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _pointlog_id = int.MinValue;
		/// <summary>
		/// pointlog_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int pointlog_id
		{
			[DebuggerStepThrough()]
			get { return this._pointlog_id; }
			protected set 
			{
				if (this._pointlog_id != value) 
				{
					this._pointlog_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("pointlog_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _customer_id = int.MinValue;
		/// <summary>
		/// customer_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int customer_id
		{
			[DebuggerStepThrough()]
			get { return this._customer_id; }
			set 
			{
				if (this._customer_id != value) 
				{
					this._customer_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("customer_id");
					this._customer_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _reward_points = int.MinValue;
		/// <summary>
		/// reward_points
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int reward_points
		{
			[DebuggerStepThrough()]
			get { return this._reward_points; }
			set 
			{
				if (this._reward_points != value) 
				{
					this._reward_points = value;
					this.IsDirty = true;	
					OnPropertyChanged("reward_points");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _description = String.Empty;
		/// <summary>
		/// description
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string description
		{
			[DebuggerStepThrough()]
			get { return this._description; }
			set 
			{
				if (this._description != value) 
				{
					this._description = value;
					this.IsDirty = true;	
					OnPropertyChanged("description");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _docket_id = int.MinValue;
		/// <summary>
		/// docket_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int docket_id
		{
			[DebuggerStepThrough()]
			get { return this._docket_id; }
			set 
			{
				if (this._docket_id != value) 
				{
					this._docket_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("docket_id");
					this._docket_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _voucher_id = int.MinValue;
		/// <summary>
		/// voucher_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int voucher_id
		{
			[DebuggerStepThrough()]
			get { return this._voucher_id; }
			set 
			{
				if (this._voucher_id != value) 
				{
					this._voucher_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("voucher_id");
					this._voucher_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admin_id = int.MinValue;
		/// <summary>
		/// admin_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int admin_id
		{
			[DebuggerStepThrough()]
			get { return this._admin_id; }
			set 
			{
				if (this._admin_id != value) 
				{
					this._admin_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admin_id");
					this._admin_ = null;
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _admin_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin admin_
		{
			get 
			{
				if (_admin_ == null) 
				{
					_admin_ = GetParentEntity(Admin.GetAdmin(this.admin_id)) as Admin;
				}
				return _admin_;
			}
			set
			{
				if(_admin_ != value) 
				{
					_admin_ = value;
					
					if (value != null) 
					{
						this.admin_id = value.admin_id;
					}
					else 
					{
						this.admin_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Customer _customer_ = null;
		/// <summary>
		/// The parent Customer object
		/// </summary>
		public Customer customer_
		{
			get 
			{
				if (_customer_ == null) 
				{
					_customer_ = GetParentEntity(Customer.GetCustomer(this.customer_id)) as Customer;
				}
				return _customer_;
			}
			set
			{
				if(_customer_ != value) 
				{
					_customer_ = value;
					
					if (value != null) 
					{
						this.customer_id = value.customer_id;
					}
					else 
					{
						this.customer_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Docket _docket_ = null;
		/// <summary>
		/// The parent Docket object
		/// </summary>
		public Docket docket_
		{
			get 
			{
				if (_docket_ == null) 
				{
					_docket_ = GetParentEntity(Docket.GetDocket(this.docket_id)) as Docket;
				}
				return _docket_;
			}
			set
			{
				if(_docket_ != value) 
				{
					_docket_ = value;
					
					if (value != null) 
					{
						this.docket_id = value.docket_id;
					}
					else 
					{
						this.docket_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Voucher _voucher_ = null;
		/// <summary>
		/// The parent Voucher object
		/// </summary>
		public Voucher voucher_
		{
			get 
			{
				if (_voucher_ == null) 
				{
					_voucher_ = GetParentEntity(Voucher.GetVoucher(this.voucher_id)) as Voucher;
				}
				return _voucher_;
			}
			set
			{
				if(_voucher_ != value) 
				{
					_voucher_ = value;
					
					if (value != null) 
					{
						this.voucher_id = value.voucher_id;
					}
					else 
					{
						this.voucher_id = int.MinValue;
					}
				}
			}
		}
		
		
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(PointsLog).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(PointsLog).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(PointsLog).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected PointsLog() { }
		#endregion
		
		#region Public Methods
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetPointsLog(this.pointlog_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_admin_ != null)
			{	
				this.admin_id = this.admin_.admin_id;
			}
			
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
			if (_customer_ != null)
			{	
				this.customer_id = this.customer_.customer_id;
			}
			
			if (_docket_ != null)
			{	
				this.docket_id = this.docket_.docket_id;
			}
			
			if (_voucher_ != null)
			{	
				this.voucher_id = this.voucher_.voucher_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[PointsLog].[pointlog_id],
	[PointsLog].[customer_id],
	[PointsLog].[company_id],
	[PointsLog].[reward_points],
	[PointsLog].[description],
	[PointsLog].[creation_datetime],
	[PointsLog].[docket_id],
	[PointsLog].[voucher_id],
	[PointsLog].[admin_id]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "PointsLog";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a PointsLog into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="description">description</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="docket_id">docket_id</param>
		/// <param name="voucher_id">voucher_id</param>
		/// <param name="admin_id">admin_id</param>
		public static void InsertPointsLog(int @customer_id, int @company_id, int @reward_points, string @description, DateTime @creation_datetime, int @docket_id, int @voucher_id, int @admin_id)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertPointsLog(@customer_id, @company_id, @reward_points, @description, @creation_datetime, @docket_id, @voucher_id, @admin_id, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a PointsLog into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="description">description</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="docket_id">docket_id</param>
		/// <param name="voucher_id">voucher_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="helper">helper</param>
		internal static void InsertPointsLog(int @customer_id, int @company_id, int @reward_points, string @description, DateTime @creation_datetime, int @docket_id, int @voucher_id, int @admin_id, SqlHelper @helper)
		{
			string commandText = "PointsLogInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@reward_points", EntityBase.GetDatabaseValue(@reward_points)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@docket_id", EntityBase.GetDatabaseValue(@docket_id)));
			parameters.Add(new SqlParameter("@voucher_id", EntityBase.GetDatabaseValue(@voucher_id)));
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a PointsLog into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="pointlog_id">pointlog_id</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="description">description</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="docket_id">docket_id</param>
		/// <param name="voucher_id">voucher_id</param>
		/// <param name="admin_id">admin_id</param>
		public static void UpdatePointsLog(int @pointlog_id, int @customer_id, int @company_id, int @reward_points, string @description, DateTime @creation_datetime, int @docket_id, int @voucher_id, int @admin_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdatePointsLog(@pointlog_id, @customer_id, @company_id, @reward_points, @description, @creation_datetime, @docket_id, @voucher_id, @admin_id, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a PointsLog into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="pointlog_id">pointlog_id</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="description">description</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="docket_id">docket_id</param>
		/// <param name="voucher_id">voucher_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="helper">helper</param>
		internal static void UpdatePointsLog(int @pointlog_id, int @customer_id, int @company_id, int @reward_points, string @description, DateTime @creation_datetime, int @docket_id, int @voucher_id, int @admin_id, SqlHelper @helper)
		{
			string commandText = "PointsLogUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@pointlog_id", EntityBase.GetDatabaseValue(@pointlog_id)));
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@reward_points", EntityBase.GetDatabaseValue(@reward_points)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@docket_id", EntityBase.GetDatabaseValue(@docket_id)));
			parameters.Add(new SqlParameter("@voucher_id", EntityBase.GetDatabaseValue(@voucher_id)));
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a PointsLog from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="pointlog_id">pointlog_id</param>
		public static void DeletePointsLog(int @pointlog_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeletePointsLog(@pointlog_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a PointsLog from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="pointlog_id">pointlog_id</param>
		/// <param name="helper">helper</param>
		internal static void DeletePointsLog(int @pointlog_id, SqlHelper @helper)
		{
			string commandText = "PointsLogDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@pointlog_id", @pointlog_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new PointsLog object.
		/// </summary>
		/// <returns>The newly created PointsLog object.</returns>
		public static PointsLog CreatePointsLog()
		{
			return InitializeNew<PointsLog>();
		}
		
		/// <summary>
		/// Retrieve information for a PointsLog by a PointsLog's unique identifier.
		/// </summary>
		/// <param name="pointlog_id">pointlog_id</param>
		/// <returns>PointsLog</returns>
		public static PointsLog GetPointsLog(int pointlog_id)
		{
			string commandText = "PointsLogGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@pointlog_id", pointlog_id));
			
			return GetOne<PointsLog>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection PointsLog objects.
		/// </summary>
		/// <returns>The retrieved collection of PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogs()
		{
			string commandText = "PointsLogGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<PointsLog>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection PointsLog objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of PointsLog objects.</returns>
        protected static EntityList<PointsLog> GetPointsLogs(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PointsLog>(SelectFieldList, "FROM [dbo].[PointsLog]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection PointsLog objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of PointsLog objects.</returns>
        public static EntityList<PointsLog> GetPointsLogs(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PointsLog>(SelectFieldList, "FROM [dbo].[PointsLog]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection PointsLog objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogs(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPointsLogs(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection PointsLog objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogs(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPointsLogs(string.Empty, where, parameters, PointsLog.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PointsLog objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogs(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPointsLogs(prefix, where, parameters, PointsLog.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PointsLog objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogs(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetPointsLogs(string.Empty, where, parameters, PointsLog.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PointsLog objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogs(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetPointsLogs(prefix, where, parameters, PointsLog.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PointsLog objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogs(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + PointsLog.SelectFieldList + "FROM [dbo].[PointsLog] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<PointsLog>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<PointsLog> GetPointsLogs(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PointsLog>(SelectFieldList, "FROM [dbo].[PointsLog] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of PointsLog objects by a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsByadmin_(Admin @admin_) 
		{
			string commandText = "PointsLogGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<PointsLog>(@admin_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PointsLog objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsByadmin_(Admin @admin_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsByadmin_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PointsLog objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsByadmin_(Admin @admin_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsByadmin_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PointsLog objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsByadmin_(int @admin_id) 
		{
			string commandText = "PointsLogGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<PointsLog>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PointsLog object from a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>The newly created PointsLog object.</returns>
		public static PointsLog CreatePointsLogByadmin_(Admin @admin_)
		{
			PointsLog pointsLog = InitializeNew<PointsLog>();
			
			pointsLog.admin_id = @admin_.admin_id;
			
			pointsLog.admin_ = @admin_;
			
			return pointsLog;
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeletePointsLogsByadmin_(Admin admin) 
		{
			string commandText = "PointsLogDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeletePointsLogsByadmin_(int admin_id) 
		{
			string commandText = "PointsLogDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of PointsLog objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBycompany_(Company @company_) 
		{
			string commandText = "PointsLogGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<PointsLog>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PointsLog objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PointsLog objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PointsLog objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBycompany_(int @company_id) 
		{
			string commandText = "PointsLogGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<PointsLog>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PointsLog object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created PointsLog object.</returns>
		public static PointsLog CreatePointsLogBycompany_(Company @company_)
		{
			PointsLog pointsLog = InitializeNew<PointsLog>();
			
			pointsLog.company_id = @company_.company_id;
			
			pointsLog.company_ = @company_;
			
			return pointsLog;
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeletePointsLogsBycompany_(Company company) 
		{
			string commandText = "PointsLogDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeletePointsLogsBycompany_(int company_id) 
		{
			string commandText = "PointsLogDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of PointsLog objects by a Customer object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBycustomer_(Customer @customer_) 
		{
			string commandText = "PointsLogGetByCustomer";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<PointsLog>(@customer_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PointsLog objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsBycustomer_(Customer @customer_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Customer object.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsBycustomer_(int @customer_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PointsLog objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBycustomer_(Customer @customer_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Customer object.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBycustomer_(int @customer_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PointsLog objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBycustomer_(int @customer_id) 
		{
			string commandText = "PointsLogGetByCustomer";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<PointsLog>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PointsLog object from a Customer object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>The newly created PointsLog object.</returns>
		public static PointsLog CreatePointsLogBycustomer_(Customer @customer_)
		{
			PointsLog pointsLog = InitializeNew<PointsLog>();
			
			pointsLog.customer_id = @customer_.customer_id;
			
			pointsLog.customer_ = @customer_;
			
			return pointsLog;
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
		public static void DeletePointsLogsBycustomer_(Customer customer) 
		{
			string commandText = "PointsLogDeleteByCustomer";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer.customer_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		public static void DeletePointsLogsBycustomer_(int customer_id) 
		{
			string commandText = "PointsLogDeleteByCustomer";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of PointsLog objects by a Docket object.
		/// </summary>
		/// <param name="docket_">docket_</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBydocket_(Docket @docket_) 
		{
			string commandText = "PointsLogGetByDocket";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_.docket_id));
			
			return GetList<PointsLog>(@docket_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PointsLog objects by a Docket object.
		/// </summary>
		/// <param name="docket">docket</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsBydocket_(Docket @docket_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[docket_id] = @docket_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@docket_id", @docket_.docket_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Docket object.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsBydocket_(int @docket_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[docket_id] = @docket_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PointsLog objects by a Docket object.
		/// </summary>
		/// <param name="docket">docket</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBydocket_(Docket @docket_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[docket_id] = @docket_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@docket_id", @docket_.docket_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Docket object.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBydocket_(int @docket_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[docket_id] = @docket_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PointsLog objects by a Docket unique identifier.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsBydocket_(int @docket_id) 
		{
			string commandText = "PointsLogGetByDocket";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_id));
			
			return GetList<PointsLog>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PointsLog object from a Docket object.
		/// </summary>
		/// <param name="docket_">docket_</param>
		/// <returns>The newly created PointsLog object.</returns>
		public static PointsLog CreatePointsLogBydocket_(Docket @docket_)
		{
			PointsLog pointsLog = InitializeNew<PointsLog>();
			
			pointsLog.docket_id = @docket_.docket_id;
			
			pointsLog.docket_ = @docket_;
			
			return pointsLog;
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Docket object.
		/// </summary>
		/// <param name="docket">docket</param>
		public static void DeletePointsLogsBydocket_(Docket docket) 
		{
			string commandText = "PointsLogDeleteByDocket";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", docket.docket_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Docket unique identifier.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		public static void DeletePointsLogsBydocket_(int docket_id) 
		{
			string commandText = "PointsLogDeleteByDocket";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", docket_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of PointsLog objects by a Voucher object.
		/// </summary>
		/// <param name="voucher_">voucher_</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsByvoucher_(Voucher @voucher_) 
		{
			string commandText = "PointsLogGetByVoucher";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@voucher_id", @voucher_.voucher_id));
			
			return GetList<PointsLog>(@voucher_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PointsLog objects by a Voucher object.
		/// </summary>
		/// <param name="voucher">voucher</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsByvoucher_(Voucher @voucher_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[voucher_id] = @voucher_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@voucher_id", @voucher_.voucher_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Voucher object.
		/// </summary>
		/// <param name="voucher_id">voucher_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		protected static EntityList<PointsLog> GetPointsLogsByvoucher_(int @voucher_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[voucher_id] = @voucher_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@voucher_id", @voucher_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PointsLog objects by a Voucher object.
		/// </summary>
		/// <param name="voucher">voucher</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsByvoucher_(Voucher @voucher_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[voucher_id] = @voucher_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@voucher_id", @voucher_.voucher_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PointsLog objects by a Voucher object.
		/// </summary>
		/// <param name="voucher_id">voucher_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsByvoucher_(int @voucher_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PointsLog] 
WHERE 
	[PointsLog].[voucher_id] = @voucher_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@voucher_id", @voucher_id));
			
			return GetList<PointsLog>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PointsLog objects by a Voucher unique identifier.
		/// </summary>
		/// <param name="voucher_id">voucher_id</param>
		/// <returns>A collection PointsLog objects.</returns>
		public static EntityList<PointsLog> GetPointsLogsByvoucher_(int @voucher_id) 
		{
			string commandText = "PointsLogGetByVoucher";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@voucher_id", @voucher_id));
			
			return GetList<PointsLog>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PointsLog object from a Voucher object.
		/// </summary>
		/// <param name="voucher_">voucher_</param>
		/// <returns>The newly created PointsLog object.</returns>
		public static PointsLog CreatePointsLogByvoucher_(Voucher @voucher_)
		{
			PointsLog pointsLog = InitializeNew<PointsLog>();
			
			pointsLog.voucher_id = @voucher_.voucher_id;
			
			pointsLog.voucher_ = @voucher_;
			
			return pointsLog;
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Voucher object.
		/// </summary>
		/// <param name="voucher">voucher</param>
		public static void DeletePointsLogsByvoucher_(Voucher voucher) 
		{
			string commandText = "PointsLogDeleteByVoucher";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@voucher_id", voucher.voucher_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PointsLog objects by a Voucher unique identifier.
		/// </summary>
		/// <param name="voucher_id">voucher_id</param>
		public static void DeletePointsLogsByvoucher_(int voucher_id) 
		{
			string commandText = "PointsLogDeleteByVoucher";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@voucher_id", voucher_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class PointsLogProperties
		{
			public const string pointlog_id = "pointlog_id";
			public const string customer_id = "customer_id";
			public const string company_id = "company_id";
			public const string reward_points = "reward_points";
			public const string description = "description";
			public const string creation_datetime = "creation_datetime";
			public const string docket_id = "docket_id";
			public const string voucher_id = "voucher_id";
			public const string admin_id = "admin_id";
		}
		#endregion
	}
}
