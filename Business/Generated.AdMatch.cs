/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 8:47:19 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a AdMatch.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("admatch_id: {admatch_id}")]
	public partial class AdMatch
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admatch_id = int.MinValue;
		/// <summary>
		/// admatch_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int admatch_id
		{
			[DebuggerStepThrough()]
			get { return this._admatch_id; }
			protected set 
			{
				if (this._admatch_id != value) 
				{
					this._admatch_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admatch_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _store_id = int.MinValue;
		/// <summary>
		/// store_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int store_id
		{
			[DebuggerStepThrough()]
			get { return this._store_id; }
			set 
			{
				if (this._store_id != value) 
				{
					this._store_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("store_id");
					this._store_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _adgroup_id = int.MinValue;
		/// <summary>
		/// adgroup_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int adgroup_id
		{
			[DebuggerStepThrough()]
			get { return this._adgroup_id; }
			set 
			{
				if (this._adgroup_id != value) 
				{
					this._adgroup_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("adgroup_id");
					this._adgroup_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _notes = String.Empty;
		/// <summary>
		/// notes
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string notes
		{
			[DebuggerStepThrough()]
			get { return this._notes; }
			set 
			{
				if (this._notes != value) 
				{
					this._notes = value;
					this.IsDirty = true;	
					OnPropertyChanged("notes");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_published = false;
		/// <summary>
		/// is_published
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_published
		{
			[DebuggerStepThrough()]
			get { return this._is_published; }
			set 
			{
				if (this._is_published != value) 
				{
					this._is_published = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_published");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_approved = false;
		/// <summary>
		/// is_approved
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public bool is_approved
		{
			[DebuggerStepThrough()]
			get { return this._is_approved; }
			set 
			{
				if (this._is_approved != value) 
				{
					this._is_approved = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_approved");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_rejected = false;
		/// <summary>
		/// is_rejected
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public bool is_rejected
		{
			[DebuggerStepThrough()]
			get { return this._is_rejected; }
			set 
			{
				if (this._is_rejected != value) 
				{
					this._is_rejected = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_rejected");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_active = false;
		/// <summary>
		/// is_active
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_active
		{
			[DebuggerStepThrough()]
			get { return this._is_active; }
			set 
			{
				if (this._is_active != value) 
				{
					this._is_active = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_active");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_unique_barcode = false;
		/// <summary>
		/// is_unique_barcode
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_unique_barcode
		{
			[DebuggerStepThrough()]
			get { return this._is_unique_barcode; }
			set 
			{
				if (this._is_unique_barcode != value) 
				{
					this._is_unique_barcode = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_unique_barcode");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _start_datetime = DateTime.MinValue;
		/// <summary>
		/// start_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime start_datetime
		{
			[DebuggerStepThrough()]
			get { return this._start_datetime; }
			set 
			{
				if (this._start_datetime != value) 
				{
					this._start_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("start_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _end_datetime = DateTime.MinValue;
		/// <summary>
		/// end_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime end_datetime
		{
			[DebuggerStepThrough()]
			get { return this._end_datetime; }
			set 
			{
				if (this._end_datetime != value) 
				{
					this._end_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("end_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _expiry_datetime = DateTime.MinValue;
		/// <summary>
		/// expiry_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime expiry_datetime
		{
			[DebuggerStepThrough()]
			get { return this._expiry_datetime; }
			set 
			{
				if (this._expiry_datetime != value) 
				{
					this._expiry_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("expiry_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private AdGroup _adgroup_ = null;
		/// <summary>
		/// The parent AdGroup object
		/// </summary>
		public AdGroup adgroup_
		{
			get 
			{
				if (_adgroup_ == null) 
				{
					_adgroup_ = GetParentEntity(AdGroup.GetAdGroup(this.adgroup_id)) as AdGroup;
				}
				return _adgroup_;
			}
			set
			{
				if(_adgroup_ != value) 
				{
					_adgroup_ = value;
					
					if (value != null) 
					{
						this.adgroup_id = value.adgroup_id;
					}
					else 
					{
						this.adgroup_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Store _store_ = null;
		/// <summary>
		/// The parent Store object
		/// </summary>
		public Store store_
		{
			get 
			{
				if (_store_ == null) 
				{
					_store_ = GetParentEntity(Store.GetStore(this.store_id)) as Store;
				}
				return _store_;
			}
			set
			{
				if(_store_ != value) 
				{
					_store_ = value;
					
					if (value != null) 
					{
						this.store_id = value.store_id;
					}
					else 
					{
						this.store_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesByadmatch_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesByadmatch_
		{
			get 
			{
				if (_logEntriesByadmatch_ == null) {
					_logEntriesByadmatch_ = DocketPlace.Business.LogEntry.GetLogEntriesByadmatch_(this);
				}
				return _logEntriesByadmatch_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PlacedAd> _placedAdsByadmatch_ = null;
		/// <summary>
		/// A collection of PlacedAd children objects
		/// </summary>
		public EntityList<PlacedAd> PlacedAdsByadmatch_
		{
			get 
			{
				if (_placedAdsByadmatch_ == null) {
					_placedAdsByadmatch_ = DocketPlace.Business.PlacedAd.GetPlacedAdsByadmatch_(this);
				}
				return _placedAdsByadmatch_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<RequestedAd> _requestedAdsByadmatch_ = null;
		/// <summary>
		/// A collection of RequestedAd children objects
		/// </summary>
		public EntityList<RequestedAd> RequestedAdsByadmatch_
		{
			get 
			{
				if (_requestedAdsByadmatch_ == null) {
					_requestedAdsByadmatch_ = DocketPlace.Business.RequestedAd.GetRequestedAdsByadmatch_(this);
				}
				return _requestedAdsByadmatch_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(AdMatch).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(AdMatch).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(AdMatch).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected AdMatch() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a LogEntry for this AdMatch object
		/// </summary>
		public LogEntry CreateLogEntry()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryByadmatch_(this);
		}
		/// <summary>
		/// Creates a PlacedAd for this AdMatch object
		/// </summary>
		public PlacedAd CreatePlacedAd()
		{
			return DocketPlace.Business.PlacedAd.CreatePlacedAdByadmatch_(this);
		}
		/// <summary>
		/// Creates a RequestedAd for this AdMatch object
		/// </summary>
		public RequestedAd CreateRequestedAd()
		{
			return DocketPlace.Business.RequestedAd.CreateRequestedAdByadmatch_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetAdMatch(this.admatch_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_adgroup_ != null)
			{	
				this.adgroup_id = this.adgroup_.adgroup_id;
			}
			
			if (_store_ != null)
			{	
				this.store_id = this.store_.store_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[AdMatches].[admatch_id],
	[AdMatches].[store_id],
	[AdMatches].[adgroup_id],
	[AdMatches].[notes],
	[AdMatches].[is_published],
	[AdMatches].[is_approved],
	[AdMatches].[is_rejected],
	[AdMatches].[is_active],
	[AdMatches].[is_unique_barcode],
	[AdMatches].[start_datetime],
	[AdMatches].[end_datetime],
	[AdMatches].[expiry_datetime],
	[AdMatches].[creation_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "AdMatches";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a AdMatch into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="notes">notes</param>
		/// <param name="is_published">is_published</param>
		/// <param name="is_approved">is_approved</param>
		/// <param name="is_rejected">is_rejected</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_unique_barcode">is_unique_barcode</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="expiry_datetime">expiry_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void InsertAdMatch(int @store_id, int @adgroup_id, string @notes, bool @is_published, bool @is_approved, bool @is_rejected, bool @is_active, bool @is_unique_barcode, DateTime @start_datetime, DateTime @end_datetime, DateTime @expiry_datetime, DateTime @creation_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertAdMatch(@store_id, @adgroup_id, @notes, @is_published, @is_approved, @is_rejected, @is_active, @is_unique_barcode, @start_datetime, @end_datetime, @expiry_datetime, @creation_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a AdMatch into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="notes">notes</param>
		/// <param name="is_published">is_published</param>
		/// <param name="is_approved">is_approved</param>
		/// <param name="is_rejected">is_rejected</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_unique_barcode">is_unique_barcode</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="expiry_datetime">expiry_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertAdMatch(int @store_id, int @adgroup_id, string @notes, bool @is_published, bool @is_approved, bool @is_rejected, bool @is_active, bool @is_unique_barcode, DateTime @start_datetime, DateTime @end_datetime, DateTime @expiry_datetime, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "AdMatchInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@adgroup_id", EntityBase.GetDatabaseValue(@adgroup_id)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@is_published", @is_published));
			parameters.Add(new SqlParameter("@is_approved", @is_approved));
			parameters.Add(new SqlParameter("@is_rejected", @is_rejected));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@is_unique_barcode", @is_unique_barcode));
			parameters.Add(new SqlParameter("@start_datetime", EntityBase.GetDatabaseValue(@start_datetime)));
			parameters.Add(new SqlParameter("@end_datetime", EntityBase.GetDatabaseValue(@end_datetime)));
			parameters.Add(new SqlParameter("@expiry_datetime", EntityBase.GetDatabaseValue(@expiry_datetime)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a AdMatch into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="notes">notes</param>
		/// <param name="is_published">is_published</param>
		/// <param name="is_approved">is_approved</param>
		/// <param name="is_rejected">is_rejected</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_unique_barcode">is_unique_barcode</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="expiry_datetime">expiry_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void UpdateAdMatch(int @admatch_id, int @store_id, int @adgroup_id, string @notes, bool @is_published, bool @is_approved, bool @is_rejected, bool @is_active, bool @is_unique_barcode, DateTime @start_datetime, DateTime @end_datetime, DateTime @expiry_datetime, DateTime @creation_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateAdMatch(@admatch_id, @store_id, @adgroup_id, @notes, @is_published, @is_approved, @is_rejected, @is_active, @is_unique_barcode, @start_datetime, @end_datetime, @expiry_datetime, @creation_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a AdMatch into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="notes">notes</param>
		/// <param name="is_published">is_published</param>
		/// <param name="is_approved">is_approved</param>
		/// <param name="is_rejected">is_rejected</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_unique_barcode">is_unique_barcode</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="expiry_datetime">expiry_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdateAdMatch(int @admatch_id, int @store_id, int @adgroup_id, string @notes, bool @is_published, bool @is_approved, bool @is_rejected, bool @is_active, bool @is_unique_barcode, DateTime @start_datetime, DateTime @end_datetime, DateTime @expiry_datetime, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "AdMatchUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", EntityBase.GetDatabaseValue(@admatch_id)));
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@adgroup_id", EntityBase.GetDatabaseValue(@adgroup_id)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@is_published", @is_published));
			parameters.Add(new SqlParameter("@is_approved", @is_approved));
			parameters.Add(new SqlParameter("@is_rejected", @is_rejected));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@is_unique_barcode", @is_unique_barcode));
			parameters.Add(new SqlParameter("@start_datetime", EntityBase.GetDatabaseValue(@start_datetime)));
			parameters.Add(new SqlParameter("@end_datetime", EntityBase.GetDatabaseValue(@end_datetime)));
			parameters.Add(new SqlParameter("@expiry_datetime", EntityBase.GetDatabaseValue(@expiry_datetime)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a AdMatch from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		public static void DeleteAdMatch(int @admatch_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteAdMatch(@admatch_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a AdMatch from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteAdMatch(int @admatch_id, SqlHelper @helper)
		{
			string commandText = "AdMatchDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new AdMatch object.
		/// </summary>
		/// <returns>The newly created AdMatch object.</returns>
		public static AdMatch CreateAdMatch()
		{
			return InitializeNew<AdMatch>();
		}
		
		/// <summary>
		/// Retrieve information for a AdMatch by a AdMatch's unique identifier.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <returns>AdMatch</returns>
		public static AdMatch GetAdMatch(int admatch_id)
		{
			string commandText = "AdMatchGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", admatch_id));
			
			return GetOne<AdMatch>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection AdMatch objects.
		/// </summary>
		/// <returns>The retrieved collection of AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatches()
		{
			string commandText = "AdMatchGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<AdMatch>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection AdMatch objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of AdMatch objects.</returns>
        protected static EntityList<AdMatch> GetAdMatches(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<AdMatch>(SelectFieldList, "FROM [dbo].[AdMatches]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection AdMatch objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of AdMatch objects.</returns>
        public static EntityList<AdMatch> GetAdMatches(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<AdMatch>(SelectFieldList, "FROM [dbo].[AdMatches]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection AdMatch objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatches(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdMatches(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection AdMatch objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatches(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdMatches(string.Empty, where, parameters, AdMatch.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection AdMatch objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatches(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdMatches(prefix, where, parameters, AdMatch.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection AdMatch objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatches(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetAdMatches(string.Empty, where, parameters, AdMatch.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection AdMatch objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatches(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetAdMatches(prefix, where, parameters, AdMatch.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection AdMatch objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatches(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + AdMatch.SelectFieldList + "FROM [dbo].[AdMatches] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<AdMatch>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<AdMatch> GetAdMatches(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<AdMatch>(SelectFieldList, "FROM [dbo].[AdMatches] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of AdMatch objects by a AdGroup object.
		/// </summary>
		/// <param name="adgroup_">adgroup_</param>
		/// <returns>A collection AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatchesByadgroup_(AdGroup @adgroup_) 
		{
			string commandText = "AdMatchGetByAdGroup";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_.adgroup_id));
			
			return GetList<AdMatch>(@adgroup_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of AdMatch objects by a AdGroup object.
		/// </summary>
		/// <param name="adGroup">adGroup</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatchesByadgroup_(AdGroup @adgroup_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdMatches] 
WHERE 
	[AdMatches].[adgroup_id] = @adgroup_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_.adgroup_id));
			
			return GetList<AdMatch>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of AdMatch objects by a AdGroup object.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatchesByadgroup_(int @adgroup_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdMatches] 
WHERE 
	[AdMatches].[adgroup_id] = @adgroup_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_id));
			
			return GetList<AdMatch>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of AdMatch objects by a AdGroup object.
		/// </summary>
		/// <param name="adGroup">adGroup</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatchesByadgroup_(AdGroup @adgroup_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdMatches] 
WHERE 
	[AdMatches].[adgroup_id] = @adgroup_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_.adgroup_id));
			
			return GetList<AdMatch>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of AdMatch objects by a AdGroup object.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatchesByadgroup_(int @adgroup_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdMatches] 
WHERE 
	[AdMatches].[adgroup_id] = @adgroup_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_id));
			
			return GetList<AdMatch>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of AdMatch objects by a AdGroup unique identifier.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <returns>A collection AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatchesByadgroup_(int @adgroup_id) 
		{
			string commandText = "AdMatchGetByAdGroup";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_id));
			
			return GetList<AdMatch>(commandText, parameters);
		}

		/// <summary>
		/// Create a new AdMatch object from a AdGroup object.
		/// </summary>
		/// <param name="adgroup_">adgroup_</param>
		/// <returns>The newly created AdMatch object.</returns>
		public static AdMatch CreateAdMatchByadgroup_(AdGroup @adgroup_)
		{
			AdMatch adMatch = InitializeNew<AdMatch>();
			
			adMatch.adgroup_id = @adgroup_.adgroup_id;
			
			adMatch.adgroup_ = @adgroup_;
			
			return adMatch;
		}
		
		/// <summary>
		/// Deletes AdMatch objects by a AdGroup object.
		/// </summary>
		/// <param name="adGroup">adGroup</param>
		public static void DeleteAdMatchesByadgroup_(AdGroup adGroup) 
		{
			string commandText = "AdMatchDeleteByAdGroup";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", adGroup.adgroup_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes AdMatch objects by a AdGroup unique identifier.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		public static void DeleteAdMatchesByadgroup_(int adgroup_id) 
		{
			string commandText = "AdMatchDeleteByAdGroup";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", adgroup_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of AdMatch objects by a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>A collection AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatchesBystore_(Store @store_) 
		{
			string commandText = "AdMatchGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<AdMatch>(@store_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of AdMatch objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatchesBystore_(Store @store_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdMatches] 
WHERE 
	[AdMatches].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<AdMatch>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of AdMatch objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdMatch objects.</returns>
		protected static EntityList<AdMatch> GetAdMatchesBystore_(int @store_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdMatches] 
WHERE 
	[AdMatches].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<AdMatch>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of AdMatch objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatchesBystore_(Store @store_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdMatches] 
WHERE 
	[AdMatches].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<AdMatch>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of AdMatch objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatchesBystore_(int @store_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdMatches] 
WHERE 
	[AdMatches].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<AdMatch>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of AdMatch objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <returns>A collection AdMatch objects.</returns>
		public static EntityList<AdMatch> GetAdMatchesBystore_(int @store_id) 
		{
			string commandText = "AdMatchGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<AdMatch>(commandText, parameters);
		}

		/// <summary>
		/// Create a new AdMatch object from a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>The newly created AdMatch object.</returns>
		public static AdMatch CreateAdMatchBystore_(Store @store_)
		{
			AdMatch adMatch = InitializeNew<AdMatch>();
			
			adMatch.store_id = @store_.store_id;
			
			adMatch.store_ = @store_;
			
			return adMatch;
		}
		
		/// <summary>
		/// Deletes AdMatch objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
		public static void DeleteAdMatchesBystore_(Store store) 
		{
			string commandText = "AdMatchDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store.store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes AdMatch objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		public static void DeleteAdMatchesBystore_(int store_id) 
		{
			string commandText = "AdMatchDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class AdMatchProperties
		{
			public const string admatch_id = "admatch_id";
			public const string store_id = "store_id";
			public const string adgroup_id = "adgroup_id";
			public const string notes = "notes";
			public const string is_published = "is_published";
			public const string is_approved = "is_approved";
			public const string is_rejected = "is_rejected";
			public const string is_active = "is_active";
			public const string is_unique_barcode = "is_unique_barcode";
			public const string start_datetime = "start_datetime";
			public const string end_datetime = "end_datetime";
			public const string expiry_datetime = "expiry_datetime";
			public const string creation_datetime = "creation_datetime";
		}
		#endregion
	}
}
