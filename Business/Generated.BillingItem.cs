/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 21/07/2012 9:30:03 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a BillingItem.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("billingitem_id: {billingitem_id}")]
	public partial class BillingItem
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _billingitem_id = int.MinValue;
		/// <summary>
		/// billingitem_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int billingitem_id
		{
			[DebuggerStepThrough()]
			get { return this._billingitem_id; }
			protected set 
			{
				if (this._billingitem_id != value) 
				{
					this._billingitem_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("billingitem_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _invoice_id = int.MinValue;
		/// <summary>
		/// invoice_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int invoice_id
		{
			[DebuggerStepThrough()]
			get { return this._invoice_id; }
			set 
			{
				if (this._invoice_id != value) 
				{
					this._invoice_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("invoice_id");
					this._invoice_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _description = String.Empty;
		/// <summary>
		/// description
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string description
		{
			[DebuggerStepThrough()]
			get { return this._description; }
			set 
			{
				if (this._description != value) 
				{
					this._description = value;
					this.IsDirty = true;	
					OnPropertyChanged("description");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _quantity = int.MinValue;
		/// <summary>
		/// quantity
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int quantity
		{
			[DebuggerStepThrough()]
			get { return this._quantity; }
			set 
			{
				if (this._quantity != value) 
				{
					this._quantity = value;
					this.IsDirty = true;	
					OnPropertyChanged("quantity");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private decimal _unit_cost = decimal.MinValue;
		/// <summary>
		/// unit_cost
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public decimal unit_cost
		{
			[DebuggerStepThrough()]
			get { return this._unit_cost; }
			set 
			{
				if (this._unit_cost != value) 
				{
					this._unit_cost = value;
					this.IsDirty = true;	
					OnPropertyChanged("unit_cost");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private decimal _total_amount = decimal.MinValue;
		/// <summary>
		/// total_amount
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public decimal total_amount
		{
			[DebuggerStepThrough()]
			get { return this._total_amount; }
			set 
			{
				if (this._total_amount != value) 
				{
					this._total_amount = value;
					this.IsDirty = true;	
					OnPropertyChanged("total_amount");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Invoice _invoice_ = null;
		/// <summary>
		/// The parent Invoice object
		/// </summary>
		public Invoice invoice_
		{
			get 
			{
				if (_invoice_ == null) 
				{
					_invoice_ = GetParentEntity(Invoice.GetInvoice(this.invoice_id)) as Invoice;
				}
				return _invoice_;
			}
			set
			{
				if(_invoice_ != value) 
				{
					_invoice_ = value;
					
					if (value != null) 
					{
						this.invoice_id = value.invoice_id;
					}
					else 
					{
						this.invoice_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<OutgoingSMS> _outgoingSMsBybillingitem_ = null;
		/// <summary>
		/// A collection of OutgoingSMS children objects
		/// </summary>
		public EntityList<OutgoingSMS> OutgoingSMsBybillingitem_
		{
			get 
			{
				if (_outgoingSMsBybillingitem_ == null) {
					_outgoingSMsBybillingitem_ = DocketPlace.Business.OutgoingSMS.GetOutgoingSMsBybillingitem_(this);
				}
				return _outgoingSMsBybillingitem_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(BillingItem).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(BillingItem).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(BillingItem).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected BillingItem() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a OutgoingSMS for this BillingItem object
		/// </summary>
		public OutgoingSMS CreateOutgoingSMS()
		{
			return DocketPlace.Business.OutgoingSMS.CreateOutgoingSMSBybillingitem_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetBillingItem(this.billingitem_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
			if (_invoice_ != null)
			{	
				this.invoice_id = this.invoice_.invoice_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[BillingItems].[billingitem_id],
	[BillingItems].[invoice_id],
	[BillingItems].[company_id],
	[BillingItems].[description],
	[BillingItems].[quantity],
	[BillingItems].[unit_cost],
	[BillingItems].[total_amount],
	[BillingItems].[creation_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "BillingItems";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a BillingItem into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="description">description</param>
		/// <param name="quantity">quantity</param>
		/// <param name="unit_cost">unit_cost</param>
		/// <param name="total_amount">total_amount</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void InsertBillingItem(int @invoice_id, int @company_id, string @description, int @quantity, decimal @unit_cost, decimal @total_amount, DateTime @creation_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertBillingItem(@invoice_id, @company_id, @description, @quantity, @unit_cost, @total_amount, @creation_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a BillingItem into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="description">description</param>
		/// <param name="quantity">quantity</param>
		/// <param name="unit_cost">unit_cost</param>
		/// <param name="total_amount">total_amount</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertBillingItem(int @invoice_id, int @company_id, string @description, int @quantity, decimal @unit_cost, decimal @total_amount, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "BillingItemInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", EntityBase.GetDatabaseValue(@invoice_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@quantity", EntityBase.GetDatabaseValue(@quantity)));
			parameters.Add(new SqlParameter("@unit_cost", EntityBase.GetDatabaseValue(@unit_cost)));
			parameters.Add(new SqlParameter("@total_amount", EntityBase.GetDatabaseValue(@total_amount)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a BillingItem into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="description">description</param>
		/// <param name="quantity">quantity</param>
		/// <param name="unit_cost">unit_cost</param>
		/// <param name="total_amount">total_amount</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void UpdateBillingItem(int @billingitem_id, int @invoice_id, int @company_id, string @description, int @quantity, decimal @unit_cost, decimal @total_amount, DateTime @creation_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateBillingItem(@billingitem_id, @invoice_id, @company_id, @description, @quantity, @unit_cost, @total_amount, @creation_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a BillingItem into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="description">description</param>
		/// <param name="quantity">quantity</param>
		/// <param name="unit_cost">unit_cost</param>
		/// <param name="total_amount">total_amount</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdateBillingItem(int @billingitem_id, int @invoice_id, int @company_id, string @description, int @quantity, decimal @unit_cost, decimal @total_amount, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "BillingItemUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", EntityBase.GetDatabaseValue(@billingitem_id)));
			parameters.Add(new SqlParameter("@invoice_id", EntityBase.GetDatabaseValue(@invoice_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@quantity", EntityBase.GetDatabaseValue(@quantity)));
			parameters.Add(new SqlParameter("@unit_cost", EntityBase.GetDatabaseValue(@unit_cost)));
			parameters.Add(new SqlParameter("@total_amount", EntityBase.GetDatabaseValue(@total_amount)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a BillingItem from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
		public static void DeleteBillingItem(int @billingitem_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteBillingItem(@billingitem_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a BillingItem from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteBillingItem(int @billingitem_id, SqlHelper @helper)
		{
			string commandText = "BillingItemDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", @billingitem_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new BillingItem object.
		/// </summary>
		/// <returns>The newly created BillingItem object.</returns>
		public static BillingItem CreateBillingItem()
		{
			return InitializeNew<BillingItem>();
		}
		
		/// <summary>
		/// Retrieve information for a BillingItem by a BillingItem's unique identifier.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <returns>BillingItem</returns>
		public static BillingItem GetBillingItem(int billingitem_id)
		{
			string commandText = "BillingItemGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", billingitem_id));
			
			return GetOne<BillingItem>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection BillingItem objects.
		/// </summary>
		/// <returns>The retrieved collection of BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItems()
		{
			string commandText = "BillingItemGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<BillingItem>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection BillingItem objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of BillingItem objects.</returns>
        protected static EntityList<BillingItem> GetBillingItems(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<BillingItem>(SelectFieldList, "FROM [dbo].[BillingItems]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection BillingItem objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of BillingItem objects.</returns>
        public static EntityList<BillingItem> GetBillingItems(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<BillingItem>(SelectFieldList, "FROM [dbo].[BillingItems]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection BillingItem objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItems(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetBillingItems(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection BillingItem objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItems(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetBillingItems(string.Empty, where, parameters, BillingItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection BillingItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItems(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetBillingItems(prefix, where, parameters, BillingItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection BillingItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItems(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetBillingItems(string.Empty, where, parameters, BillingItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection BillingItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItems(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetBillingItems(prefix, where, parameters, BillingItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection BillingItem objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItems(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + BillingItem.SelectFieldList + "FROM [dbo].[BillingItems] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<BillingItem>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<BillingItem> GetBillingItems(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<BillingItem>(SelectFieldList, "FROM [dbo].[BillingItems] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of BillingItem objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItemsBycompany_(Company @company_) 
		{
			string commandText = "BillingItemGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<BillingItem>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of BillingItem objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItemsBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[BillingItems] 
WHERE 
	[BillingItems].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<BillingItem>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of BillingItem objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItemsBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[BillingItems] 
WHERE 
	[BillingItems].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<BillingItem>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of BillingItem objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItemsBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[BillingItems] 
WHERE 
	[BillingItems].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<BillingItem>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of BillingItem objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItemsBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[BillingItems] 
WHERE 
	[BillingItems].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<BillingItem>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of BillingItem objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItemsBycompany_(int @company_id) 
		{
			string commandText = "BillingItemGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<BillingItem>(commandText, parameters);
		}

		/// <summary>
		/// Create a new BillingItem object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created BillingItem object.</returns>
		public static BillingItem CreateBillingItemBycompany_(Company @company_)
		{
			BillingItem billingItem = InitializeNew<BillingItem>();
			
			billingItem.company_id = @company_.company_id;
			
			billingItem.company_ = @company_;
			
			return billingItem;
		}
		
		/// <summary>
		/// Deletes BillingItem objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeleteBillingItemsBycompany_(Company company) 
		{
			string commandText = "BillingItemDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes BillingItem objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeleteBillingItemsBycompany_(int company_id) 
		{
			string commandText = "BillingItemDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of BillingItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice_">invoice_</param>
		/// <returns>A collection BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItemsByinvoice_(Invoice @invoice_) 
		{
			string commandText = "BillingItemGetByInvoice";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_.invoice_id));
			
			return GetList<BillingItem>(@invoice_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of BillingItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice">invoice</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItemsByinvoice_(Invoice @invoice_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[BillingItems] 
WHERE 
	[BillingItems].[invoice_id] = @invoice_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@invoice_id", @invoice_.invoice_id));
			
			return GetList<BillingItem>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of BillingItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection BillingItem objects.</returns>
		protected static EntityList<BillingItem> GetBillingItemsByinvoice_(int @invoice_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[BillingItems] 
WHERE 
	[BillingItems].[invoice_id] = @invoice_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_id));
			
			return GetList<BillingItem>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of BillingItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice">invoice</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItemsByinvoice_(Invoice @invoice_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[BillingItems] 
WHERE 
	[BillingItems].[invoice_id] = @invoice_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@invoice_id", @invoice_.invoice_id));
			
			return GetList<BillingItem>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of BillingItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItemsByinvoice_(int @invoice_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[BillingItems] 
WHERE 
	[BillingItems].[invoice_id] = @invoice_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_id));
			
			return GetList<BillingItem>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of BillingItem objects by a Invoice unique identifier.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <returns>A collection BillingItem objects.</returns>
		public static EntityList<BillingItem> GetBillingItemsByinvoice_(int @invoice_id) 
		{
			string commandText = "BillingItemGetByInvoice";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_id));
			
			return GetList<BillingItem>(commandText, parameters);
		}

		/// <summary>
		/// Create a new BillingItem object from a Invoice object.
		/// </summary>
		/// <param name="invoice_">invoice_</param>
		/// <returns>The newly created BillingItem object.</returns>
		public static BillingItem CreateBillingItemByinvoice_(Invoice @invoice_)
		{
			BillingItem billingItem = InitializeNew<BillingItem>();
			
			billingItem.invoice_id = @invoice_.invoice_id;
			
			billingItem.invoice_ = @invoice_;
			
			return billingItem;
		}
		
		/// <summary>
		/// Deletes BillingItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice">invoice</param>
		public static void DeleteBillingItemsByinvoice_(Invoice invoice) 
		{
			string commandText = "BillingItemDeleteByInvoice";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", invoice.invoice_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes BillingItem objects by a Invoice unique identifier.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		public static void DeleteBillingItemsByinvoice_(int invoice_id) 
		{
			string commandText = "BillingItemDeleteByInvoice";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", invoice_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class BillingItemProperties
		{
			public const string billingitem_id = "billingitem_id";
			public const string invoice_id = "invoice_id";
			public const string company_id = "company_id";
			public const string description = "description";
			public const string quantity = "quantity";
			public const string unit_cost = "unit_cost";
			public const string total_amount = "total_amount";
			public const string creation_datetime = "creation_datetime";
		}
		#endregion
	}
}
