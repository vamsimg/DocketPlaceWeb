/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 21/07/2012 9:32:18 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a PlacedAd.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("placedad_id: {placedad_id}")]
	public partial class PlacedAd
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _placedad_id = int.MinValue;
		/// <summary>
		/// placedad_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int placedad_id
		{
			[DebuggerStepThrough()]
			get { return this._placedad_id; }
			protected set 
			{
				if (this._placedad_id != value) 
				{
					this._placedad_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("placedad_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admatch_id = int.MinValue;
		/// <summary>
		/// admatch_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int admatch_id
		{
			[DebuggerStepThrough()]
			get { return this._admatch_id; }
			set 
			{
				if (this._admatch_id != value) 
				{
					this._admatch_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admatch_id");
					this._admatch_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _uploadedad_id = int.MinValue;
		/// <summary>
		/// uploadedad_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int uploadedad_id
		{
			[DebuggerStepThrough()]
			get { return this._uploadedad_id; }
			set 
			{
				if (this._uploadedad_id != value) 
				{
					this._uploadedad_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("uploadedad_id");
					this._uploadedad_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _owner_type = String.Empty;
		/// <summary>
		/// owner_type
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string owner_type
		{
			[DebuggerStepThrough()]
			get { return this._owner_type; }
			set 
			{
				if (this._owner_type != value) 
				{
					this._owner_type = value;
					this.IsDirty = true;	
					OnPropertyChanged("owner_type");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _scanned_datetime = DateTime.MinValue;
		/// <summary>
		/// scanned_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public DateTime scanned_datetime
		{
			[DebuggerStepThrough()]
			get { return this._scanned_datetime; }
			set 
			{
				if (this._scanned_datetime != value) 
				{
					this._scanned_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("scanned_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _scanned_store_id = int.MinValue;
		/// <summary>
		/// scanned_store_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int scanned_store_id
		{
			[DebuggerStepThrough()]
			get { return this._scanned_store_id; }
			set 
			{
				if (this._scanned_store_id != value) 
				{
					this._scanned_store_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("scanned_store_id");
					this._scanned_store_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _placement_datetime = DateTime.MinValue;
		/// <summary>
		/// placement_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime placement_datetime
		{
			[DebuggerStepThrough()]
			get { return this._placement_datetime; }
			set 
			{
				if (this._placement_datetime != value) 
				{
					this._placement_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("placement_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _trigger_id = int.MinValue;
		/// <summary>
		/// trigger_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int trigger_id
		{
			[DebuggerStepThrough()]
			get { return this._trigger_id; }
			set 
			{
				if (this._trigger_id != value) 
				{
					this._trigger_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("trigger_id");
					this._trigger_ = null;
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private AdMatch _admatch_ = null;
		/// <summary>
		/// The parent AdMatch object
		/// </summary>
		public AdMatch admatch_
		{
			get 
			{
				if (_admatch_ == null) 
				{
					_admatch_ = GetParentEntity(AdMatch.GetAdMatch(this.admatch_id)) as AdMatch;
				}
				return _admatch_;
			}
			set
			{
				if(_admatch_ != value) 
				{
					_admatch_ = value;
					
					if (value != null) 
					{
						this.admatch_id = value.admatch_id;
					}
					else 
					{
						this.admatch_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Store _scanned_store_ = null;
		/// <summary>
		/// The parent Store object
		/// </summary>
		public Store scanned_store_
		{
			get 
			{
				if (_scanned_store_ == null) 
				{
					_scanned_store_ = GetParentEntity(Store.GetStore(this.scanned_store_id)) as Store;
				}
				return _scanned_store_;
			}
			set
			{
				if(_scanned_store_ != value) 
				{
					_scanned_store_ = value;
					
					if (value != null) 
					{
						this.scanned_store_id = value.store_id;
					}
					else 
					{
						this.scanned_store_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Trigger _trigger_ = null;
		/// <summary>
		/// The parent Trigger object
		/// </summary>
		public Trigger trigger_
		{
			get 
			{
				if (_trigger_ == null) 
				{
					_trigger_ = GetParentEntity(Trigger.GetTrigger(this.trigger_id)) as Trigger;
				}
				return _trigger_;
			}
			set
			{
				if(_trigger_ != value) 
				{
					_trigger_ = value;
					
					if (value != null) 
					{
						this.trigger_id = value.trigger_id;
					}
					else 
					{
						this.trigger_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private UploadedAd _uploadedad_ = null;
		/// <summary>
		/// The parent UploadedAd object
		/// </summary>
		public UploadedAd uploadedad_
		{
			get 
			{
				if (_uploadedad_ == null) 
				{
					_uploadedad_ = GetParentEntity(UploadedAd.GetUploadedAd(this.uploadedad_id)) as UploadedAd;
				}
				return _uploadedad_;
			}
			set
			{
				if(_uploadedad_ != value) 
				{
					_uploadedad_ = value;
					
					if (value != null) 
					{
						this.uploadedad_id = value.uploadedad_id;
					}
					else 
					{
						this.uploadedad_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Docket> _docketsByplacedad_ = null;
		/// <summary>
		/// A collection of Docket children objects
		/// </summary>
		public EntityList<Docket> DocketsByplacedad_
		{
			get 
			{
				if (_docketsByplacedad_ == null) {
					_docketsByplacedad_ = DocketPlace.Business.Docket.GetDocketsByplacedad_(this);
				}
				return _docketsByplacedad_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(PlacedAd).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(PlacedAd).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(PlacedAd).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected PlacedAd() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a Docket for this PlacedAd object
		/// </summary>
		public Docket CreateDocket()
		{
			return DocketPlace.Business.Docket.CreateDocketByplacedad_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetPlacedAd(this.placedad_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_admatch_ != null)
			{	
				this.admatch_id = this.admatch_.admatch_id;
			}
			
			if (_scanned_store_ != null)
			{	
				this.scanned_store_id = this.scanned_store_.store_id;
			}
			
			if (_trigger_ != null)
			{	
				this.trigger_id = this.trigger_.trigger_id;
			}
			
			if (_uploadedad_ != null)
			{	
				this.uploadedad_id = this.uploadedad_.uploadedad_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[PlacedAds].[placedad_id],
	[PlacedAds].[admatch_id],
	[PlacedAds].[uploadedad_id],
	[PlacedAds].[owner_type],
	[PlacedAds].[scanned_datetime],
	[PlacedAds].[scanned_store_id],
	[PlacedAds].[placement_datetime],
	[PlacedAds].[trigger_id]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "PlacedAds";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a PlacedAd into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="owner_type">owner_type</param>
		/// <param name="scanned_datetime">scanned_datetime</param>
		/// <param name="scanned_store_id">scanned_store_id</param>
		/// <param name="placement_datetime">placement_datetime</param>
		/// <param name="trigger_id">trigger_id</param>
		public static void InsertPlacedAd(int @admatch_id, int @uploadedad_id, string @owner_type, DateTime @scanned_datetime, int @scanned_store_id, DateTime @placement_datetime, int @trigger_id)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertPlacedAd(@admatch_id, @uploadedad_id, @owner_type, @scanned_datetime, @scanned_store_id, @placement_datetime, @trigger_id, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a PlacedAd into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="owner_type">owner_type</param>
		/// <param name="scanned_datetime">scanned_datetime</param>
		/// <param name="scanned_store_id">scanned_store_id</param>
		/// <param name="placement_datetime">placement_datetime</param>
		/// <param name="trigger_id">trigger_id</param>
		/// <param name="helper">helper</param>
		internal static void InsertPlacedAd(int @admatch_id, int @uploadedad_id, string @owner_type, DateTime @scanned_datetime, int @scanned_store_id, DateTime @placement_datetime, int @trigger_id, SqlHelper @helper)
		{
			string commandText = "PlacedAdInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", EntityBase.GetDatabaseValue(@admatch_id)));
			parameters.Add(new SqlParameter("@uploadedad_id", EntityBase.GetDatabaseValue(@uploadedad_id)));
			parameters.Add(new SqlParameter("@owner_type", EntityBase.GetDatabaseValue(@owner_type)));
			parameters.Add(new SqlParameter("@scanned_datetime", EntityBase.GetDatabaseValue(@scanned_datetime)));
			parameters.Add(new SqlParameter("@scanned_store_id", EntityBase.GetDatabaseValue(@scanned_store_id)));
			parameters.Add(new SqlParameter("@placement_datetime", EntityBase.GetDatabaseValue(@placement_datetime)));
			parameters.Add(new SqlParameter("@trigger_id", EntityBase.GetDatabaseValue(@trigger_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a PlacedAd into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="owner_type">owner_type</param>
		/// <param name="scanned_datetime">scanned_datetime</param>
		/// <param name="scanned_store_id">scanned_store_id</param>
		/// <param name="placement_datetime">placement_datetime</param>
		/// <param name="trigger_id">trigger_id</param>
		public static void UpdatePlacedAd(int @placedad_id, int @admatch_id, int @uploadedad_id, string @owner_type, DateTime @scanned_datetime, int @scanned_store_id, DateTime @placement_datetime, int @trigger_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdatePlacedAd(@placedad_id, @admatch_id, @uploadedad_id, @owner_type, @scanned_datetime, @scanned_store_id, @placement_datetime, @trigger_id, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a PlacedAd into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="owner_type">owner_type</param>
		/// <param name="scanned_datetime">scanned_datetime</param>
		/// <param name="scanned_store_id">scanned_store_id</param>
		/// <param name="placement_datetime">placement_datetime</param>
		/// <param name="trigger_id">trigger_id</param>
		/// <param name="helper">helper</param>
		internal static void UpdatePlacedAd(int @placedad_id, int @admatch_id, int @uploadedad_id, string @owner_type, DateTime @scanned_datetime, int @scanned_store_id, DateTime @placement_datetime, int @trigger_id, SqlHelper @helper)
		{
			string commandText = "PlacedAdUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", EntityBase.GetDatabaseValue(@placedad_id)));
			parameters.Add(new SqlParameter("@admatch_id", EntityBase.GetDatabaseValue(@admatch_id)));
			parameters.Add(new SqlParameter("@uploadedad_id", EntityBase.GetDatabaseValue(@uploadedad_id)));
			parameters.Add(new SqlParameter("@owner_type", EntityBase.GetDatabaseValue(@owner_type)));
			parameters.Add(new SqlParameter("@scanned_datetime", EntityBase.GetDatabaseValue(@scanned_datetime)));
			parameters.Add(new SqlParameter("@scanned_store_id", EntityBase.GetDatabaseValue(@scanned_store_id)));
			parameters.Add(new SqlParameter("@placement_datetime", EntityBase.GetDatabaseValue(@placement_datetime)));
			parameters.Add(new SqlParameter("@trigger_id", EntityBase.GetDatabaseValue(@trigger_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a PlacedAd from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
		public static void DeletePlacedAd(int @placedad_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeletePlacedAd(@placedad_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a PlacedAd from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
		/// <param name="helper">helper</param>
		internal static void DeletePlacedAd(int @placedad_id, SqlHelper @helper)
		{
			string commandText = "PlacedAdDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", @placedad_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new PlacedAd object.
		/// </summary>
		/// <returns>The newly created PlacedAd object.</returns>
		public static PlacedAd CreatePlacedAd()
		{
			return InitializeNew<PlacedAd>();
		}
		
		/// <summary>
		/// Retrieve information for a PlacedAd by a PlacedAd's unique identifier.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
		/// <returns>PlacedAd</returns>
		public static PlacedAd GetPlacedAd(int placedad_id)
		{
			string commandText = "PlacedAdGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", placedad_id));
			
			return GetOne<PlacedAd>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection PlacedAd objects.
		/// </summary>
		/// <returns>The retrieved collection of PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAds()
		{
			string commandText = "PlacedAdGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<PlacedAd>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection PlacedAd objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of PlacedAd objects.</returns>
        protected static EntityList<PlacedAd> GetPlacedAds(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PlacedAd>(SelectFieldList, "FROM [dbo].[PlacedAds]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection PlacedAd objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of PlacedAd objects.</returns>
        public static EntityList<PlacedAd> GetPlacedAds(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PlacedAd>(SelectFieldList, "FROM [dbo].[PlacedAds]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection PlacedAd objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAds(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPlacedAds(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection PlacedAd objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAds(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPlacedAds(string.Empty, where, parameters, PlacedAd.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PlacedAd objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAds(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPlacedAds(prefix, where, parameters, PlacedAd.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PlacedAd objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAds(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetPlacedAds(string.Empty, where, parameters, PlacedAd.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PlacedAd objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAds(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetPlacedAds(prefix, where, parameters, PlacedAd.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PlacedAd objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAds(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + PlacedAd.SelectFieldList + "FROM [dbo].[PlacedAds] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<PlacedAd>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<PlacedAd> GetPlacedAds(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PlacedAd>(SelectFieldList, "FROM [dbo].[PlacedAds] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of PlacedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_">admatch_</param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByadmatch_(AdMatch @admatch_) 
		{
			string commandText = "PlacedAdGetByAdMatch";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<PlacedAd>(@admatch_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PlacedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAdsByadmatch_(AdMatch @admatch_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PlacedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAdsByadmatch_(int @admatch_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PlacedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByadmatch_(AdMatch @admatch_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PlacedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByadmatch_(int @admatch_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PlacedAd objects by a AdMatch unique identifier.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByadmatch_(int @admatch_id) 
		{
			string commandText = "PlacedAdGetByAdMatch";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<PlacedAd>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PlacedAd object from a AdMatch object.
		/// </summary>
		/// <param name="admatch_">admatch_</param>
		/// <returns>The newly created PlacedAd object.</returns>
		public static PlacedAd CreatePlacedAdByadmatch_(AdMatch @admatch_)
		{
			PlacedAd placedAd = InitializeNew<PlacedAd>();
			
			placedAd.admatch_id = @admatch_.admatch_id;
			
			placedAd.admatch_ = @admatch_;
			
			return placedAd;
		}
		
		/// <summary>
		/// Deletes PlacedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
		public static void DeletePlacedAdsByadmatch_(AdMatch adMatch) 
		{
			string commandText = "PlacedAdDeleteByAdMatch";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", adMatch.admatch_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PlacedAd objects by a AdMatch unique identifier.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		public static void DeletePlacedAdsByadmatch_(int admatch_id) 
		{
			string commandText = "PlacedAdDeleteByAdMatch";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", admatch_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of PlacedAd objects by a Store object.
		/// </summary>
		/// <param name="scanned_store_">scanned_store_</param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByscanned_store_(Store @scanned_store_) 
		{
			string commandText = "PlacedAdGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@scanned_store_id", @scanned_store_.store_id));
			
			return GetList<PlacedAd>(@scanned_store_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PlacedAd objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAdsByscanned_store_(Store @scanned_store_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[scanned_store_id] = @scanned_store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@scanned_store_id", @scanned_store_.store_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PlacedAd objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAdsByscanned_store_(int @store_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[scanned_store_id] = @scanned_store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@scanned_store_id", @store_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PlacedAd objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByscanned_store_(Store @scanned_store_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[scanned_store_id] = @scanned_store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@scanned_store_id", @scanned_store_.store_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PlacedAd objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByscanned_store_(int @store_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[scanned_store_id] = @scanned_store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@scanned_store_id", @store_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PlacedAd objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByscanned_store_(int @store_id) 
		{
			string commandText = "PlacedAdGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@scanned_store_id", @store_id));
			
			return GetList<PlacedAd>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PlacedAd object from a Store object.
		/// </summary>
		/// <param name="scanned_store_">scanned_store_</param>
		/// <returns>The newly created PlacedAd object.</returns>
		public static PlacedAd CreatePlacedAdByscanned_store_(Store @scanned_store_)
		{
			PlacedAd placedAd = InitializeNew<PlacedAd>();
			
			placedAd.scanned_store_id = @scanned_store_.store_id;
			
			placedAd.scanned_store_ = @scanned_store_;
			
			return placedAd;
		}
		
		/// <summary>
		/// Deletes PlacedAd objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
		public static void DeletePlacedAdsByscanned_store_(Store store) 
		{
			string commandText = "PlacedAdDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@scanned_store_id", store.store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PlacedAd objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		public static void DeletePlacedAdsByscanned_store_(int store_id) 
		{
			string commandText = "PlacedAdDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@scanned_store_id", store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of PlacedAd objects by a Trigger object.
		/// </summary>
		/// <param name="trigger_">trigger_</param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsBytrigger_(Trigger @trigger_) 
		{
			string commandText = "PlacedAdGetByTrigger";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", @trigger_.trigger_id));
			
			return GetList<PlacedAd>(@trigger_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PlacedAd objects by a Trigger object.
		/// </summary>
		/// <param name="trigger">trigger</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAdsBytrigger_(Trigger @trigger_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[trigger_id] = @trigger_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@trigger_id", @trigger_.trigger_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PlacedAd objects by a Trigger object.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAdsBytrigger_(int @trigger_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[trigger_id] = @trigger_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", @trigger_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PlacedAd objects by a Trigger object.
		/// </summary>
		/// <param name="trigger">trigger</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsBytrigger_(Trigger @trigger_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[trigger_id] = @trigger_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@trigger_id", @trigger_.trigger_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PlacedAd objects by a Trigger object.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsBytrigger_(int @trigger_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[trigger_id] = @trigger_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", @trigger_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PlacedAd objects by a Trigger unique identifier.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsBytrigger_(int @trigger_id) 
		{
			string commandText = "PlacedAdGetByTrigger";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", @trigger_id));
			
			return GetList<PlacedAd>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PlacedAd object from a Trigger object.
		/// </summary>
		/// <param name="trigger_">trigger_</param>
		/// <returns>The newly created PlacedAd object.</returns>
		public static PlacedAd CreatePlacedAdBytrigger_(Trigger @trigger_)
		{
			PlacedAd placedAd = InitializeNew<PlacedAd>();
			
			placedAd.trigger_id = @trigger_.trigger_id;
			
			placedAd.trigger_ = @trigger_;
			
			return placedAd;
		}
		
		/// <summary>
		/// Deletes PlacedAd objects by a Trigger object.
		/// </summary>
		/// <param name="trigger">trigger</param>
		public static void DeletePlacedAdsBytrigger_(Trigger trigger) 
		{
			string commandText = "PlacedAdDeleteByTrigger";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", trigger.trigger_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PlacedAd objects by a Trigger unique identifier.
		/// </summary>
		/// <param name="trigger_id">trigger_id</param>
		public static void DeletePlacedAdsBytrigger_(int trigger_id) 
		{
			string commandText = "PlacedAdDeleteByTrigger";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@trigger_id", trigger_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of PlacedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_">uploadedad_</param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByuploadedad_(UploadedAd @uploadedad_) 
		{
			string commandText = "PlacedAdGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<PlacedAd>(@uploadedad_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PlacedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAdsByuploadedad_(UploadedAd @uploadedad_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PlacedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		protected static EntityList<PlacedAd> GetPlacedAdsByuploadedad_(int @uploadedad_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PlacedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByuploadedad_(UploadedAd @uploadedad_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PlacedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByuploadedad_(int @uploadedad_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PlacedAds] 
WHERE 
	[PlacedAds].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<PlacedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PlacedAd objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <returns>A collection PlacedAd objects.</returns>
		public static EntityList<PlacedAd> GetPlacedAdsByuploadedad_(int @uploadedad_id) 
		{
			string commandText = "PlacedAdGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<PlacedAd>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PlacedAd object from a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_">uploadedad_</param>
		/// <returns>The newly created PlacedAd object.</returns>
		public static PlacedAd CreatePlacedAdByuploadedad_(UploadedAd @uploadedad_)
		{
			PlacedAd placedAd = InitializeNew<PlacedAd>();
			
			placedAd.uploadedad_id = @uploadedad_.uploadedad_id;
			
			placedAd.uploadedad_ = @uploadedad_;
			
			return placedAd;
		}
		
		/// <summary>
		/// Deletes PlacedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
		public static void DeletePlacedAdsByuploadedad_(UploadedAd uploadedAd) 
		{
			string commandText = "PlacedAdDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedAd.uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PlacedAd objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		public static void DeletePlacedAdsByuploadedad_(int uploadedad_id) 
		{
			string commandText = "PlacedAdDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class PlacedAdProperties
		{
			public const string placedad_id = "placedad_id";
			public const string admatch_id = "admatch_id";
			public const string uploadedad_id = "uploadedad_id";
			public const string owner_type = "owner_type";
			public const string scanned_datetime = "scanned_datetime";
			public const string scanned_store_id = "scanned_store_id";
			public const string placement_datetime = "placement_datetime";
			public const string trigger_id = "trigger_id";
		}
		#endregion
	}
}
