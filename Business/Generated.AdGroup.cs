/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 05/09/2012 12:37:29 AM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a AdGroup.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("adgroup_id: {adgroup_id}")]
	public partial class AdGroup
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _adgroup_id = int.MinValue;
		/// <summary>
		/// adgroup_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int adgroup_id
		{
			[DebuggerStepThrough()]
			get { return this._adgroup_id; }
			protected set 
			{
				if (this._adgroup_id != value) 
				{
					this._adgroup_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("adgroup_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _campaign_id = int.MinValue;
		/// <summary>
		/// campaign_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int campaign_id
		{
			[DebuggerStepThrough()]
			get { return this._campaign_id; }
			set 
			{
				if (this._campaign_id != value) 
				{
					this._campaign_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("campaign_id");
					this._campaign_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _title = String.Empty;
		/// <summary>
		/// title
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string title
		{
			[DebuggerStepThrough()]
			get { return this._title; }
			set 
			{
				if (this._title != value) 
				{
					this._title = value;
					this.IsDirty = true;	
					OnPropertyChanged("title");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _notes = String.Empty;
		/// <summary>
		/// notes
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string notes
		{
			[DebuggerStepThrough()]
			get { return this._notes; }
			set 
			{
				if (this._notes != value) 
				{
					this._notes = value;
					this.IsDirty = true;	
					OnPropertyChanged("notes");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _budget = int.MinValue;
		/// <summary>
		/// budget
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int budget
		{
			[DebuggerStepThrough()]
			get { return this._budget; }
			set 
			{
				if (this._budget != value) 
				{
					this._budget = value;
					this.IsDirty = true;	
					OnPropertyChanged("budget");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_active = false;
		/// <summary>
		/// is_active
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_active
		{
			[DebuggerStepThrough()]
			get { return this._is_active; }
			set 
			{
				if (this._is_active != value) 
				{
					this._is_active = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_active");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _start_datetime = DateTime.MinValue;
		/// <summary>
		/// start_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime start_datetime
		{
			[DebuggerStepThrough()]
			get { return this._start_datetime; }
			set 
			{
				if (this._start_datetime != value) 
				{
					this._start_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("start_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _end_datetime = DateTime.MinValue;
		/// <summary>
		/// end_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime end_datetime
		{
			[DebuggerStepThrough()]
			get { return this._end_datetime; }
			set 
			{
				if (this._end_datetime != value) 
				{
					this._end_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("end_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _creator_id = int.MinValue;
		/// <summary>
		/// creator_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int creator_id
		{
			[DebuggerStepThrough()]
			get { return this._creator_id; }
			set 
			{
				if (this._creator_id != value) 
				{
					this._creator_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("creator_id");
					this._creator_ = null;
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Campaign _campaign_ = null;
		/// <summary>
		/// The parent Campaign object
		/// </summary>
		public Campaign campaign_
		{
			get 
			{
				if (_campaign_ == null) 
				{
					_campaign_ = GetParentEntity(Campaign.GetCampaign(this.campaign_id)) as Campaign;
				}
				return _campaign_;
			}
			set
			{
				if(_campaign_ != value) 
				{
					_campaign_ = value;
					
					if (value != null) 
					{
						this.campaign_id = value.campaign_id;
					}
					else 
					{
						this.campaign_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _creator_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin creator_
		{
			get 
			{
				if (_creator_ == null) 
				{
					_creator_ = GetParentEntity(Admin.GetAdmin(this.creator_id)) as Admin;
				}
				return _creator_;
			}
			set
			{
				if(_creator_ != value) 
				{
					_creator_ = value;
					
					if (value != null) 
					{
						this.creator_id = value.admin_id;
					}
					else 
					{
						this.creator_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<AdMatch> _adMatchesByadgroup_ = null;
		/// <summary>
		/// A collection of AdMatch children objects
		/// </summary>
		public EntityList<AdMatch> AdMatchesByadgroup_
		{
			get 
			{
				if (_adMatchesByadgroup_ == null) {
					_adMatchesByadgroup_ = DocketPlace.Business.AdMatch.GetAdMatchesByadgroup_(this);
				}
				return _adMatchesByadgroup_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesByadgroup_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesByadgroup_
		{
			get 
			{
				if (_logEntriesByadgroup_ == null) {
					_logEntriesByadgroup_ = DocketPlace.Business.LogEntry.GetLogEntriesByadgroup_(this);
				}
				return _logEntriesByadgroup_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(AdGroup).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(AdGroup).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(AdGroup).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected AdGroup() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a AdMatch for this AdGroup object
		/// </summary>
		public AdMatch CreateAdMatch()
		{
			return DocketPlace.Business.AdMatch.CreateAdMatchByadgroup_(this);
		}
		/// <summary>
		/// Creates a LogEntry for this AdGroup object
		/// </summary>
		public LogEntry CreateLogEntry()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryByadgroup_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetAdGroup(this.adgroup_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_campaign_ != null)
			{	
				this.campaign_id = this.campaign_.campaign_id;
			}
			
			if (_creator_ != null)
			{	
				this.creator_id = this.creator_.admin_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[AdGroups].[adgroup_id],
	[AdGroups].[campaign_id],
	[AdGroups].[title],
	[AdGroups].[notes],
	[AdGroups].[budget],
	[AdGroups].[is_active],
	[AdGroups].[start_datetime],
	[AdGroups].[end_datetime],
	[AdGroups].[creation_datetime],
	[AdGroups].[creator_id]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "AdGroups";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a AdGroup into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="title">title</param>
		/// <param name="notes">notes</param>
		/// <param name="budget">budget</param>
		/// <param name="is_active">is_active</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="creator_id">creator_id</param>
		public static void InsertAdGroup(int @campaign_id, string @title, string @notes, int @budget, bool @is_active, DateTime @start_datetime, DateTime @end_datetime, DateTime @creation_datetime, int @creator_id)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertAdGroup(@campaign_id, @title, @notes, @budget, @is_active, @start_datetime, @end_datetime, @creation_datetime, @creator_id, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a AdGroup into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="title">title</param>
		/// <param name="notes">notes</param>
		/// <param name="budget">budget</param>
		/// <param name="is_active">is_active</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="helper">helper</param>
		internal static void InsertAdGroup(int @campaign_id, string @title, string @notes, int @budget, bool @is_active, DateTime @start_datetime, DateTime @end_datetime, DateTime @creation_datetime, int @creator_id, SqlHelper @helper)
		{
			string commandText = "AdGroupInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", EntityBase.GetDatabaseValue(@campaign_id)));
			parameters.Add(new SqlParameter("@title", EntityBase.GetDatabaseValue(@title)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@budget", EntityBase.GetDatabaseValue(@budget)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@start_datetime", EntityBase.GetDatabaseValue(@start_datetime)));
			parameters.Add(new SqlParameter("@end_datetime", EntityBase.GetDatabaseValue(@end_datetime)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@creator_id", EntityBase.GetDatabaseValue(@creator_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a AdGroup into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="title">title</param>
		/// <param name="notes">notes</param>
		/// <param name="budget">budget</param>
		/// <param name="is_active">is_active</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="creator_id">creator_id</param>
		public static void UpdateAdGroup(int @adgroup_id, int @campaign_id, string @title, string @notes, int @budget, bool @is_active, DateTime @start_datetime, DateTime @end_datetime, DateTime @creation_datetime, int @creator_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateAdGroup(@adgroup_id, @campaign_id, @title, @notes, @budget, @is_active, @start_datetime, @end_datetime, @creation_datetime, @creator_id, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a AdGroup into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="title">title</param>
		/// <param name="notes">notes</param>
		/// <param name="budget">budget</param>
		/// <param name="is_active">is_active</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="helper">helper</param>
		internal static void UpdateAdGroup(int @adgroup_id, int @campaign_id, string @title, string @notes, int @budget, bool @is_active, DateTime @start_datetime, DateTime @end_datetime, DateTime @creation_datetime, int @creator_id, SqlHelper @helper)
		{
			string commandText = "AdGroupUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", EntityBase.GetDatabaseValue(@adgroup_id)));
			parameters.Add(new SqlParameter("@campaign_id", EntityBase.GetDatabaseValue(@campaign_id)));
			parameters.Add(new SqlParameter("@title", EntityBase.GetDatabaseValue(@title)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@budget", EntityBase.GetDatabaseValue(@budget)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@start_datetime", EntityBase.GetDatabaseValue(@start_datetime)));
			parameters.Add(new SqlParameter("@end_datetime", EntityBase.GetDatabaseValue(@end_datetime)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@creator_id", EntityBase.GetDatabaseValue(@creator_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a AdGroup from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		public static void DeleteAdGroup(int @adgroup_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteAdGroup(@adgroup_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a AdGroup from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteAdGroup(int @adgroup_id, SqlHelper @helper)
		{
			string commandText = "AdGroupDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new AdGroup object.
		/// </summary>
		/// <returns>The newly created AdGroup object.</returns>
		public static AdGroup CreateAdGroup()
		{
			return InitializeNew<AdGroup>();
		}
		
		/// <summary>
		/// Retrieve information for a AdGroup by a AdGroup's unique identifier.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <returns>AdGroup</returns>
		public static AdGroup GetAdGroup(int adgroup_id)
		{
			string commandText = "AdGroupGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", adgroup_id));
			
			return GetOne<AdGroup>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection AdGroup objects.
		/// </summary>
		/// <returns>The retrieved collection of AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroups()
		{
			string commandText = "AdGroupGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<AdGroup>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection AdGroup objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of AdGroup objects.</returns>
        protected static EntityList<AdGroup> GetAdGroups(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<AdGroup>(SelectFieldList, "FROM [dbo].[AdGroups]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection AdGroup objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of AdGroup objects.</returns>
        public static EntityList<AdGroup> GetAdGroups(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<AdGroup>(SelectFieldList, "FROM [dbo].[AdGroups]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection AdGroup objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroups(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdGroups(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection AdGroup objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroups(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdGroups(string.Empty, where, parameters, AdGroup.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection AdGroup objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroups(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdGroups(prefix, where, parameters, AdGroup.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection AdGroup objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroups(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetAdGroups(string.Empty, where, parameters, AdGroup.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection AdGroup objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroups(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetAdGroups(prefix, where, parameters, AdGroup.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection AdGroup objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroups(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + AdGroup.SelectFieldList + "FROM [dbo].[AdGroups] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<AdGroup>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<AdGroup> GetAdGroups(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<AdGroup>(SelectFieldList, "FROM [dbo].[AdGroups] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of AdGroup objects by a Campaign object.
		/// </summary>
		/// <param name="campaign_">campaign_</param>
		/// <returns>A collection AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroupsBycampaign_(Campaign @campaign_) 
		{
			string commandText = "AdGroupGetByCampaign";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_.campaign_id));
			
			return GetList<AdGroup>(@campaign_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of AdGroup objects by a Campaign object.
		/// </summary>
		/// <param name="campaign">campaign</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroupsBycampaign_(Campaign @campaign_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdGroups] 
WHERE 
	[AdGroups].[campaign_id] = @campaign_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@campaign_id", @campaign_.campaign_id));
			
			return GetList<AdGroup>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of AdGroup objects by a Campaign object.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroupsBycampaign_(int @campaign_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdGroups] 
WHERE 
	[AdGroups].[campaign_id] = @campaign_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_id));
			
			return GetList<AdGroup>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of AdGroup objects by a Campaign object.
		/// </summary>
		/// <param name="campaign">campaign</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroupsBycampaign_(Campaign @campaign_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdGroups] 
WHERE 
	[AdGroups].[campaign_id] = @campaign_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@campaign_id", @campaign_.campaign_id));
			
			return GetList<AdGroup>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of AdGroup objects by a Campaign object.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroupsBycampaign_(int @campaign_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdGroups] 
WHERE 
	[AdGroups].[campaign_id] = @campaign_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_id));
			
			return GetList<AdGroup>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of AdGroup objects by a Campaign unique identifier.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		/// <returns>A collection AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroupsBycampaign_(int @campaign_id) 
		{
			string commandText = "AdGroupGetByCampaign";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_id));
			
			return GetList<AdGroup>(commandText, parameters);
		}

		/// <summary>
		/// Create a new AdGroup object from a Campaign object.
		/// </summary>
		/// <param name="campaign_">campaign_</param>
		/// <returns>The newly created AdGroup object.</returns>
		public static AdGroup CreateAdGroupBycampaign_(Campaign @campaign_)
		{
			AdGroup adGroup = InitializeNew<AdGroup>();
			
			adGroup.campaign_id = @campaign_.campaign_id;
			
			adGroup.campaign_ = @campaign_;
			
			return adGroup;
		}
		
		/// <summary>
		/// Deletes AdGroup objects by a Campaign object.
		/// </summary>
		/// <param name="campaign">campaign</param>
		public static void DeleteAdGroupsBycampaign_(Campaign campaign) 
		{
			string commandText = "AdGroupDeleteByCampaign";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", campaign.campaign_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes AdGroup objects by a Campaign unique identifier.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		public static void DeleteAdGroupsBycampaign_(int campaign_id) 
		{
			string commandText = "AdGroupDeleteByCampaign";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", campaign_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of AdGroup objects by a Admin object.
		/// </summary>
		/// <param name="creator_">creator_</param>
		/// <returns>A collection AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroupsBycreator_(Admin @creator_) 
		{
			string commandText = "AdGroupGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<AdGroup>(@creator_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of AdGroup objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroupsBycreator_(Admin @creator_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdGroups] 
WHERE 
	[AdGroups].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<AdGroup>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of AdGroup objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdGroup objects.</returns>
		protected static EntityList<AdGroup> GetAdGroupsBycreator_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdGroups] 
WHERE 
	[AdGroups].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<AdGroup>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of AdGroup objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroupsBycreator_(Admin @creator_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdGroups] 
WHERE 
	[AdGroups].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<AdGroup>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of AdGroup objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroupsBycreator_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[AdGroups] 
WHERE 
	[AdGroups].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<AdGroup>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of AdGroup objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection AdGroup objects.</returns>
		public static EntityList<AdGroup> GetAdGroupsBycreator_(int @admin_id) 
		{
			string commandText = "AdGroupGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<AdGroup>(commandText, parameters);
		}

		/// <summary>
		/// Create a new AdGroup object from a Admin object.
		/// </summary>
		/// <param name="creator_">creator_</param>
		/// <returns>The newly created AdGroup object.</returns>
		public static AdGroup CreateAdGroupBycreator_(Admin @creator_)
		{
			AdGroup adGroup = InitializeNew<AdGroup>();
			
			adGroup.creator_id = @creator_.admin_id;
			
			adGroup.creator_ = @creator_;
			
			return adGroup;
		}
		
		/// <summary>
		/// Deletes AdGroup objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeleteAdGroupsBycreator_(Admin admin) 
		{
			string commandText = "AdGroupDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes AdGroup objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeleteAdGroupsBycreator_(int admin_id) 
		{
			string commandText = "AdGroupDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class AdGroupProperties
		{
			public const string adgroup_id = "adgroup_id";
			public const string campaign_id = "campaign_id";
			public const string title = "title";
			public const string notes = "notes";
			public const string budget = "budget";
			public const string is_active = "is_active";
			public const string start_datetime = "start_datetime";
			public const string end_datetime = "end_datetime";
			public const string creation_datetime = "creation_datetime";
			public const string creator_id = "creator_id";
		}
		#endregion
	}
}
