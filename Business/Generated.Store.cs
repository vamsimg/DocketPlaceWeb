/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 4:55:44 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Store.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("store_id: {store_id}")]
	public partial class Store
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _store_id = int.MinValue;
		/// <summary>
		/// store_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int store_id
		{
			[DebuggerStepThrough()]
			get { return this._store_id; }
			protected set 
			{
				if (this._store_id != value) 
				{
					this._store_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("store_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _default_uploadedad_id = int.MinValue;
		/// <summary>
		/// default_uploadedad_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int default_uploadedad_id
		{
			[DebuggerStepThrough()]
			get { return this._default_uploadedad_id; }
			set 
			{
				if (this._default_uploadedad_id != value) 
				{
					this._default_uploadedad_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("default_uploadedad_id");
					this._default_uploadedad_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _store_contact = String.Empty;
		/// <summary>
		/// store_contact
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string store_contact
		{
			[DebuggerStepThrough()]
			get { return this._store_contact; }
			set 
			{
				if (this._store_contact != value) 
				{
					this._store_contact = value;
					this.IsDirty = true;	
					OnPropertyChanged("store_contact");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _address = String.Empty;
		/// <summary>
		/// address
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string address
		{
			[DebuggerStepThrough()]
			get { return this._address; }
			set 
			{
				if (this._address != value) 
				{
					this._address = value;
					this.IsDirty = true;	
					OnPropertyChanged("address");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _suburb = String.Empty;
		/// <summary>
		/// suburb
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string suburb
		{
			[DebuggerStepThrough()]
			get { return this._suburb; }
			set 
			{
				if (this._suburb != value) 
				{
					this._suburb = value;
					this.IsDirty = true;	
					OnPropertyChanged("suburb");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _state = String.Empty;
		/// <summary>
		/// state
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string state
		{
			[DebuggerStepThrough()]
			get { return this._state; }
			set 
			{
				if (this._state != value) 
				{
					this._state = value;
					this.IsDirty = true;	
					OnPropertyChanged("state");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _postcode = String.Empty;
		/// <summary>
		/// postcode
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string postcode
		{
			[DebuggerStepThrough()]
			get { return this._postcode; }
			set 
			{
				if (this._postcode != value) 
				{
					this._postcode = value;
					this.IsDirty = true;	
					OnPropertyChanged("postcode");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _num_printers = int.MinValue;
		/// <summary>
		/// num_printers
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int num_printers
		{
			[DebuggerStepThrough()]
			get { return this._num_printers; }
			set 
			{
				if (this._num_printers != value) 
				{
					this._num_printers = value;
					this.IsDirty = true;	
					OnPropertyChanged("num_printers");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _avg_volume = int.MinValue;
		/// <summary>
		/// avg_volume
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int avg_volume
		{
			[DebuggerStepThrough()]
			get { return this._avg_volume; }
			set 
			{
				if (this._avg_volume != value) 
				{
					this._avg_volume = value;
					this.IsDirty = true;	
					OnPropertyChanged("avg_volume");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _password = String.Empty;
		/// <summary>
		/// password
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string password
		{
			[DebuggerStepThrough()]
			get { return this._password; }
			set 
			{
				if (this._password != value) 
				{
					this._password = value;
					this.IsDirty = true;	
					OnPropertyChanged("password");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _country = String.Empty;
		/// <summary>
		/// country
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string country
		{
			[DebuggerStepThrough()]
			get { return this._country; }
			set 
			{
				if (this._country != value) 
				{
					this._country = value;
					this.IsDirty = true;	
					OnPropertyChanged("country");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private UploadedAd _default_uploadedad_ = null;
		/// <summary>
		/// The parent UploadedAd object
		/// </summary>
		public UploadedAd default_uploadedad_
		{
			get 
			{
				if (_default_uploadedad_ == null) 
				{
					_default_uploadedad_ = GetParentEntity(UploadedAd.GetUploadedAd(this.default_uploadedad_id)) as UploadedAd;
				}
				return _default_uploadedad_;
			}
			set
			{
				if(_default_uploadedad_ != value) 
				{
					_default_uploadedad_ = value;
					
					if (value != null) 
					{
						this.default_uploadedad_id = value.uploadedad_id;
					}
					else 
					{
						this.default_uploadedad_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<AdMatch> _adMatchesBystore_ = null;
		/// <summary>
		/// A collection of AdMatch children objects
		/// </summary>
		public EntityList<AdMatch> AdMatchesBystore_
		{
			get 
			{
				if (_adMatchesBystore_ == null) {
					_adMatchesBystore_ = DocketPlace.Business.AdMatch.GetAdMatchesBystore_(this);
				}
				return _adMatchesBystore_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Docket> _docketsBystore_ = null;
		/// <summary>
		/// A collection of Docket children objects
		/// </summary>
		public EntityList<Docket> DocketsBystore_
		{
			get 
			{
				if (_docketsBystore_ == null) {
					_docketsBystore_ = DocketPlace.Business.Docket.GetDocketsBystore_(this);
				}
				return _docketsBystore_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesBystore_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesBystore_
		{
			get 
			{
				if (_logEntriesBystore_ == null) {
					_logEntriesBystore_ = DocketPlace.Business.LogEntry.GetLogEntriesBystore_(this);
				}
				return _logEntriesBystore_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Member> _membersBystore_ = null;
		/// <summary>
		/// A collection of Member children objects
		/// </summary>
		public EntityList<Member> MembersBystore_
		{
			get 
			{
				if (_membersBystore_ == null) {
					_membersBystore_ = DocketPlace.Business.Member.GetMembersBystore_(this);
				}
				return _membersBystore_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PlacedAd> _placedAdsByscanned_store_ = null;
		/// <summary>
		/// A collection of PlacedAd children objects
		/// </summary>
		public EntityList<PlacedAd> PlacedAdsByscanned_store_
		{
			get 
			{
				if (_placedAdsByscanned_store_ == null) {
					_placedAdsByscanned_store_ = DocketPlace.Business.PlacedAd.GetPlacedAdsByscanned_store_(this);
				}
				return _placedAdsByscanned_store_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Trigger> _triggersBystore_ = null;
		/// <summary>
		/// A collection of Trigger children objects
		/// </summary>
		public EntityList<Trigger> TriggersBystore_
		{
			get 
			{
				if (_triggersBystore_ == null) {
					_triggersBystore_ = DocketPlace.Business.Trigger.GetTriggersBystore_(this);
				}
				return _triggersBystore_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Store).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Store).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Store).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Store() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a AdMatch for this Store object
		/// </summary>
		public AdMatch CreateAdMatch()
		{
			return DocketPlace.Business.AdMatch.CreateAdMatchBystore_(this);
		}
		/// <summary>
		/// Creates a Docket for this Store object
		/// </summary>
		public Docket CreateDocket()
		{
			return DocketPlace.Business.Docket.CreateDocketBystore_(this);
		}
		/// <summary>
		/// Creates a LogEntry for this Store object
		/// </summary>
		public LogEntry CreateLogEntry()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryBystore_(this);
		}
		/// <summary>
		/// Creates a Member for this Store object
		/// </summary>
		public Member CreateMember()
		{
			return DocketPlace.Business.Member.CreateMemberBystore_(this);
		}
		/// <summary>
		/// Creates a PlacedAd for this Store object
		/// </summary>
		public PlacedAd CreatePlacedAd()
		{
			return DocketPlace.Business.PlacedAd.CreatePlacedAdByscanned_store_(this);
		}
		/// <summary>
		/// Creates a Trigger for this Store object
		/// </summary>
		public Trigger CreateTrigger()
		{
			return DocketPlace.Business.Trigger.CreateTriggerBystore_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetStore(this.store_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
			if (_default_uploadedad_ != null)
			{	
				this.default_uploadedad_id = this.default_uploadedad_.uploadedad_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Stores].[store_id],
	[Stores].[company_id],
	[Stores].[default_uploadedad_id],
	[Stores].[store_contact],
	[Stores].[address],
	[Stores].[suburb],
	[Stores].[state],
	[Stores].[postcode],
	[Stores].[num_printers],
	[Stores].[avg_volume],
	[Stores].[creation_datetime],
	[Stores].[password],
	[Stores].[country]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Stores";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Store into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="default_uploadedad_id">default_uploadedad_id</param>
		/// <param name="store_contact">store_contact</param>
		/// <param name="address">address</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="postcode">postcode</param>
		/// <param name="num_printers">num_printers</param>
		/// <param name="avg_volume">avg_volume</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="password">password</param>
		/// <param name="country">country</param>
		public static void InsertStore(int @company_id, int @default_uploadedad_id, string @store_contact, string @address, string @suburb, string @state, string @postcode, int @num_printers, int @avg_volume, DateTime @creation_datetime, string @password, string @country)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertStore(@company_id, @default_uploadedad_id, @store_contact, @address, @suburb, @state, @postcode, @num_printers, @avg_volume, @creation_datetime, @password, @country, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Store into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="default_uploadedad_id">default_uploadedad_id</param>
		/// <param name="store_contact">store_contact</param>
		/// <param name="address">address</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="postcode">postcode</param>
		/// <param name="num_printers">num_printers</param>
		/// <param name="avg_volume">avg_volume</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="password">password</param>
		/// <param name="country">country</param>
		/// <param name="helper">helper</param>
		internal static void InsertStore(int @company_id, int @default_uploadedad_id, string @store_contact, string @address, string @suburb, string @state, string @postcode, int @num_printers, int @avg_volume, DateTime @creation_datetime, string @password, string @country, SqlHelper @helper)
		{
			string commandText = "StoreInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@default_uploadedad_id", EntityBase.GetDatabaseValue(@default_uploadedad_id)));
			parameters.Add(new SqlParameter("@store_contact", EntityBase.GetDatabaseValue(@store_contact)));
			parameters.Add(new SqlParameter("@address", EntityBase.GetDatabaseValue(@address)));
			parameters.Add(new SqlParameter("@suburb", EntityBase.GetDatabaseValue(@suburb)));
			parameters.Add(new SqlParameter("@state", EntityBase.GetDatabaseValue(@state)));
			parameters.Add(new SqlParameter("@postcode", EntityBase.GetDatabaseValue(@postcode)));
			parameters.Add(new SqlParameter("@num_printers", EntityBase.GetDatabaseValue(@num_printers)));
			parameters.Add(new SqlParameter("@avg_volume", EntityBase.GetDatabaseValue(@avg_volume)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@password", EntityBase.GetDatabaseValue(@password)));
			parameters.Add(new SqlParameter("@country", EntityBase.GetDatabaseValue(@country)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Store into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="default_uploadedad_id">default_uploadedad_id</param>
		/// <param name="store_contact">store_contact</param>
		/// <param name="address">address</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="postcode">postcode</param>
		/// <param name="num_printers">num_printers</param>
		/// <param name="avg_volume">avg_volume</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="password">password</param>
		/// <param name="country">country</param>
		public static void UpdateStore(int @store_id, int @company_id, int @default_uploadedad_id, string @store_contact, string @address, string @suburb, string @state, string @postcode, int @num_printers, int @avg_volume, DateTime @creation_datetime, string @password, string @country)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateStore(@store_id, @company_id, @default_uploadedad_id, @store_contact, @address, @suburb, @state, @postcode, @num_printers, @avg_volume, @creation_datetime, @password, @country, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Store into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="default_uploadedad_id">default_uploadedad_id</param>
		/// <param name="store_contact">store_contact</param>
		/// <param name="address">address</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="postcode">postcode</param>
		/// <param name="num_printers">num_printers</param>
		/// <param name="avg_volume">avg_volume</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="password">password</param>
		/// <param name="country">country</param>
		/// <param name="helper">helper</param>
		internal static void UpdateStore(int @store_id, int @company_id, int @default_uploadedad_id, string @store_contact, string @address, string @suburb, string @state, string @postcode, int @num_printers, int @avg_volume, DateTime @creation_datetime, string @password, string @country, SqlHelper @helper)
		{
			string commandText = "StoreUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@default_uploadedad_id", EntityBase.GetDatabaseValue(@default_uploadedad_id)));
			parameters.Add(new SqlParameter("@store_contact", EntityBase.GetDatabaseValue(@store_contact)));
			parameters.Add(new SqlParameter("@address", EntityBase.GetDatabaseValue(@address)));
			parameters.Add(new SqlParameter("@suburb", EntityBase.GetDatabaseValue(@suburb)));
			parameters.Add(new SqlParameter("@state", EntityBase.GetDatabaseValue(@state)));
			parameters.Add(new SqlParameter("@postcode", EntityBase.GetDatabaseValue(@postcode)));
			parameters.Add(new SqlParameter("@num_printers", EntityBase.GetDatabaseValue(@num_printers)));
			parameters.Add(new SqlParameter("@avg_volume", EntityBase.GetDatabaseValue(@avg_volume)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@password", EntityBase.GetDatabaseValue(@password)));
			parameters.Add(new SqlParameter("@country", EntityBase.GetDatabaseValue(@country)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Store from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="store_id">store_id</param>
		public static void DeleteStore(int @store_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteStore(@store_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Store from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteStore(int @store_id, SqlHelper @helper)
		{
			string commandText = "StoreDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Store object.
		/// </summary>
		/// <returns>The newly created Store object.</returns>
		public static Store CreateStore()
		{
			return InitializeNew<Store>();
		}
		
		/// <summary>
		/// Retrieve information for a Store by a Store's unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <returns>Store</returns>
		public static Store GetStore(int store_id)
		{
			string commandText = "StoreGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store_id));
			
			return GetOne<Store>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Store objects.
		/// </summary>
		/// <returns>The retrieved collection of Store objects.</returns>
		public static EntityList<Store> GetStores()
		{
			string commandText = "StoreGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Store>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Store objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Store objects.</returns>
        protected static EntityList<Store> GetStores(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Store>(SelectFieldList, "FROM [dbo].[Stores]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Store objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Store objects.</returns>
        public static EntityList<Store> GetStores(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Store>(SelectFieldList, "FROM [dbo].[Stores]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Store objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Store objects.</returns>
		protected static EntityList<Store> GetStores(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetStores(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Store objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Store objects.</returns>
		protected static EntityList<Store> GetStores(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetStores(string.Empty, where, parameters, Store.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Store objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Store objects.</returns>
		protected static EntityList<Store> GetStores(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetStores(prefix, where, parameters, Store.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Store objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Store objects.</returns>
		protected static EntityList<Store> GetStores(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetStores(string.Empty, where, parameters, Store.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Store objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Store objects.</returns>
		protected static EntityList<Store> GetStores(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetStores(prefix, where, parameters, Store.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Store objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Store objects.</returns>
		protected static EntityList<Store> GetStores(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Store.SelectFieldList + "FROM [dbo].[Stores] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Store>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Store> GetStores(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Store>(SelectFieldList, "FROM [dbo].[Stores] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of Store objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection Store objects.</returns>
		public static EntityList<Store> GetStoresBycompany_(Company @company_) 
		{
			string commandText = "StoreGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Store>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Store objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Store objects.</returns>
		protected static EntityList<Store> GetStoresBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Stores] 
WHERE 
	[Stores].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Store>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Store objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Store objects.</returns>
		protected static EntityList<Store> GetStoresBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Stores] 
WHERE 
	[Stores].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Store>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Store objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Store objects.</returns>
		public static EntityList<Store> GetStoresBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Stores] 
WHERE 
	[Stores].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Store>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Store objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Store objects.</returns>
		public static EntityList<Store> GetStoresBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Stores] 
WHERE 
	[Stores].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Store>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Store objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection Store objects.</returns>
		public static EntityList<Store> GetStoresBycompany_(int @company_id) 
		{
			string commandText = "StoreGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Store>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Store object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created Store object.</returns>
		public static Store CreateStoreBycompany_(Company @company_)
		{
			Store store = InitializeNew<Store>();
			
			store.company_id = @company_.company_id;
			
			store.company_ = @company_;
			
			return store;
		}
		
		/// <summary>
		/// Deletes Store objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeleteStoresBycompany_(Company company) 
		{
			string commandText = "StoreDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Store objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeleteStoresBycompany_(int company_id) 
		{
			string commandText = "StoreDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Store objects by a UploadedAd object.
		/// </summary>
		/// <param name="default_uploadedad_">default_uploadedad_</param>
		/// <returns>A collection Store objects.</returns>
		public static EntityList<Store> GetStoresBydefault_uploadedad_(UploadedAd @default_uploadedad_) 
		{
			string commandText = "StoreGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@default_uploadedad_id", @default_uploadedad_.uploadedad_id));
			
			return GetList<Store>(@default_uploadedad_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Store objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Store objects.</returns>
		protected static EntityList<Store> GetStoresBydefault_uploadedad_(UploadedAd @default_uploadedad_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Stores] 
WHERE 
	[Stores].[default_uploadedad_id] = @default_uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@default_uploadedad_id", @default_uploadedad_.uploadedad_id));
			
			return GetList<Store>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Store objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Store objects.</returns>
		protected static EntityList<Store> GetStoresBydefault_uploadedad_(int @uploadedad_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Stores] 
WHERE 
	[Stores].[default_uploadedad_id] = @default_uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@default_uploadedad_id", @uploadedad_id));
			
			return GetList<Store>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Store objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Store objects.</returns>
		public static EntityList<Store> GetStoresBydefault_uploadedad_(UploadedAd @default_uploadedad_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Stores] 
WHERE 
	[Stores].[default_uploadedad_id] = @default_uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@default_uploadedad_id", @default_uploadedad_.uploadedad_id));
			
			return GetList<Store>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Store objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Store objects.</returns>
		public static EntityList<Store> GetStoresBydefault_uploadedad_(int @uploadedad_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Stores] 
WHERE 
	[Stores].[default_uploadedad_id] = @default_uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@default_uploadedad_id", @uploadedad_id));
			
			return GetList<Store>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Store objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <returns>A collection Store objects.</returns>
		public static EntityList<Store> GetStoresBydefault_uploadedad_(int @uploadedad_id) 
		{
			string commandText = "StoreGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@default_uploadedad_id", @uploadedad_id));
			
			return GetList<Store>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Store object from a UploadedAd object.
		/// </summary>
		/// <param name="default_uploadedad_">default_uploadedad_</param>
		/// <returns>The newly created Store object.</returns>
		public static Store CreateStoreBydefault_uploadedad_(UploadedAd @default_uploadedad_)
		{
			Store store = InitializeNew<Store>();
			
			store.default_uploadedad_id = @default_uploadedad_.uploadedad_id;
			
			store.default_uploadedad_ = @default_uploadedad_;
			
			return store;
		}
		
		/// <summary>
		/// Deletes Store objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
		public static void DeleteStoresBydefault_uploadedad_(UploadedAd uploadedAd) 
		{
			string commandText = "StoreDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@default_uploadedad_id", uploadedAd.uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Store objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		public static void DeleteStoresBydefault_uploadedad_(int uploadedad_id) 
		{
			string commandText = "StoreDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@default_uploadedad_id", uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class StoreProperties
		{
			public const string store_id = "store_id";
			public const string company_id = "company_id";
			public const string default_uploadedad_id = "default_uploadedad_id";
			public const string store_contact = "store_contact";
			public const string address = "address";
			public const string suburb = "suburb";
			public const string state = "state";
			public const string postcode = "postcode";
			public const string num_printers = "num_printers";
			public const string avg_volume = "avg_volume";
			public const string creation_datetime = "creation_datetime";
			public const string password = "password";
			public const string country = "country";
		}
		#endregion
	}
}
