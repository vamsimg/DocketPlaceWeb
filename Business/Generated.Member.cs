/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 8:49:48 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Member.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("customer_id: {customer_id}, company_id: {company_id}")]
	public partial class Member
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _customer_id = int.MinValue;
		/// <summary>
		/// customer_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, false, false)]
		public int customer_id
		{
			[DebuggerStepThrough()]
			get { return this._customer_id; }
			set 
			{
				if (this._customer_id != value) 
				{
					this._customer_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("customer_id");
					this._customer_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, false, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _store_id = int.MinValue;
		/// <summary>
		/// store_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int store_id
		{
			[DebuggerStepThrough()]
			get { return this._store_id; }
			set 
			{
				if (this._store_id != value) 
				{
					this._store_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("store_id");
					this._store_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _local_customer_id = int.MinValue;
		/// <summary>
		/// local_customer_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int local_customer_id
		{
			[DebuggerStepThrough()]
			get { return this._local_customer_id; }
			set 
			{
				if (this._local_customer_id != value) 
				{
					this._local_customer_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("local_customer_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _reward_points = int.MinValue;
		/// <summary>
		/// reward_points
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int reward_points
		{
			[DebuggerStepThrough()]
			get { return this._reward_points; }
			set 
			{
				if (this._reward_points != value) 
				{
					this._reward_points = value;
					this.IsDirty = true;	
					OnPropertyChanged("reward_points");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _local_barcode_id = String.Empty;
		/// <summary>
		/// local_barcode_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string local_barcode_id
		{
			[DebuggerStepThrough()]
			get { return this._local_barcode_id; }
			set 
			{
				if (this._local_barcode_id != value) 
				{
					this._local_barcode_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("local_barcode_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _grade = String.Empty;
		/// <summary>
		/// grade
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string grade
		{
			[DebuggerStepThrough()]
			get { return this._grade; }
			set 
			{
				if (this._grade != value) 
				{
					this._grade = value;
					this.IsDirty = true;	
					OnPropertyChanged("grade");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private decimal _total_revenue = decimal.MinValue;
		/// <summary>
		/// total_revenue
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public decimal total_revenue
		{
			[DebuggerStepThrough()]
			get { return this._total_revenue; }
			set 
			{
				if (this._total_revenue != value) 
				{
					this._total_revenue = value;
					this.IsDirty = true;	
					OnPropertyChanged("total_revenue");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _frequency = int.MinValue;
		/// <summary>
		/// frequency
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int frequency
		{
			[DebuggerStepThrough()]
			get { return this._frequency; }
			set 
			{
				if (this._frequency != value) 
				{
					this._frequency = value;
					this.IsDirty = true;	
					OnPropertyChanged("frequency");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _no_sms = false;
		/// <summary>
		/// no_sms
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool no_sms
		{
			[DebuggerStepThrough()]
			get { return this._no_sms; }
			set 
			{
				if (this._no_sms != value) 
				{
					this._no_sms = value;
					this.IsDirty = true;	
					OnPropertyChanged("no_sms");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _no_email = false;
		/// <summary>
		/// no_email
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool no_email
		{
			[DebuggerStepThrough()]
			get { return this._no_email; }
			set 
			{
				if (this._no_email != value) 
				{
					this._no_email = value;
					this.IsDirty = true;	
					OnPropertyChanged("no_email");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Customer _customer_ = null;
		/// <summary>
		/// The parent Customer object
		/// </summary>
		public Customer customer_
		{
			get 
			{
				if (_customer_ == null) 
				{
					_customer_ = GetParentEntity(Customer.GetCustomer(this.customer_id)) as Customer;
				}
				return _customer_;
			}
			set
			{
				if(_customer_ != value) 
				{
					_customer_ = value;
					
					if (value != null) 
					{
						this.customer_id = value.customer_id;
					}
					else 
					{
						this.customer_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Store _store_ = null;
		/// <summary>
		/// The parent Store object
		/// </summary>
		public Store store_
		{
			get 
			{
				if (_store_ == null) 
				{
					_store_ = GetParentEntity(Store.GetStore(this.store_id)) as Store;
				}
				return _store_;
			}
			set
			{
				if(_store_ != value) 
				{
					_store_ = value;
					
					if (value != null) 
					{
						this.store_id = value.store_id;
					}
					else 
					{
						this.store_id = int.MinValue;
					}
				}
			}
		}
		
		
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Member).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Member).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Member).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Member() { }
		#endregion
		
		#region Public Methods
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetMember(this.customer_id, this.company_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
			if (_customer_ != null)
			{	
				this.customer_id = this.customer_.customer_id;
			}
			
			if (_store_ != null)
			{	
				this.store_id = this.store_.store_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Members].[customer_id],
	[Members].[company_id],
	[Members].[store_id],
	[Members].[local_customer_id],
	[Members].[reward_points],
	[Members].[creation_datetime],
	[Members].[local_barcode_id],
	[Members].[grade],
	[Members].[total_revenue],
	[Members].[frequency],
	[Members].[no_sms],
	[Members].[no_email]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Members";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Member into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="local_customer_id">local_customer_id</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="local_barcode_id">local_barcode_id</param>
		/// <param name="grade">grade</param>
		/// <param name="total_revenue">total_revenue</param>
		/// <param name="frequency">frequency</param>
		/// <param name="no_sms">no_sms</param>
		/// <param name="no_email">no_email</param>
		public static void InsertMember(int @customer_id, int @company_id, int @store_id, int @local_customer_id, int @reward_points, DateTime @creation_datetime, string @local_barcode_id, string @grade, decimal @total_revenue, int @frequency, bool @no_sms, bool @no_email)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertMember(@customer_id, @company_id, @store_id, @local_customer_id, @reward_points, @creation_datetime, @local_barcode_id, @grade, @total_revenue, @frequency, @no_sms, @no_email, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Member into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="local_customer_id">local_customer_id</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="local_barcode_id">local_barcode_id</param>
		/// <param name="grade">grade</param>
		/// <param name="total_revenue">total_revenue</param>
		/// <param name="frequency">frequency</param>
		/// <param name="no_sms">no_sms</param>
		/// <param name="no_email">no_email</param>
		/// <param name="helper">helper</param>
		internal static void InsertMember(int @customer_id, int @company_id, int @store_id, int @local_customer_id, int @reward_points, DateTime @creation_datetime, string @local_barcode_id, string @grade, decimal @total_revenue, int @frequency, bool @no_sms, bool @no_email, SqlHelper @helper)
		{
			string commandText = "MemberInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@local_customer_id", EntityBase.GetDatabaseValue(@local_customer_id)));
			parameters.Add(new SqlParameter("@reward_points", EntityBase.GetDatabaseValue(@reward_points)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@local_barcode_id", EntityBase.GetDatabaseValue(@local_barcode_id)));
			parameters.Add(new SqlParameter("@grade", EntityBase.GetDatabaseValue(@grade)));
			parameters.Add(new SqlParameter("@total_revenue", EntityBase.GetDatabaseValue(@total_revenue)));
			parameters.Add(new SqlParameter("@frequency", EntityBase.GetDatabaseValue(@frequency)));
			parameters.Add(new SqlParameter("@no_sms", @no_sms));
			parameters.Add(new SqlParameter("@no_email", @no_email));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Member into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="local_customer_id">local_customer_id</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="local_barcode_id">local_barcode_id</param>
		/// <param name="grade">grade</param>
		/// <param name="total_revenue">total_revenue</param>
		/// <param name="frequency">frequency</param>
		/// <param name="no_sms">no_sms</param>
		/// <param name="no_email">no_email</param>
		public static void UpdateMember(int @customer_id, int @company_id, int @store_id, int @local_customer_id, int @reward_points, DateTime @creation_datetime, string @local_barcode_id, string @grade, decimal @total_revenue, int @frequency, bool @no_sms, bool @no_email)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateMember(@customer_id, @company_id, @store_id, @local_customer_id, @reward_points, @creation_datetime, @local_barcode_id, @grade, @total_revenue, @frequency, @no_sms, @no_email, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Member into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="local_customer_id">local_customer_id</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="local_barcode_id">local_barcode_id</param>
		/// <param name="grade">grade</param>
		/// <param name="total_revenue">total_revenue</param>
		/// <param name="frequency">frequency</param>
		/// <param name="no_sms">no_sms</param>
		/// <param name="no_email">no_email</param>
		/// <param name="helper">helper</param>
		internal static void UpdateMember(int @customer_id, int @company_id, int @store_id, int @local_customer_id, int @reward_points, DateTime @creation_datetime, string @local_barcode_id, string @grade, decimal @total_revenue, int @frequency, bool @no_sms, bool @no_email, SqlHelper @helper)
		{
			string commandText = "MemberUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@local_customer_id", EntityBase.GetDatabaseValue(@local_customer_id)));
			parameters.Add(new SqlParameter("@reward_points", EntityBase.GetDatabaseValue(@reward_points)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@local_barcode_id", EntityBase.GetDatabaseValue(@local_barcode_id)));
			parameters.Add(new SqlParameter("@grade", EntityBase.GetDatabaseValue(@grade)));
			parameters.Add(new SqlParameter("@total_revenue", EntityBase.GetDatabaseValue(@total_revenue)));
			parameters.Add(new SqlParameter("@frequency", EntityBase.GetDatabaseValue(@frequency)));
			parameters.Add(new SqlParameter("@no_sms", @no_sms));
			parameters.Add(new SqlParameter("@no_email", @no_email));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Member from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		public static void DeleteMember(int @customer_id, int @company_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteMember(@customer_id, @company_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Member from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteMember(int @customer_id, int @company_id, SqlHelper @helper)
		{
			string commandText = "MemberDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			parameters.Add(new SqlParameter("@company_id", @company_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Member object.
		/// </summary>
		/// <returns>The newly created Member object.</returns>
		public static Member CreateMember()
		{
			return InitializeNew<Member>();
		}
		
		/// <summary>
		/// Retrieve information for a Member by a Member's unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="company_id">company_id</param>
		/// <returns>Member</returns>
		public static Member GetMember(int customer_id, int company_id)
		{
			string commandText = "MemberGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer_id));
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			return GetOne<Member>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Member objects.
		/// </summary>
		/// <returns>The retrieved collection of Member objects.</returns>
		public static EntityList<Member> GetMembers()
		{
			string commandText = "MemberGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Member>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Member objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Member objects.</returns>
        protected static EntityList<Member> GetMembers(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Member>(SelectFieldList, "FROM [dbo].[Members]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Member objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Member objects.</returns>
        public static EntityList<Member> GetMembers(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Member>(SelectFieldList, "FROM [dbo].[Members]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Member objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Member objects.</returns>
		protected static EntityList<Member> GetMembers(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetMembers(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Member objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Member objects.</returns>
		protected static EntityList<Member> GetMembers(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetMembers(string.Empty, where, parameters, Member.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Member objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Member objects.</returns>
		protected static EntityList<Member> GetMembers(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetMembers(prefix, where, parameters, Member.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Member objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Member objects.</returns>
		protected static EntityList<Member> GetMembers(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetMembers(string.Empty, where, parameters, Member.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Member objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Member objects.</returns>
		protected static EntityList<Member> GetMembers(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetMembers(prefix, where, parameters, Member.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Member objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Member objects.</returns>
		protected static EntityList<Member> GetMembers(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Member.SelectFieldList + "FROM [dbo].[Members] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Member>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Member> GetMembers(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Member>(SelectFieldList, "FROM [dbo].[Members] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of Member objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBycompany_(Company @company_) 
		{
			string commandText = "MemberGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Member>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Member objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		protected static EntityList<Member> GetMembersBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Member objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		protected static EntityList<Member> GetMembersBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Member objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Member objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Member objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBycompany_(int @company_id) 
		{
			string commandText = "MemberGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Member>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Member object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created Member object.</returns>
		public static Member CreateMemberBycompany_(Company @company_)
		{
			Member member = InitializeNew<Member>();
			
			member.company_id = @company_.company_id;
			
			member.company_ = @company_;
			
			return member;
		}
		
		/// <summary>
		/// Deletes Member objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeleteMembersBycompany_(Company company) 
		{
			string commandText = "MemberDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Member objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeleteMembersBycompany_(int company_id) 
		{
			string commandText = "MemberDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Member objects by a Customer object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBycustomer_(Customer @customer_) 
		{
			string commandText = "MemberGetByCustomer";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<Member>(@customer_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Member objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		protected static EntityList<Member> GetMembersBycustomer_(Customer @customer_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Member objects by a Customer object.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		protected static EntityList<Member> GetMembersBycustomer_(int @customer_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Member objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBycustomer_(Customer @customer_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Member objects by a Customer object.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBycustomer_(int @customer_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Member objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBycustomer_(int @customer_id) 
		{
			string commandText = "MemberGetByCustomer";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<Member>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Member object from a Customer object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>The newly created Member object.</returns>
		public static Member CreateMemberBycustomer_(Customer @customer_)
		{
			Member member = InitializeNew<Member>();
			
			member.customer_id = @customer_.customer_id;
			
			member.customer_ = @customer_;
			
			return member;
		}
		
		/// <summary>
		/// Deletes Member objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
		public static void DeleteMembersBycustomer_(Customer customer) 
		{
			string commandText = "MemberDeleteByCustomer";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer.customer_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Member objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		public static void DeleteMembersBycustomer_(int customer_id) 
		{
			string commandText = "MemberDeleteByCustomer";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Member objects by a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBystore_(Store @store_) 
		{
			string commandText = "MemberGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Member>(@store_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Member objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		protected static EntityList<Member> GetMembersBystore_(Store @store_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Member objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		protected static EntityList<Member> GetMembersBystore_(int @store_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Member objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBystore_(Store @store_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Member objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBystore_(int @store_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Members] 
WHERE 
	[Members].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Member>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Member objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <returns>A collection Member objects.</returns>
		public static EntityList<Member> GetMembersBystore_(int @store_id) 
		{
			string commandText = "MemberGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Member>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Member object from a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>The newly created Member object.</returns>
		public static Member CreateMemberBystore_(Store @store_)
		{
			Member member = InitializeNew<Member>();
			
			member.store_id = @store_.store_id;
			
			member.store_ = @store_;
			
			return member;
		}
		
		/// <summary>
		/// Deletes Member objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
		public static void DeleteMembersBystore_(Store store) 
		{
			string commandText = "MemberDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store.store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Member objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		public static void DeleteMembersBystore_(int store_id) 
		{
			string commandText = "MemberDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class MemberProperties
		{
			public const string customer_id = "customer_id";
			public const string company_id = "company_id";
			public const string store_id = "store_id";
			public const string local_customer_id = "local_customer_id";
			public const string reward_points = "reward_points";
			public const string creation_datetime = "creation_datetime";
			public const string local_barcode_id = "local_barcode_id";
			public const string grade = "grade";
			public const string total_revenue = "total_revenue";
			public const string frequency = "frequency";
			public const string no_sms = "no_sms";
			public const string no_email = "no_email";
		}
		#endregion
	}
}
