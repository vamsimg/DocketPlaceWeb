/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 2/05/2012 3:56:00 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a DocketItem.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("docketitem_id: {docketitem_id}")]
	public partial class DocketItem
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _docketitem_id = int.MinValue;
		/// <summary>
		/// docketitem_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int docketitem_id
		{
			[DebuggerStepThrough()]
			get { return this._docketitem_id; }
			protected set 
			{
				if (this._docketitem_id != value) 
				{
					this._docketitem_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("docketitem_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _docket_id = int.MinValue;
		/// <summary>
		/// docket_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int docket_id
		{
			[DebuggerStepThrough()]
			get { return this._docket_id; }
			set 
			{
				if (this._docket_id != value) 
				{
					this._docket_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("docket_id");
					this._docket_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _product_code = String.Empty;
		/// <summary>
		/// product_code
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string product_code
		{
			[DebuggerStepThrough()]
			get { return this._product_code; }
			set 
			{
				if (this._product_code != value) 
				{
					this._product_code = value;
					this.IsDirty = true;	
					OnPropertyChanged("product_code");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _description = String.Empty;
		/// <summary>
		/// description
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string description
		{
			[DebuggerStepThrough()]
			get { return this._description; }
			set 
			{
				if (this._description != value) 
				{
					this._description = value;
					this.IsDirty = true;	
					OnPropertyChanged("description");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private decimal _unit_cost = decimal.MinValue;
		/// <summary>
		/// unit_cost
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public decimal unit_cost
		{
			[DebuggerStepThrough()]
			get { return this._unit_cost; }
			set 
			{
				if (this._unit_cost != value) 
				{
					this._unit_cost = value;
					this.IsDirty = true;	
					OnPropertyChanged("unit_cost");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private double _quantity;
		/// <summary>
		/// quantity
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public double quantity
		{
			[DebuggerStepThrough()]
			get { return this._quantity; }
			set 
			{
				if (this._quantity != value) 
				{
					this._quantity = value;
					this.IsDirty = true;	
					OnPropertyChanged("quantity");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _product_barcode = String.Empty;
		/// <summary>
		/// product_barcode
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string product_barcode
		{
			[DebuggerStepThrough()]
			get { return this._product_barcode; }
			set 
			{
				if (this._product_barcode != value) 
				{
					this._product_barcode = value;
					this.IsDirty = true;	
					OnPropertyChanged("product_barcode");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Docket _docket_ = null;
		/// <summary>
		/// The parent Docket object
		/// </summary>
		public Docket docket_
		{
			get 
			{
				if (_docket_ == null) 
				{
					_docket_ = GetParentEntity(Docket.GetDocket(this.docket_id)) as Docket;
				}
				return _docket_;
			}
			set
			{
				if(_docket_ != value) 
				{
					_docket_ = value;
					
					if (value != null) 
					{
						this.docket_id = value.docket_id;
					}
					else 
					{
						this.docket_id = int.MinValue;
					}
				}
			}
		}
		
		
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(DocketItem).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(DocketItem).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(DocketItem).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected DocketItem() { }
		#endregion
		
		#region Public Methods
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetDocketItem(this.docketitem_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_docket_ != null)
			{	
				this.docket_id = this.docket_.docket_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[DocketItems].[docketitem_id],
	[DocketItems].[docket_id],
	[DocketItems].[product_code],
	[DocketItems].[description],
	[DocketItems].[unit_cost],
	[DocketItems].[quantity],
	[DocketItems].[product_barcode]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "DocketItems";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a DocketItem into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="description">description</param>
		/// <param name="unit_cost">unit_cost</param>
		/// <param name="quantity">quantity</param>
		/// <param name="product_barcode">product_barcode</param>
		public static void InsertDocketItem(int @docket_id, string @product_code, string @description, decimal @unit_cost, double @quantity, string @product_barcode)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertDocketItem(@docket_id, @product_code, @description, @unit_cost, @quantity, @product_barcode, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a DocketItem into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="description">description</param>
		/// <param name="unit_cost">unit_cost</param>
		/// <param name="quantity">quantity</param>
		/// <param name="product_barcode">product_barcode</param>
		/// <param name="helper">helper</param>
		internal static void InsertDocketItem(int @docket_id, string @product_code, string @description, decimal @unit_cost, double @quantity, string @product_barcode, SqlHelper @helper)
		{
			string commandText = "DocketItemInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", EntityBase.GetDatabaseValue(@docket_id)));
			parameters.Add(new SqlParameter("@product_code", EntityBase.GetDatabaseValue(@product_code)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@unit_cost", EntityBase.GetDatabaseValue(@unit_cost)));
			parameters.Add(new SqlParameter("@quantity", @quantity));
			parameters.Add(new SqlParameter("@product_barcode", EntityBase.GetDatabaseValue(@product_barcode)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a DocketItem into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="docketitem_id">docketitem_id</param>
		/// <param name="docket_id">docket_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="description">description</param>
		/// <param name="unit_cost">unit_cost</param>
		/// <param name="quantity">quantity</param>
		/// <param name="product_barcode">product_barcode</param>
		public static void UpdateDocketItem(int @docketitem_id, int @docket_id, string @product_code, string @description, decimal @unit_cost, double @quantity, string @product_barcode)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateDocketItem(@docketitem_id, @docket_id, @product_code, @description, @unit_cost, @quantity, @product_barcode, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a DocketItem into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="docketitem_id">docketitem_id</param>
		/// <param name="docket_id">docket_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="description">description</param>
		/// <param name="unit_cost">unit_cost</param>
		/// <param name="quantity">quantity</param>
		/// <param name="product_barcode">product_barcode</param>
		/// <param name="helper">helper</param>
		internal static void UpdateDocketItem(int @docketitem_id, int @docket_id, string @product_code, string @description, decimal @unit_cost, double @quantity, string @product_barcode, SqlHelper @helper)
		{
			string commandText = "DocketItemUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docketitem_id", EntityBase.GetDatabaseValue(@docketitem_id)));
			parameters.Add(new SqlParameter("@docket_id", EntityBase.GetDatabaseValue(@docket_id)));
			parameters.Add(new SqlParameter("@product_code", EntityBase.GetDatabaseValue(@product_code)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@unit_cost", EntityBase.GetDatabaseValue(@unit_cost)));
			parameters.Add(new SqlParameter("@quantity", @quantity));
			parameters.Add(new SqlParameter("@product_barcode", EntityBase.GetDatabaseValue(@product_barcode)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a DocketItem from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="docketitem_id">docketitem_id</param>
		public static void DeleteDocketItem(int @docketitem_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteDocketItem(@docketitem_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a DocketItem from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="docketitem_id">docketitem_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteDocketItem(int @docketitem_id, SqlHelper @helper)
		{
			string commandText = "DocketItemDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docketitem_id", @docketitem_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new DocketItem object.
		/// </summary>
		/// <returns>The newly created DocketItem object.</returns>
		public static DocketItem CreateDocketItem()
		{
			return InitializeNew<DocketItem>();
		}
		
		/// <summary>
		/// Retrieve information for a DocketItem by a DocketItem's unique identifier.
		/// </summary>
		/// <param name="docketitem_id">docketitem_id</param>
		/// <returns>DocketItem</returns>
		public static DocketItem GetDocketItem(int docketitem_id)
		{
			string commandText = "DocketItemGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docketitem_id", docketitem_id));
			
			return GetOne<DocketItem>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection DocketItem objects.
		/// </summary>
		/// <returns>The retrieved collection of DocketItem objects.</returns>
		public static EntityList<DocketItem> GetDocketItems()
		{
			string commandText = "DocketItemGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<DocketItem>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection DocketItem objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of DocketItem objects.</returns>
        protected static EntityList<DocketItem> GetDocketItems(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<DocketItem>(SelectFieldList, "FROM [dbo].[DocketItems]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection DocketItem objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of DocketItem objects.</returns>
        public static EntityList<DocketItem> GetDocketItems(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<DocketItem>(SelectFieldList, "FROM [dbo].[DocketItems]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection DocketItem objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of DocketItem objects.</returns>
		protected static EntityList<DocketItem> GetDocketItems(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetDocketItems(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection DocketItem objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of DocketItem objects.</returns>
		protected static EntityList<DocketItem> GetDocketItems(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetDocketItems(string.Empty, where, parameters, DocketItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection DocketItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of DocketItem objects.</returns>
		protected static EntityList<DocketItem> GetDocketItems(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetDocketItems(prefix, where, parameters, DocketItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection DocketItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of DocketItem objects.</returns>
		protected static EntityList<DocketItem> GetDocketItems(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetDocketItems(string.Empty, where, parameters, DocketItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection DocketItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of DocketItem objects.</returns>
		protected static EntityList<DocketItem> GetDocketItems(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetDocketItems(prefix, where, parameters, DocketItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection DocketItem objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of DocketItem objects.</returns>
		protected static EntityList<DocketItem> GetDocketItems(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + DocketItem.SelectFieldList + "FROM [dbo].[DocketItems] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<DocketItem>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<DocketItem> GetDocketItems(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<DocketItem>(SelectFieldList, "FROM [dbo].[DocketItems] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of DocketItem objects by a Docket object.
		/// </summary>
		/// <param name="docket_">docket_</param>
		/// <returns>A collection DocketItem objects.</returns>
		public static EntityList<DocketItem> GetDocketItemsBydocket_(Docket @docket_) 
		{
			string commandText = "DocketItemGetByDocket";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_.docket_id));
			
			return GetList<DocketItem>(@docket_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of DocketItem objects by a Docket object.
		/// </summary>
		/// <param name="docket">docket</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection DocketItem objects.</returns>
		protected static EntityList<DocketItem> GetDocketItemsBydocket_(Docket @docket_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[DocketItems] 
WHERE 
	[DocketItems].[docket_id] = @docket_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@docket_id", @docket_.docket_id));
			
			return GetList<DocketItem>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of DocketItem objects by a Docket object.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection DocketItem objects.</returns>
		protected static EntityList<DocketItem> GetDocketItemsBydocket_(int @docket_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[DocketItems] 
WHERE 
	[DocketItems].[docket_id] = @docket_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_id));
			
			return GetList<DocketItem>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of DocketItem objects by a Docket object.
		/// </summary>
		/// <param name="docket">docket</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection DocketItem objects.</returns>
		public static EntityList<DocketItem> GetDocketItemsBydocket_(Docket @docket_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[DocketItems] 
WHERE 
	[DocketItems].[docket_id] = @docket_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@docket_id", @docket_.docket_id));
			
			return GetList<DocketItem>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of DocketItem objects by a Docket object.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection DocketItem objects.</returns>
		public static EntityList<DocketItem> GetDocketItemsBydocket_(int @docket_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[DocketItems] 
WHERE 
	[DocketItems].[docket_id] = @docket_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_id));
			
			return GetList<DocketItem>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of DocketItem objects by a Docket unique identifier.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		/// <returns>A collection DocketItem objects.</returns>
		public static EntityList<DocketItem> GetDocketItemsBydocket_(int @docket_id) 
		{
			string commandText = "DocketItemGetByDocket";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_id));
			
			return GetList<DocketItem>(commandText, parameters);
		}

		/// <summary>
		/// Create a new DocketItem object from a Docket object.
		/// </summary>
		/// <param name="docket_">docket_</param>
		/// <returns>The newly created DocketItem object.</returns>
		public static DocketItem CreateDocketItemBydocket_(Docket @docket_)
		{
			DocketItem docketItem = InitializeNew<DocketItem>();
			
			docketItem.docket_id = @docket_.docket_id;
			
			docketItem.docket_ = @docket_;
			
			return docketItem;
		}
		
		/// <summary>
		/// Deletes DocketItem objects by a Docket object.
		/// </summary>
		/// <param name="docket">docket</param>
		public static void DeleteDocketItemsBydocket_(Docket docket) 
		{
			string commandText = "DocketItemDeleteByDocket";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", docket.docket_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes DocketItem objects by a Docket unique identifier.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		public static void DeleteDocketItemsBydocket_(int docket_id) 
		{
			string commandText = "DocketItemDeleteByDocket";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", docket_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class DocketItemProperties
		{
			public const string docketitem_id = "docketitem_id";
			public const string docket_id = "docket_id";
			public const string product_code = "product_code";
			public const string description = "description";
			public const string unit_cost = "unit_cost";
			public const string quantity = "quantity";
			public const string product_barcode = "product_barcode";
		}
		#endregion
	}
}
