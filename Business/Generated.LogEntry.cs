/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 4:54:43 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a LogEntry.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("logentry_id: {logentry_id}")]
	public partial class LogEntry
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _logentry_id = int.MinValue;
		/// <summary>
		/// logentry_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int logentry_id
		{
			[DebuggerStepThrough()]
			get { return this._logentry_id; }
			protected set 
			{
				if (this._logentry_id != value) 
				{
					this._logentry_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("logentry_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _logcode_id = int.MinValue;
		/// <summary>
		/// logcode_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int logcode_id
		{
			[DebuggerStepThrough()]
			get { return this._logcode_id; }
			set 
			{
				if (this._logcode_id != value) 
				{
					this._logcode_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("logcode_id");
					this._logcode_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _campaign_id = int.MinValue;
		/// <summary>
		/// campaign_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int campaign_id
		{
			[DebuggerStepThrough()]
			get { return this._campaign_id; }
			set 
			{
				if (this._campaign_id != value) 
				{
					this._campaign_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("campaign_id");
					this._campaign_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _adgroup_id = int.MinValue;
		/// <summary>
		/// adgroup_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int adgroup_id
		{
			[DebuggerStepThrough()]
			get { return this._adgroup_id; }
			set 
			{
				if (this._adgroup_id != value) 
				{
					this._adgroup_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("adgroup_id");
					this._adgroup_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admatch_id = int.MinValue;
		/// <summary>
		/// admatch_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int admatch_id
		{
			[DebuggerStepThrough()]
			get { return this._admatch_id; }
			set 
			{
				if (this._admatch_id != value) 
				{
					this._admatch_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admatch_id");
					this._admatch_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _permission_id = int.MinValue;
		/// <summary>
		/// permission_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int permission_id
		{
			[DebuggerStepThrough()]
			get { return this._permission_id; }
			set 
			{
				if (this._permission_id != value) 
				{
					this._permission_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("permission_id");
					this._permission_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _uploadedad_id = int.MinValue;
		/// <summary>
		/// uploadedad_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int uploadedad_id
		{
			[DebuggerStepThrough()]
			get { return this._uploadedad_id; }
			set 
			{
				if (this._uploadedad_id != value) 
				{
					this._uploadedad_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("uploadedad_id");
					this._uploadedad_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _store_id = int.MinValue;
		/// <summary>
		/// store_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int store_id
		{
			[DebuggerStepThrough()]
			get { return this._store_id; }
			set 
			{
				if (this._store_id != value) 
				{
					this._store_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("store_id");
					this._store_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admin_id = int.MinValue;
		/// <summary>
		/// admin_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int admin_id
		{
			[DebuggerStepThrough()]
			get { return this._admin_id; }
			set 
			{
				if (this._admin_id != value) 
				{
					this._admin_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admin_id");
					this._admin_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _owner_id = int.MinValue;
		/// <summary>
		/// owner_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int owner_id
		{
			[DebuggerStepThrough()]
			get { return this._owner_id; }
			set 
			{
				if (this._owner_id != value) 
				{
					this._owner_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("owner_id");
					this._owner_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _description = String.Empty;
		/// <summary>
		/// description
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string description
		{
			[DebuggerStepThrough()]
			get { return this._description; }
			set 
			{
				if (this._description != value) 
				{
					this._description = value;
					this.IsDirty = true;	
					OnPropertyChanged("description");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _ip_address = String.Empty;
		/// <summary>
		/// ip_address
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string ip_address
		{
			[DebuggerStepThrough()]
			get { return this._ip_address; }
			set 
			{
				if (this._ip_address != value) 
				{
					this._ip_address = value;
					this.IsDirty = true;	
					OnPropertyChanged("ip_address");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _customer_id = int.MinValue;
		/// <summary>
		/// customer_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int customer_id
		{
			[DebuggerStepThrough()]
			get { return this._customer_id; }
			set 
			{
				if (this._customer_id != value) 
				{
					this._customer_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("customer_id");
					this._customer_ = null;
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private AdGroup _adgroup_ = null;
		/// <summary>
		/// The parent AdGroup object
		/// </summary>
		public AdGroup adgroup_
		{
			get 
			{
				if (_adgroup_ == null) 
				{
					_adgroup_ = GetParentEntity(AdGroup.GetAdGroup(this.adgroup_id)) as AdGroup;
				}
				return _adgroup_;
			}
			set
			{
				if(_adgroup_ != value) 
				{
					_adgroup_ = value;
					
					if (value != null) 
					{
						this.adgroup_id = value.adgroup_id;
					}
					else 
					{
						this.adgroup_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private AdMatch _admatch_ = null;
		/// <summary>
		/// The parent AdMatch object
		/// </summary>
		public AdMatch admatch_
		{
			get 
			{
				if (_admatch_ == null) 
				{
					_admatch_ = GetParentEntity(AdMatch.GetAdMatch(this.admatch_id)) as AdMatch;
				}
				return _admatch_;
			}
			set
			{
				if(_admatch_ != value) 
				{
					_admatch_ = value;
					
					if (value != null) 
					{
						this.admatch_id = value.admatch_id;
					}
					else 
					{
						this.admatch_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _admin_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin admin_
		{
			get 
			{
				if (_admin_ == null) 
				{
					_admin_ = GetParentEntity(Admin.GetAdmin(this.admin_id)) as Admin;
				}
				return _admin_;
			}
			set
			{
				if(_admin_ != value) 
				{
					_admin_ = value;
					
					if (value != null) 
					{
						this.admin_id = value.admin_id;
					}
					else 
					{
						this.admin_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Campaign _campaign_ = null;
		/// <summary>
		/// The parent Campaign object
		/// </summary>
		public Campaign campaign_
		{
			get 
			{
				if (_campaign_ == null) 
				{
					_campaign_ = GetParentEntity(Campaign.GetCampaign(this.campaign_id)) as Campaign;
				}
				return _campaign_;
			}
			set
			{
				if(_campaign_ != value) 
				{
					_campaign_ = value;
					
					if (value != null) 
					{
						this.campaign_id = value.campaign_id;
					}
					else 
					{
						this.campaign_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Customer _customer_ = null;
		/// <summary>
		/// The parent Customer object
		/// </summary>
		public Customer customer_
		{
			get 
			{
				if (_customer_ == null) 
				{
					_customer_ = GetParentEntity(Customer.GetCustomer(this.customer_id)) as Customer;
				}
				return _customer_;
			}
			set
			{
				if(_customer_ != value) 
				{
					_customer_ = value;
					
					if (value != null) 
					{
						this.customer_id = value.customer_id;
					}
					else 
					{
						this.customer_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private LogCode _logcode_ = null;
		/// <summary>
		/// The parent LogCode object
		/// </summary>
		public LogCode logcode_
		{
			get 
			{
				if (_logcode_ == null) 
				{
					_logcode_ = GetParentEntity(LogCode.GetLogCode(this.logcode_id)) as LogCode;
				}
				return _logcode_;
			}
			set
			{
				if(_logcode_ != value) 
				{
					_logcode_ = value;
					
					if (value != null) 
					{
						this.logcode_id = value.logcode_id;
					}
					else 
					{
						this.logcode_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _owner_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin owner_
		{
			get 
			{
				if (_owner_ == null) 
				{
					_owner_ = GetParentEntity(Admin.GetAdmin(this.owner_id)) as Admin;
				}
				return _owner_;
			}
			set
			{
				if(_owner_ != value) 
				{
					_owner_ = value;
					
					if (value != null) 
					{
						this.owner_id = value.admin_id;
					}
					else 
					{
						this.owner_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Permission _permission_ = null;
		/// <summary>
		/// The parent Permission object
		/// </summary>
		public Permission permission_
		{
			get 
			{
				if (_permission_ == null) 
				{
					_permission_ = GetParentEntity(Permission.GetPermission(this.permission_id)) as Permission;
				}
				return _permission_;
			}
			set
			{
				if(_permission_ != value) 
				{
					_permission_ = value;
					
					if (value != null) 
					{
						this.permission_id = value.permission_id;
					}
					else 
					{
						this.permission_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Store _store_ = null;
		/// <summary>
		/// The parent Store object
		/// </summary>
		public Store store_
		{
			get 
			{
				if (_store_ == null) 
				{
					_store_ = GetParentEntity(Store.GetStore(this.store_id)) as Store;
				}
				return _store_;
			}
			set
			{
				if(_store_ != value) 
				{
					_store_ = value;
					
					if (value != null) 
					{
						this.store_id = value.store_id;
					}
					else 
					{
						this.store_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private UploadedAd _uploadedad_ = null;
		/// <summary>
		/// The parent UploadedAd object
		/// </summary>
		public UploadedAd uploadedad_
		{
			get 
			{
				if (_uploadedad_ == null) 
				{
					_uploadedad_ = GetParentEntity(UploadedAd.GetUploadedAd(this.uploadedad_id)) as UploadedAd;
				}
				return _uploadedad_;
			}
			set
			{
				if(_uploadedad_ != value) 
				{
					_uploadedad_ = value;
					
					if (value != null) 
					{
						this.uploadedad_id = value.uploadedad_id;
					}
					else 
					{
						this.uploadedad_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Fault> _faultsBylogentry_ = null;
		/// <summary>
		/// A collection of Fault children objects
		/// </summary>
		public EntityList<Fault> FaultsBylogentry_
		{
			get 
			{
				if (_faultsBylogentry_ == null) {
					_faultsBylogentry_ = DocketPlace.Business.Fault.GetFaultsBylogentry_(this);
				}
				return _faultsBylogentry_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(LogEntry).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(LogEntry).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(LogEntry).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected LogEntry() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a Fault for this LogEntry object
		/// </summary>
		public Fault CreateFault()
		{
			return DocketPlace.Business.Fault.CreateFaultBylogentry_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetLogEntry(this.logentry_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_adgroup_ != null)
			{	
				this.adgroup_id = this.adgroup_.adgroup_id;
			}
			
			if (_admatch_ != null)
			{	
				this.admatch_id = this.admatch_.admatch_id;
			}
			
			if (_admin_ != null)
			{	
				this.admin_id = this.admin_.admin_id;
			}
			
			if (_campaign_ != null)
			{	
				this.campaign_id = this.campaign_.campaign_id;
			}
			
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
			if (_customer_ != null)
			{	
				this.customer_id = this.customer_.customer_id;
			}
			
			if (_logcode_ != null)
			{	
				this.logcode_id = this.logcode_.logcode_id;
			}
			
			if (_owner_ != null)
			{	
				this.owner_id = this.owner_.admin_id;
			}
			
			if (_permission_ != null)
			{	
				this.permission_id = this.permission_.permission_id;
			}
			
			if (_store_ != null)
			{	
				this.store_id = this.store_.store_id;
			}
			
			if (_uploadedad_ != null)
			{	
				this.uploadedad_id = this.uploadedad_.uploadedad_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[LogEntries].[logentry_id],
	[LogEntries].[logcode_id],
	[LogEntries].[campaign_id],
	[LogEntries].[adgroup_id],
	[LogEntries].[admatch_id],
	[LogEntries].[permission_id],
	[LogEntries].[uploadedad_id],
	[LogEntries].[company_id],
	[LogEntries].[store_id],
	[LogEntries].[admin_id],
	[LogEntries].[owner_id],
	[LogEntries].[description],
	[LogEntries].[ip_address],
	[LogEntries].[creation_datetime],
	[LogEntries].[customer_id]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "LogEntries";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a LogEntry into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="permission_id">permission_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="owner_id">owner_id</param>
		/// <param name="description">description</param>
		/// <param name="ip_address">ip_address</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="customer_id">customer_id</param>
		public static void InsertLogEntry(int @logcode_id, int @campaign_id, int @adgroup_id, int @admatch_id, int @permission_id, int @uploadedad_id, int @company_id, int @store_id, int @admin_id, int @owner_id, string @description, string @ip_address, DateTime @creation_datetime, int @customer_id)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertLogEntry(@logcode_id, @campaign_id, @adgroup_id, @admatch_id, @permission_id, @uploadedad_id, @company_id, @store_id, @admin_id, @owner_id, @description, @ip_address, @creation_datetime, @customer_id, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a LogEntry into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="permission_id">permission_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="owner_id">owner_id</param>
		/// <param name="description">description</param>
		/// <param name="ip_address">ip_address</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="helper">helper</param>
		internal static void InsertLogEntry(int @logcode_id, int @campaign_id, int @adgroup_id, int @admatch_id, int @permission_id, int @uploadedad_id, int @company_id, int @store_id, int @admin_id, int @owner_id, string @description, string @ip_address, DateTime @creation_datetime, int @customer_id, SqlHelper @helper)
		{
			string commandText = "LogEntryInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", EntityBase.GetDatabaseValue(@logcode_id)));
			parameters.Add(new SqlParameter("@campaign_id", EntityBase.GetDatabaseValue(@campaign_id)));
			parameters.Add(new SqlParameter("@adgroup_id", EntityBase.GetDatabaseValue(@adgroup_id)));
			parameters.Add(new SqlParameter("@admatch_id", EntityBase.GetDatabaseValue(@admatch_id)));
			parameters.Add(new SqlParameter("@permission_id", EntityBase.GetDatabaseValue(@permission_id)));
			parameters.Add(new SqlParameter("@uploadedad_id", EntityBase.GetDatabaseValue(@uploadedad_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@owner_id", EntityBase.GetDatabaseValue(@owner_id)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@ip_address", EntityBase.GetDatabaseValue(@ip_address)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a LogEntry into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="logentry_id">logentry_id</param>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="permission_id">permission_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="owner_id">owner_id</param>
		/// <param name="description">description</param>
		/// <param name="ip_address">ip_address</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="customer_id">customer_id</param>
		public static void UpdateLogEntry(int @logentry_id, int @logcode_id, int @campaign_id, int @adgroup_id, int @admatch_id, int @permission_id, int @uploadedad_id, int @company_id, int @store_id, int @admin_id, int @owner_id, string @description, string @ip_address, DateTime @creation_datetime, int @customer_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateLogEntry(@logentry_id, @logcode_id, @campaign_id, @adgroup_id, @admatch_id, @permission_id, @uploadedad_id, @company_id, @store_id, @admin_id, @owner_id, @description, @ip_address, @creation_datetime, @customer_id, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a LogEntry into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="logentry_id">logentry_id</param>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="permission_id">permission_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="owner_id">owner_id</param>
		/// <param name="description">description</param>
		/// <param name="ip_address">ip_address</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="helper">helper</param>
		internal static void UpdateLogEntry(int @logentry_id, int @logcode_id, int @campaign_id, int @adgroup_id, int @admatch_id, int @permission_id, int @uploadedad_id, int @company_id, int @store_id, int @admin_id, int @owner_id, string @description, string @ip_address, DateTime @creation_datetime, int @customer_id, SqlHelper @helper)
		{
			string commandText = "LogEntryUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logentry_id", EntityBase.GetDatabaseValue(@logentry_id)));
			parameters.Add(new SqlParameter("@logcode_id", EntityBase.GetDatabaseValue(@logcode_id)));
			parameters.Add(new SqlParameter("@campaign_id", EntityBase.GetDatabaseValue(@campaign_id)));
			parameters.Add(new SqlParameter("@adgroup_id", EntityBase.GetDatabaseValue(@adgroup_id)));
			parameters.Add(new SqlParameter("@admatch_id", EntityBase.GetDatabaseValue(@admatch_id)));
			parameters.Add(new SqlParameter("@permission_id", EntityBase.GetDatabaseValue(@permission_id)));
			parameters.Add(new SqlParameter("@uploadedad_id", EntityBase.GetDatabaseValue(@uploadedad_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@owner_id", EntityBase.GetDatabaseValue(@owner_id)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@ip_address", EntityBase.GetDatabaseValue(@ip_address)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a LogEntry from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="logentry_id">logentry_id</param>
		public static void DeleteLogEntry(int @logentry_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteLogEntry(@logentry_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a LogEntry from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="logentry_id">logentry_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteLogEntry(int @logentry_id, SqlHelper @helper)
		{
			string commandText = "LogEntryDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logentry_id", @logentry_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new LogEntry object.
		/// </summary>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntry()
		{
			return InitializeNew<LogEntry>();
		}
		
		/// <summary>
		/// Retrieve information for a LogEntry by a LogEntry's unique identifier.
		/// </summary>
		/// <param name="logentry_id">logentry_id</param>
		/// <returns>LogEntry</returns>
		public static LogEntry GetLogEntry(int logentry_id)
		{
			string commandText = "LogEntryGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logentry_id", logentry_id));
			
			return GetOne<LogEntry>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection LogEntry objects.
		/// </summary>
		/// <returns>The retrieved collection of LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntries()
		{
			string commandText = "LogEntryGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<LogEntry>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection LogEntry objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of LogEntry objects.</returns>
        protected static EntityList<LogEntry> GetLogEntries(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<LogEntry>(SelectFieldList, "FROM [dbo].[LogEntries]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection LogEntry objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of LogEntry objects.</returns>
        public static EntityList<LogEntry> GetLogEntries(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<LogEntry>(SelectFieldList, "FROM [dbo].[LogEntries]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection LogEntry objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntries(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetLogEntries(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection LogEntry objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntries(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetLogEntries(string.Empty, where, parameters, LogEntry.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection LogEntry objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntries(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetLogEntries(prefix, where, parameters, LogEntry.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection LogEntry objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntries(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetLogEntries(string.Empty, where, parameters, LogEntry.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection LogEntry objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntries(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetLogEntries(prefix, where, parameters, LogEntry.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection LogEntry objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntries(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + LogEntry.SelectFieldList + "FROM [dbo].[LogEntries] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<LogEntry>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<LogEntry> GetLogEntries(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<LogEntry>(SelectFieldList, "FROM [dbo].[LogEntries] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a AdGroup object.
		/// </summary>
		/// <param name="adgroup_">adgroup_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadgroup_(AdGroup @adgroup_) 
		{
			string commandText = "LogEntryGetByAdGroup";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_.adgroup_id));
			
			return GetList<LogEntry>(@adgroup_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a AdGroup object.
		/// </summary>
		/// <param name="adGroup">adGroup</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByadgroup_(AdGroup @adgroup_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[adgroup_id] = @adgroup_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_.adgroup_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a AdGroup object.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByadgroup_(int @adgroup_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[adgroup_id] = @adgroup_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a AdGroup object.
		/// </summary>
		/// <param name="adGroup">adGroup</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadgroup_(AdGroup @adgroup_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[adgroup_id] = @adgroup_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_.adgroup_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a AdGroup object.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadgroup_(int @adgroup_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[adgroup_id] = @adgroup_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a AdGroup unique identifier.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadgroup_(int @adgroup_id) 
		{
			string commandText = "LogEntryGetByAdGroup";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", @adgroup_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a AdGroup object.
		/// </summary>
		/// <param name="adgroup_">adgroup_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryByadgroup_(AdGroup @adgroup_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.adgroup_id = @adgroup_.adgroup_id;
			
			logEntry.adgroup_ = @adgroup_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a AdGroup object.
		/// </summary>
		/// <param name="adGroup">adGroup</param>
		public static void DeleteLogEntriesByadgroup_(AdGroup adGroup) 
		{
			string commandText = "LogEntryDeleteByAdGroup";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", adGroup.adgroup_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a AdGroup unique identifier.
		/// </summary>
		/// <param name="adgroup_id">adgroup_id</param>
		public static void DeleteLogEntriesByadgroup_(int adgroup_id) 
		{
			string commandText = "LogEntryDeleteByAdGroup";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@adgroup_id", adgroup_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_">admatch_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadmatch_(AdMatch @admatch_) 
		{
			string commandText = "LogEntryGetByAdMatch";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<LogEntry>(@admatch_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByadmatch_(AdMatch @admatch_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByadmatch_(int @admatch_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadmatch_(AdMatch @admatch_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadmatch_(int @admatch_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a AdMatch unique identifier.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadmatch_(int @admatch_id) 
		{
			string commandText = "LogEntryGetByAdMatch";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a AdMatch object.
		/// </summary>
		/// <param name="admatch_">admatch_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryByadmatch_(AdMatch @admatch_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.admatch_id = @admatch_.admatch_id;
			
			logEntry.admatch_ = @admatch_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
		public static void DeleteLogEntriesByadmatch_(AdMatch adMatch) 
		{
			string commandText = "LogEntryDeleteByAdMatch";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", adMatch.admatch_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a AdMatch unique identifier.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		public static void DeleteLogEntriesByadmatch_(int admatch_id) 
		{
			string commandText = "LogEntryDeleteByAdMatch";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", admatch_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadmin_(Admin @admin_) 
		{
			string commandText = "LogEntryGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<LogEntry>(@admin_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByadmin_(Admin @admin_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByadmin_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadmin_(Admin @admin_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadmin_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByadmin_(int @admin_id) 
		{
			string commandText = "LogEntryGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryByadmin_(Admin @admin_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.admin_id = @admin_.admin_id;
			
			logEntry.admin_ = @admin_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeleteLogEntriesByadmin_(Admin admin) 
		{
			string commandText = "LogEntryDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeleteLogEntriesByadmin_(int admin_id) 
		{
			string commandText = "LogEntryDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a Campaign object.
		/// </summary>
		/// <param name="campaign_">campaign_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycampaign_(Campaign @campaign_) 
		{
			string commandText = "LogEntryGetByCampaign";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_.campaign_id));
			
			return GetList<LogEntry>(@campaign_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a Campaign object.
		/// </summary>
		/// <param name="campaign">campaign</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBycampaign_(Campaign @campaign_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[campaign_id] = @campaign_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@campaign_id", @campaign_.campaign_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Campaign object.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBycampaign_(int @campaign_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[campaign_id] = @campaign_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a Campaign object.
		/// </summary>
		/// <param name="campaign">campaign</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycampaign_(Campaign @campaign_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[campaign_id] = @campaign_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@campaign_id", @campaign_.campaign_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Campaign object.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycampaign_(int @campaign_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[campaign_id] = @campaign_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a Campaign unique identifier.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycampaign_(int @campaign_id) 
		{
			string commandText = "LogEntryGetByCampaign";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a Campaign object.
		/// </summary>
		/// <param name="campaign_">campaign_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryBycampaign_(Campaign @campaign_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.campaign_id = @campaign_.campaign_id;
			
			logEntry.campaign_ = @campaign_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Campaign object.
		/// </summary>
		/// <param name="campaign">campaign</param>
		public static void DeleteLogEntriesBycampaign_(Campaign campaign) 
		{
			string commandText = "LogEntryDeleteByCampaign";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", campaign.campaign_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Campaign unique identifier.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		public static void DeleteLogEntriesBycampaign_(int campaign_id) 
		{
			string commandText = "LogEntryDeleteByCampaign";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", campaign_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycompany_(Company @company_) 
		{
			string commandText = "LogEntryGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<LogEntry>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycompany_(int @company_id) 
		{
			string commandText = "LogEntryGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryBycompany_(Company @company_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.company_id = @company_.company_id;
			
			logEntry.company_ = @company_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeleteLogEntriesBycompany_(Company company) 
		{
			string commandText = "LogEntryDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeleteLogEntriesBycompany_(int company_id) 
		{
			string commandText = "LogEntryDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a Customer object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycustomer_(Customer @customer_) 
		{
			string commandText = "LogEntryGetByCustomer";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<LogEntry>(@customer_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBycustomer_(Customer @customer_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Customer object.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBycustomer_(int @customer_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycustomer_(Customer @customer_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Customer object.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycustomer_(int @customer_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBycustomer_(int @customer_id) 
		{
			string commandText = "LogEntryGetByCustomer";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a Customer object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryBycustomer_(Customer @customer_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.customer_id = @customer_.customer_id;
			
			logEntry.customer_ = @customer_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
		public static void DeleteLogEntriesBycustomer_(Customer customer) 
		{
			string commandText = "LogEntryDeleteByCustomer";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer.customer_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		public static void DeleteLogEntriesBycustomer_(int customer_id) 
		{
			string commandText = "LogEntryDeleteByCustomer";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a LogCode object.
		/// </summary>
		/// <param name="logcode_">logcode_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBylogcode_(LogCode @logcode_) 
		{
			string commandText = "LogEntryGetByLogCode";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", @logcode_.logcode_id));
			
			return GetList<LogEntry>(@logcode_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a LogCode object.
		/// </summary>
		/// <param name="logCode">logCode</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBylogcode_(LogCode @logcode_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[logcode_id] = @logcode_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@logcode_id", @logcode_.logcode_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a LogCode object.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBylogcode_(int @logcode_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[logcode_id] = @logcode_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", @logcode_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a LogCode object.
		/// </summary>
		/// <param name="logCode">logCode</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBylogcode_(LogCode @logcode_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[logcode_id] = @logcode_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@logcode_id", @logcode_.logcode_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a LogCode object.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBylogcode_(int @logcode_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[logcode_id] = @logcode_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", @logcode_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a LogCode unique identifier.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBylogcode_(int @logcode_id) 
		{
			string commandText = "LogEntryGetByLogCode";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", @logcode_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a LogCode object.
		/// </summary>
		/// <param name="logcode_">logcode_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryBylogcode_(LogCode @logcode_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.logcode_id = @logcode_.logcode_id;
			
			logEntry.logcode_ = @logcode_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a LogCode object.
		/// </summary>
		/// <param name="logCode">logCode</param>
		public static void DeleteLogEntriesBylogcode_(LogCode logCode) 
		{
			string commandText = "LogEntryDeleteByLogCode";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", logCode.logcode_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a LogCode unique identifier.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		public static void DeleteLogEntriesBylogcode_(int logcode_id) 
		{
			string commandText = "LogEntryDeleteByLogCode";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", logcode_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="owner_">owner_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByowner_(Admin @owner_) 
		{
			string commandText = "LogEntryGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@owner_id", @owner_.admin_id));
			
			return GetList<LogEntry>(@owner_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByowner_(Admin @owner_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[owner_id] = @owner_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@owner_id", @owner_.admin_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByowner_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[owner_id] = @owner_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@owner_id", @admin_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByowner_(Admin @owner_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[owner_id] = @owner_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@owner_id", @owner_.admin_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByowner_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[owner_id] = @owner_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@owner_id", @admin_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByowner_(int @admin_id) 
		{
			string commandText = "LogEntryGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@owner_id", @admin_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a Admin object.
		/// </summary>
		/// <param name="owner_">owner_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryByowner_(Admin @owner_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.owner_id = @owner_.admin_id;
			
			logEntry.owner_ = @owner_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeleteLogEntriesByowner_(Admin admin) 
		{
			string commandText = "LogEntryDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@owner_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeleteLogEntriesByowner_(int admin_id) 
		{
			string commandText = "LogEntryDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@owner_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a Permission object.
		/// </summary>
		/// <param name="permission_">permission_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBypermission_(Permission @permission_) 
		{
			string commandText = "LogEntryGetByPermission";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", @permission_.permission_id));
			
			return GetList<LogEntry>(@permission_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a Permission object.
		/// </summary>
		/// <param name="permission">permission</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBypermission_(Permission @permission_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[permission_id] = @permission_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@permission_id", @permission_.permission_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Permission object.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBypermission_(int @permission_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[permission_id] = @permission_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", @permission_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a Permission object.
		/// </summary>
		/// <param name="permission">permission</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBypermission_(Permission @permission_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[permission_id] = @permission_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@permission_id", @permission_.permission_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Permission object.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBypermission_(int @permission_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[permission_id] = @permission_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", @permission_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a Permission unique identifier.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBypermission_(int @permission_id) 
		{
			string commandText = "LogEntryGetByPermission";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", @permission_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a Permission object.
		/// </summary>
		/// <param name="permission_">permission_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryBypermission_(Permission @permission_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.permission_id = @permission_.permission_id;
			
			logEntry.permission_ = @permission_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Permission object.
		/// </summary>
		/// <param name="permission">permission</param>
		public static void DeleteLogEntriesBypermission_(Permission permission) 
		{
			string commandText = "LogEntryDeleteByPermission";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", permission.permission_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Permission unique identifier.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
		public static void DeleteLogEntriesBypermission_(int permission_id) 
		{
			string commandText = "LogEntryDeleteByPermission";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", permission_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBystore_(Store @store_) 
		{
			string commandText = "LogEntryGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<LogEntry>(@store_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBystore_(Store @store_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesBystore_(int @store_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBystore_(Store @store_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBystore_(int @store_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesBystore_(int @store_id) 
		{
			string commandText = "LogEntryGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryBystore_(Store @store_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.store_id = @store_.store_id;
			
			logEntry.store_ = @store_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
		public static void DeleteLogEntriesBystore_(Store store) 
		{
			string commandText = "LogEntryDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store.store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		public static void DeleteLogEntriesBystore_(int store_id) 
		{
			string commandText = "LogEntryDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of LogEntry objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_">uploadedad_</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByuploadedad_(UploadedAd @uploadedad_) 
		{
			string commandText = "LogEntryGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<LogEntry>(@uploadedad_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of LogEntry objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByuploadedad_(UploadedAd @uploadedad_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		protected static EntityList<LogEntry> GetLogEntriesByuploadedad_(int @uploadedad_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of LogEntry objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByuploadedad_(UploadedAd @uploadedad_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of LogEntry objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByuploadedad_(int @uploadedad_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[LogEntries] 
WHERE 
	[LogEntries].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<LogEntry>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of LogEntry objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <returns>A collection LogEntry objects.</returns>
		public static EntityList<LogEntry> GetLogEntriesByuploadedad_(int @uploadedad_id) 
		{
			string commandText = "LogEntryGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<LogEntry>(commandText, parameters);
		}

		/// <summary>
		/// Create a new LogEntry object from a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_">uploadedad_</param>
		/// <returns>The newly created LogEntry object.</returns>
		public static LogEntry CreateLogEntryByuploadedad_(UploadedAd @uploadedad_)
		{
			LogEntry logEntry = InitializeNew<LogEntry>();
			
			logEntry.uploadedad_id = @uploadedad_.uploadedad_id;
			
			logEntry.uploadedad_ = @uploadedad_;
			
			return logEntry;
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
		public static void DeleteLogEntriesByuploadedad_(UploadedAd uploadedAd) 
		{
			string commandText = "LogEntryDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedAd.uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes LogEntry objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		public static void DeleteLogEntriesByuploadedad_(int uploadedad_id) 
		{
			string commandText = "LogEntryDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class LogEntryProperties
		{
			public const string logentry_id = "logentry_id";
			public const string logcode_id = "logcode_id";
			public const string campaign_id = "campaign_id";
			public const string adgroup_id = "adgroup_id";
			public const string admatch_id = "admatch_id";
			public const string permission_id = "permission_id";
			public const string uploadedad_id = "uploadedad_id";
			public const string company_id = "company_id";
			public const string store_id = "store_id";
			public const string admin_id = "admin_id";
			public const string owner_id = "owner_id";
			public const string description = "description";
			public const string ip_address = "ip_address";
			public const string creation_datetime = "creation_datetime";
			public const string customer_id = "customer_id";
		}
		#endregion
	}
}
