/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 21/07/2012 9:32:11 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Permission.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("permission_id: {permission_id}")]
	public partial class Permission
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _permission_id = int.MinValue;
		/// <summary>
		/// permission_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int permission_id
		{
			[DebuggerStepThrough()]
			get { return this._permission_id; }
			protected set 
			{
				if (this._permission_id != value) 
				{
					this._permission_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("permission_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _role_nameId = String.Empty;
		/// <summary>
		/// role_nameId
		/// </summary>
		[DatabaseColumn("role_name")]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string role_nameId
		{
			[DebuggerStepThrough()]
			get { return this._role_nameId; }
			set 
			{
				if (this._role_nameId != value) 
				{
					this._role_nameId = value;
					this.IsDirty = true;	
					OnPropertyChanged("role_nameId");
					this._role_name = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admin_id = int.MinValue;
		/// <summary>
		/// admin_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int admin_id
		{
			[DebuggerStepThrough()]
			get { return this._admin_id; }
			set 
			{
				if (this._admin_id != value) 
				{
					this._admin_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admin_id");
					this._admin_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _authoriser_id = int.MinValue;
		/// <summary>
		/// authoriser_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int authoriser_id
		{
			[DebuggerStepThrough()]
			get { return this._authoriser_id; }
			set 
			{
				if (this._authoriser_id != value) 
				{
					this._authoriser_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("authoriser_id");
					this._authoriser_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _company_position = String.Empty;
		/// <summary>
		/// company_position
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string company_position
		{
			[DebuggerStepThrough()]
			get { return this._company_position; }
			set 
			{
				if (this._company_position != value) 
				{
					this._company_position = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_position");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _admin_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin admin_
		{
			get 
			{
				if (_admin_ == null) 
				{
					_admin_ = GetParentEntity(Admin.GetAdmin(this.admin_id)) as Admin;
				}
				return _admin_;
			}
			set
			{
				if(_admin_ != value) 
				{
					_admin_ = value;
					
					if (value != null) 
					{
						this.admin_id = value.admin_id;
					}
					else 
					{
						this.admin_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _authoriser_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin authoriser_
		{
			get 
			{
				if (_authoriser_ == null) 
				{
					_authoriser_ = GetParentEntity(Admin.GetAdmin(this.authoriser_id)) as Admin;
				}
				return _authoriser_;
			}
			set
			{
				if(_authoriser_ != value) 
				{
					_authoriser_ = value;
					
					if (value != null) 
					{
						this.authoriser_id = value.admin_id;
					}
					else 
					{
						this.authoriser_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Role _role_name = null;
		/// <summary>
		/// The parent Role object
		/// </summary>
		public Role role_name
		{
			get 
			{
				if (_role_name == null) 
				{
					_role_name = GetParentEntity(Role.GetRole(this.role_nameId)) as Role;
				}
				return _role_name;
			}
			set
			{
				if(_role_name != value) 
				{
					_role_name = value;
					
					if (value != null) 
					{
						this.role_nameId = value.role_name;
					}
					else 
					{
						this.role_nameId = String.Empty;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesBypermission_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesBypermission_
		{
			get 
			{
				if (_logEntriesBypermission_ == null) {
					_logEntriesBypermission_ = DocketPlace.Business.LogEntry.GetLogEntriesBypermission_(this);
				}
				return _logEntriesBypermission_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Permission).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Permission).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Permission).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Permission() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a LogEntry for this Permission object
		/// </summary>
		public LogEntry CreateLogEntry()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryBypermission_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetPermission(this.permission_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_admin_ != null)
			{	
				this.admin_id = this.admin_.admin_id;
			}
			
			if (_authoriser_ != null)
			{	
				this.authoriser_id = this.authoriser_.admin_id;
			}
			
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
			if (_role_name != null)
			{	
				this.role_nameId = this.role_name.role_name;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Permissions].[permission_id],
	[Permissions].[role_name],
	[Permissions].[admin_id],
	[Permissions].[company_id],
	[Permissions].[authoriser_id],
	[Permissions].[company_position],
	[Permissions].[creation_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Permissions";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Permission into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="role_nameId">role_nameId</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="authoriser_id">authoriser_id</param>
		/// <param name="company_position">company_position</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void InsertPermission(string @role_nameId, int @admin_id, int @company_id, int @authoriser_id, string @company_position, DateTime @creation_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertPermission(@role_nameId, @admin_id, @company_id, @authoriser_id, @company_position, @creation_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Permission into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="role_nameId">role_nameId</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="authoriser_id">authoriser_id</param>
		/// <param name="company_position">company_position</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertPermission(string @role_nameId, int @admin_id, int @company_id, int @authoriser_id, string @company_position, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "PermissionInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@role_name", EntityBase.GetDatabaseValue(@role_nameId)));
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@authoriser_id", EntityBase.GetDatabaseValue(@authoriser_id)));
			parameters.Add(new SqlParameter("@company_position", EntityBase.GetDatabaseValue(@company_position)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Permission into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
		/// <param name="role_nameId">role_nameId</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="authoriser_id">authoriser_id</param>
		/// <param name="company_position">company_position</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void UpdatePermission(int @permission_id, string @role_nameId, int @admin_id, int @company_id, int @authoriser_id, string @company_position, DateTime @creation_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdatePermission(@permission_id, @role_nameId, @admin_id, @company_id, @authoriser_id, @company_position, @creation_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Permission into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
		/// <param name="role_nameId">role_nameId</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="authoriser_id">authoriser_id</param>
		/// <param name="company_position">company_position</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdatePermission(int @permission_id, string @role_nameId, int @admin_id, int @company_id, int @authoriser_id, string @company_position, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "PermissionUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", EntityBase.GetDatabaseValue(@permission_id)));
			parameters.Add(new SqlParameter("@role_name", EntityBase.GetDatabaseValue(@role_nameId)));
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@authoriser_id", EntityBase.GetDatabaseValue(@authoriser_id)));
			parameters.Add(new SqlParameter("@company_position", EntityBase.GetDatabaseValue(@company_position)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Permission from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
		public static void DeletePermission(int @permission_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeletePermission(@permission_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Permission from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
		/// <param name="helper">helper</param>
		internal static void DeletePermission(int @permission_id, SqlHelper @helper)
		{
			string commandText = "PermissionDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", @permission_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Permission object.
		/// </summary>
		/// <returns>The newly created Permission object.</returns>
		public static Permission CreatePermission()
		{
			return InitializeNew<Permission>();
		}
		
		/// <summary>
		/// Retrieve information for a Permission by a Permission's unique identifier.
		/// </summary>
		/// <param name="permission_id">permission_id</param>
		/// <returns>Permission</returns>
		public static Permission GetPermission(int permission_id)
		{
			string commandText = "PermissionGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@permission_id", permission_id));
			
			return GetOne<Permission>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Permission objects.
		/// </summary>
		/// <returns>The retrieved collection of Permission objects.</returns>
		public static EntityList<Permission> GetPermissions()
		{
			string commandText = "PermissionGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Permission>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Permission objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Permission objects.</returns>
        protected static EntityList<Permission> GetPermissions(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Permission>(SelectFieldList, "FROM [dbo].[Permissions]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Permission objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Permission objects.</returns>
        public static EntityList<Permission> GetPermissions(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Permission>(SelectFieldList, "FROM [dbo].[Permissions]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Permission objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Permission objects.</returns>
		protected static EntityList<Permission> GetPermissions(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPermissions(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Permission objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Permission objects.</returns>
		protected static EntityList<Permission> GetPermissions(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPermissions(string.Empty, where, parameters, Permission.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Permission objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Permission objects.</returns>
		protected static EntityList<Permission> GetPermissions(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPermissions(prefix, where, parameters, Permission.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Permission objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Permission objects.</returns>
		protected static EntityList<Permission> GetPermissions(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetPermissions(string.Empty, where, parameters, Permission.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Permission objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Permission objects.</returns>
		protected static EntityList<Permission> GetPermissions(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetPermissions(prefix, where, parameters, Permission.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Permission objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Permission objects.</returns>
		protected static EntityList<Permission> GetPermissions(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Permission.SelectFieldList + "FROM [dbo].[Permissions] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Permission>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Permission> GetPermissions(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Permission>(SelectFieldList, "FROM [dbo].[Permissions] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByadmin_(Admin @admin_) 
		{
			string commandText = "PermissionGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<Permission>(@admin_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		protected static EntityList<Permission> GetPermissionsByadmin_(Admin @admin_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		protected static EntityList<Permission> GetPermissionsByadmin_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByadmin_(Admin @admin_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByadmin_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Permission objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByadmin_(int @admin_id) 
		{
			string commandText = "PermissionGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<Permission>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Permission object from a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>The newly created Permission object.</returns>
		public static Permission CreatePermissionByadmin_(Admin @admin_)
		{
			Permission permission = InitializeNew<Permission>();
			
			permission.admin_id = @admin_.admin_id;
			
			permission.admin_ = @admin_;
			
			return permission;
		}
		
		/// <summary>
		/// Deletes Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeletePermissionsByadmin_(Admin admin) 
		{
			string commandText = "PermissionDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Permission objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeletePermissionsByadmin_(int admin_id) 
		{
			string commandText = "PermissionDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="authoriser_">authoriser_</param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByauthoriser_(Admin @authoriser_) 
		{
			string commandText = "PermissionGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@authoriser_id", @authoriser_.admin_id));
			
			return GetList<Permission>(@authoriser_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		protected static EntityList<Permission> GetPermissionsByauthoriser_(Admin @authoriser_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[authoriser_id] = @authoriser_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@authoriser_id", @authoriser_.admin_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		protected static EntityList<Permission> GetPermissionsByauthoriser_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[authoriser_id] = @authoriser_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@authoriser_id", @admin_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByauthoriser_(Admin @authoriser_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[authoriser_id] = @authoriser_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@authoriser_id", @authoriser_.admin_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByauthoriser_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[authoriser_id] = @authoriser_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@authoriser_id", @admin_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Permission objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByauthoriser_(int @admin_id) 
		{
			string commandText = "PermissionGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@authoriser_id", @admin_id));
			
			return GetList<Permission>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Permission object from a Admin object.
		/// </summary>
		/// <param name="authoriser_">authoriser_</param>
		/// <returns>The newly created Permission object.</returns>
		public static Permission CreatePermissionByauthoriser_(Admin @authoriser_)
		{
			Permission permission = InitializeNew<Permission>();
			
			permission.authoriser_id = @authoriser_.admin_id;
			
			permission.authoriser_ = @authoriser_;
			
			return permission;
		}
		
		/// <summary>
		/// Deletes Permission objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeletePermissionsByauthoriser_(Admin admin) 
		{
			string commandText = "PermissionDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@authoriser_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Permission objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeletePermissionsByauthoriser_(int admin_id) 
		{
			string commandText = "PermissionDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@authoriser_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Permission objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsBycompany_(Company @company_) 
		{
			string commandText = "PermissionGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Permission>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Permission objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		protected static EntityList<Permission> GetPermissionsBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Permission objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		protected static EntityList<Permission> GetPermissionsBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Permission objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Permission objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Permission objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsBycompany_(int @company_id) 
		{
			string commandText = "PermissionGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Permission>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Permission object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created Permission object.</returns>
		public static Permission CreatePermissionBycompany_(Company @company_)
		{
			Permission permission = InitializeNew<Permission>();
			
			permission.company_id = @company_.company_id;
			
			permission.company_ = @company_;
			
			return permission;
		}
		
		/// <summary>
		/// Deletes Permission objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeletePermissionsBycompany_(Company company) 
		{
			string commandText = "PermissionDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Permission objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeletePermissionsBycompany_(int company_id) 
		{
			string commandText = "PermissionDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Permission objects by a Role object.
		/// </summary>
		/// <param name="role_name">role_name</param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByrole_name(Role @role_name) 
		{
			string commandText = "PermissionGetByRole";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@role_name", @role_name.role_name));
			
			return GetList<Permission>(@role_name, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Permission objects by a Role object.
		/// </summary>
		/// <param name="role">role</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		protected static EntityList<Permission> GetPermissionsByrole_name(Role @role_name, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[role_name] = @role_name ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@role_name", @role_name.role_name));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Permission objects by a Role object.
		/// </summary>
		/// <param name="role_name">role_name</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		protected static EntityList<Permission> GetPermissionsByrole_name(string @role_name, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[role_name] = @role_name ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@role_name", @role_name));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Permission objects by a Role object.
		/// </summary>
		/// <param name="role">role</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByrole_name(Role @role_name, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[role_name] = @role_name ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@role_name", @role_name.role_name));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Permission objects by a Role object.
		/// </summary>
		/// <param name="role_name">role_name</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByrole_name(string @role_name, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Permissions] 
WHERE 
	[Permissions].[role_name] = @role_name ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@role_name", @role_name));
			
			return GetList<Permission>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Permission objects by a Role unique identifier.
		/// </summary>
		/// <param name="role_name">role_name</param>
		/// <returns>A collection Permission objects.</returns>
		public static EntityList<Permission> GetPermissionsByrole_name(string @role_name) 
		{
			string commandText = "PermissionGetByRole";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@role_name", @role_name));
			
			return GetList<Permission>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Permission object from a Role object.
		/// </summary>
		/// <param name="role_name">role_name</param>
		/// <returns>The newly created Permission object.</returns>
		public static Permission CreatePermissionByrole_name(Role @role_name)
		{
			Permission permission = InitializeNew<Permission>();
			
			permission.role_nameId = @role_name.role_name;
			
			permission.role_name = @role_name;
			
			return permission;
		}
		
		/// <summary>
		/// Deletes Permission objects by a Role object.
		/// </summary>
		/// <param name="role">role</param>
		public static void DeletePermissionsByrole_name(Role role) 
		{
			string commandText = "PermissionDeleteByRole";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@role_name", role.role_name));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Permission objects by a Role unique identifier.
		/// </summary>
		/// <param name="role_name">role_name</param>
		public static void DeletePermissionsByrole_name(string role_name) 
		{
			string commandText = "PermissionDeleteByRole";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@role_name", role_name));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class PermissionProperties
		{
			public const string permission_id = "permission_id";
			public const string role_nameId = "role_nameId";
			public const string admin_id = "admin_id";
			public const string company_id = "company_id";
			public const string authoriser_id = "authoriser_id";
			public const string company_position = "company_position";
			public const string creation_datetime = "creation_datetime";
		}
		#endregion
	}
}
