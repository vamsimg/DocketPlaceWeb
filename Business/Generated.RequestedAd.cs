/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 11/08/2012 4:52:04 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a RequestedAd.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("admatch_id: {admatch_id}, uploadedad_id: {uploadedad_id}")]
	public partial class RequestedAd
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admatch_id = int.MinValue;
		/// <summary>
		/// admatch_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, false, false)]
		public int admatch_id
		{
			[DebuggerStepThrough()]
			get { return this._admatch_id; }
			set 
			{
				if (this._admatch_id != value) 
				{
					this._admatch_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admatch_id");
					this._admatch_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _uploadedad_id = int.MinValue;
		/// <summary>
		/// uploadedad_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, false, false)]
		public int uploadedad_id
		{
			[DebuggerStepThrough()]
			get { return this._uploadedad_id; }
			set 
			{
				if (this._uploadedad_id != value) 
				{
					this._uploadedad_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("uploadedad_id");
					this._uploadedad_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _num_wanted = int.MinValue;
		/// <summary>
		/// num_wanted
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int num_wanted
		{
			[DebuggerStepThrough()]
			get { return this._num_wanted; }
			set 
			{
				if (this._num_wanted != value) 
				{
					this._num_wanted = value;
					this.IsDirty = true;	
					OnPropertyChanged("num_wanted");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _daily_quota = int.MinValue;
		/// <summary>
		/// daily_quota
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int daily_quota
		{
			[DebuggerStepThrough()]
			get { return this._daily_quota; }
			set 
			{
				if (this._daily_quota != value) 
				{
					this._daily_quota = value;
					this.IsDirty = true;	
					OnPropertyChanged("daily_quota");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _num_printed = int.MinValue;
		/// <summary>
		/// num_printed
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int num_printed
		{
			[DebuggerStepThrough()]
			get { return this._num_printed; }
			set 
			{
				if (this._num_printed != value) 
				{
					this._num_printed = value;
					this.IsDirty = true;	
					OnPropertyChanged("num_printed");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_active = false;
		/// <summary>
		/// is_active
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_active
		{
			[DebuggerStepThrough()]
			get { return this._is_active; }
			set 
			{
				if (this._is_active != value) 
				{
					this._is_active = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_active");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private AdMatch _admatch_ = null;
		/// <summary>
		/// The parent AdMatch object
		/// </summary>
		public AdMatch admatch_
		{
			get 
			{
				if (_admatch_ == null) 
				{
					_admatch_ = GetParentEntity(AdMatch.GetAdMatch(this.admatch_id)) as AdMatch;
				}
				return _admatch_;
			}
			set
			{
				if(_admatch_ != value) 
				{
					_admatch_ = value;
					
					if (value != null) 
					{
						this.admatch_id = value.admatch_id;
					}
					else 
					{
						this.admatch_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private UploadedAd _uploadedad_ = null;
		/// <summary>
		/// The parent UploadedAd object
		/// </summary>
		public UploadedAd uploadedad_
		{
			get 
			{
				if (_uploadedad_ == null) 
				{
					_uploadedad_ = GetParentEntity(UploadedAd.GetUploadedAd(this.uploadedad_id)) as UploadedAd;
				}
				return _uploadedad_;
			}
			set
			{
				if(_uploadedad_ != value) 
				{
					_uploadedad_ = value;
					
					if (value != null) 
					{
						this.uploadedad_id = value.uploadedad_id;
					}
					else 
					{
						this.uploadedad_id = int.MinValue;
					}
				}
			}
		}
		
		
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(RequestedAd).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(RequestedAd).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(RequestedAd).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected RequestedAd() { }
		#endregion
		
		#region Public Methods
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetRequestedAd(this.admatch_id, this.uploadedad_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_admatch_ != null)
			{	
				this.admatch_id = this.admatch_.admatch_id;
			}
			
			if (_uploadedad_ != null)
			{	
				this.uploadedad_id = this.uploadedad_.uploadedad_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[RequestedAds].[admatch_id],
	[RequestedAds].[uploadedad_id],
	[RequestedAds].[num_wanted],
	[RequestedAds].[daily_quota],
	[RequestedAds].[num_printed],
	[RequestedAds].[is_active]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "RequestedAds";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a RequestedAd into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="num_wanted">num_wanted</param>
		/// <param name="daily_quota">daily_quota</param>
		/// <param name="num_printed">num_printed</param>
		/// <param name="is_active">is_active</param>
		public static void InsertRequestedAd(int @admatch_id, int @uploadedad_id, int @num_wanted, int @daily_quota, int @num_printed, bool @is_active)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertRequestedAd(@admatch_id, @uploadedad_id, @num_wanted, @daily_quota, @num_printed, @is_active, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a RequestedAd into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="num_wanted">num_wanted</param>
		/// <param name="daily_quota">daily_quota</param>
		/// <param name="num_printed">num_printed</param>
		/// <param name="is_active">is_active</param>
		/// <param name="helper">helper</param>
		internal static void InsertRequestedAd(int @admatch_id, int @uploadedad_id, int @num_wanted, int @daily_quota, int @num_printed, bool @is_active, SqlHelper @helper)
		{
			string commandText = "RequestedAdInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", EntityBase.GetDatabaseValue(@admatch_id)));
			parameters.Add(new SqlParameter("@uploadedad_id", EntityBase.GetDatabaseValue(@uploadedad_id)));
			parameters.Add(new SqlParameter("@num_wanted", EntityBase.GetDatabaseValue(@num_wanted)));
			parameters.Add(new SqlParameter("@daily_quota", EntityBase.GetDatabaseValue(@daily_quota)));
			parameters.Add(new SqlParameter("@num_printed", EntityBase.GetDatabaseValue(@num_printed)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a RequestedAd into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="num_wanted">num_wanted</param>
		/// <param name="daily_quota">daily_quota</param>
		/// <param name="num_printed">num_printed</param>
		/// <param name="is_active">is_active</param>
		public static void UpdateRequestedAd(int @admatch_id, int @uploadedad_id, int @num_wanted, int @daily_quota, int @num_printed, bool @is_active)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateRequestedAd(@admatch_id, @uploadedad_id, @num_wanted, @daily_quota, @num_printed, @is_active, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a RequestedAd into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="num_wanted">num_wanted</param>
		/// <param name="daily_quota">daily_quota</param>
		/// <param name="num_printed">num_printed</param>
		/// <param name="is_active">is_active</param>
		/// <param name="helper">helper</param>
		internal static void UpdateRequestedAd(int @admatch_id, int @uploadedad_id, int @num_wanted, int @daily_quota, int @num_printed, bool @is_active, SqlHelper @helper)
		{
			string commandText = "RequestedAdUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", EntityBase.GetDatabaseValue(@admatch_id)));
			parameters.Add(new SqlParameter("@uploadedad_id", EntityBase.GetDatabaseValue(@uploadedad_id)));
			parameters.Add(new SqlParameter("@num_wanted", EntityBase.GetDatabaseValue(@num_wanted)));
			parameters.Add(new SqlParameter("@daily_quota", EntityBase.GetDatabaseValue(@daily_quota)));
			parameters.Add(new SqlParameter("@num_printed", EntityBase.GetDatabaseValue(@num_printed)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a RequestedAd from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		public static void DeleteRequestedAd(int @admatch_id, int @uploadedad_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteRequestedAd(@admatch_id, @uploadedad_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a RequestedAd from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteRequestedAd(int @admatch_id, int @uploadedad_id, SqlHelper @helper)
		{
			string commandText = "RequestedAdDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new RequestedAd object.
		/// </summary>
		/// <returns>The newly created RequestedAd object.</returns>
		public static RequestedAd CreateRequestedAd()
		{
			return InitializeNew<RequestedAd>();
		}
		
		/// <summary>
		/// Retrieve information for a RequestedAd by a RequestedAd's unique identifier.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <returns>RequestedAd</returns>
		public static RequestedAd GetRequestedAd(int admatch_id, int uploadedad_id)
		{
			string commandText = "RequestedAdGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", admatch_id));
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedad_id));
			
			return GetOne<RequestedAd>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection RequestedAd objects.
		/// </summary>
		/// <returns>The retrieved collection of RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAds()
		{
			string commandText = "RequestedAdGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<RequestedAd>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection RequestedAd objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of RequestedAd objects.</returns>
        protected static EntityList<RequestedAd> GetRequestedAds(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<RequestedAd>(SelectFieldList, "FROM [dbo].[RequestedAds]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection RequestedAd objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of RequestedAd objects.</returns>
        public static EntityList<RequestedAd> GetRequestedAds(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<RequestedAd>(SelectFieldList, "FROM [dbo].[RequestedAds]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection RequestedAd objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAds(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetRequestedAds(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection RequestedAd objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAds(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetRequestedAds(string.Empty, where, parameters, RequestedAd.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection RequestedAd objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAds(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetRequestedAds(prefix, where, parameters, RequestedAd.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection RequestedAd objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAds(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetRequestedAds(string.Empty, where, parameters, RequestedAd.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection RequestedAd objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAds(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetRequestedAds(prefix, where, parameters, RequestedAd.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection RequestedAd objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAds(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + RequestedAd.SelectFieldList + "FROM [dbo].[RequestedAds] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<RequestedAd>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<RequestedAd> GetRequestedAds(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<RequestedAd>(SelectFieldList, "FROM [dbo].[RequestedAds] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of RequestedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_">admatch_</param>
		/// <returns>A collection RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAdsByadmatch_(AdMatch @admatch_) 
		{
			string commandText = "RequestedAdGetByAdMatch";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<RequestedAd>(@admatch_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of RequestedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAdsByadmatch_(AdMatch @admatch_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[RequestedAds] 
WHERE 
	[RequestedAds].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<RequestedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of RequestedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAdsByadmatch_(int @admatch_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[RequestedAds] 
WHERE 
	[RequestedAds].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<RequestedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of RequestedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAdsByadmatch_(AdMatch @admatch_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[RequestedAds] 
WHERE 
	[RequestedAds].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admatch_id", @admatch_.admatch_id));
			
			return GetList<RequestedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of RequestedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAdsByadmatch_(int @admatch_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[RequestedAds] 
WHERE 
	[RequestedAds].[admatch_id] = @admatch_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<RequestedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of RequestedAd objects by a AdMatch unique identifier.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		/// <returns>A collection RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAdsByadmatch_(int @admatch_id) 
		{
			string commandText = "RequestedAdGetByAdMatch";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", @admatch_id));
			
			return GetList<RequestedAd>(commandText, parameters);
		}

		/// <summary>
		/// Create a new RequestedAd object from a AdMatch object.
		/// </summary>
		/// <param name="admatch_">admatch_</param>
		/// <returns>The newly created RequestedAd object.</returns>
		public static RequestedAd CreateRequestedAdByadmatch_(AdMatch @admatch_)
		{
			RequestedAd requestedAd = InitializeNew<RequestedAd>();
			
			requestedAd.admatch_id = @admatch_.admatch_id;
			
			requestedAd.admatch_ = @admatch_;
			
			return requestedAd;
		}
		
		/// <summary>
		/// Deletes RequestedAd objects by a AdMatch object.
		/// </summary>
		/// <param name="adMatch">adMatch</param>
		public static void DeleteRequestedAdsByadmatch_(AdMatch adMatch) 
		{
			string commandText = "RequestedAdDeleteByAdMatch";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", adMatch.admatch_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes RequestedAd objects by a AdMatch unique identifier.
		/// </summary>
		/// <param name="admatch_id">admatch_id</param>
		public static void DeleteRequestedAdsByadmatch_(int admatch_id) 
		{
			string commandText = "RequestedAdDeleteByAdMatch";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admatch_id", admatch_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of RequestedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_">uploadedad_</param>
		/// <returns>A collection RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAdsByuploadedad_(UploadedAd @uploadedad_) 
		{
			string commandText = "RequestedAdGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<RequestedAd>(@uploadedad_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of RequestedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAdsByuploadedad_(UploadedAd @uploadedad_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[RequestedAds] 
WHERE 
	[RequestedAds].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<RequestedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of RequestedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection RequestedAd objects.</returns>
		protected static EntityList<RequestedAd> GetRequestedAdsByuploadedad_(int @uploadedad_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[RequestedAds] 
WHERE 
	[RequestedAds].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<RequestedAd>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of RequestedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAdsByuploadedad_(UploadedAd @uploadedad_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[RequestedAds] 
WHERE 
	[RequestedAds].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_.uploadedad_id));
			
			return GetList<RequestedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of RequestedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAdsByuploadedad_(int @uploadedad_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[RequestedAds] 
WHERE 
	[RequestedAds].[uploadedad_id] = @uploadedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<RequestedAd>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of RequestedAd objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		/// <returns>A collection RequestedAd objects.</returns>
		public static EntityList<RequestedAd> GetRequestedAdsByuploadedad_(int @uploadedad_id) 
		{
			string commandText = "RequestedAdGetByUploadedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", @uploadedad_id));
			
			return GetList<RequestedAd>(commandText, parameters);
		}

		/// <summary>
		/// Create a new RequestedAd object from a UploadedAd object.
		/// </summary>
		/// <param name="uploadedad_">uploadedad_</param>
		/// <returns>The newly created RequestedAd object.</returns>
		public static RequestedAd CreateRequestedAdByuploadedad_(UploadedAd @uploadedad_)
		{
			RequestedAd requestedAd = InitializeNew<RequestedAd>();
			
			requestedAd.uploadedad_id = @uploadedad_.uploadedad_id;
			
			requestedAd.uploadedad_ = @uploadedad_;
			
			return requestedAd;
		}
		
		/// <summary>
		/// Deletes RequestedAd objects by a UploadedAd object.
		/// </summary>
		/// <param name="uploadedAd">uploadedAd</param>
		public static void DeleteRequestedAdsByuploadedad_(UploadedAd uploadedAd) 
		{
			string commandText = "RequestedAdDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedAd.uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes RequestedAd objects by a UploadedAd unique identifier.
		/// </summary>
		/// <param name="uploadedad_id">uploadedad_id</param>
		public static void DeleteRequestedAdsByuploadedad_(int uploadedad_id) 
		{
			string commandText = "RequestedAdDeleteByUploadedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@uploadedad_id", uploadedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class RequestedAdProperties
		{
			public const string admatch_id = "admatch_id";
			public const string uploadedad_id = "uploadedad_id";
			public const string num_wanted = "num_wanted";
			public const string daily_quota = "daily_quota";
			public const string num_printed = "num_printed";
			public const string is_active = "is_active";
		}
		#endregion
	}
}
