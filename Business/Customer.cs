/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 24/06/2011 11:25:37 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will NOT be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Text;

using DocketPlace.Business.Framework;

namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Customer.
	/// </summary>
	public partial class Customer : EntityBase
	{

		public static EntityList<Customer> GetCustomersBySearch(string searchTerm, string field)
		{
			SqlParameter parameter = new SqlParameter("@searchTerm", searchTerm);
						
			string where = "where LOWER("+ field + ") = @searchTerm";

			EntityList<Customer> customers = Customer.GetCustomers( where, parameter);
			return customers;			
		}


		/// <summary>
		/// Gets an list of customers from the database with a specific email. DB unique contstrain should ensure only 1 item returned.
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public static Customer GetCustomerByEmail(string email)
		{
			SqlParameter p = new SqlParameter("@email", email);

			string where = "where email = @email ";

			EntityList<Customer> customers = Customer.GetCustomers(where, p);

			if (customers.Count == 1)
			{
				return customers[0];
			}
			else
			{
				return null;
			}
		}


		/// <summary>
		/// Expects mobile in format 04XXXXXXXX
		/// </summary>
		/// <param name="mobile"></param>
		/// <returns></returns>
		public static Customer GetCustomerByMobile(string mobile)
		{
			SqlParameter p = new SqlParameter("@mobile", mobile);

			string where = "where mobile = @mobile ";

			EntityList<Customer> customers = Customer.GetCustomers(where, p);

			if (customers.Count == 1)
			{
				return customers[0];
			}
			else
			{
				return null;
			}
		}

		public static Customer GetCustomerByPhone(string phone)
		{
			SqlParameter p = new SqlParameter("@phone", phone);

			string where = "where phone = @phone ";

			EntityList<Customer> customers = Customer.GetCustomers(where, p);

			if (customers.Count == 1)
			{
				return customers[0];
			}
			else
			{
				return null;
			}
		}

		public string full_name
		{
			get { return this.first_name + " " + this.last_name; }
		}

		public void UpdatePassword(string new_password)
		{
			this.password_hash = BusinessHelper.computeSHAhash(new_password, this.creation_datetime);
			this.Save();
		}

        
		public string ResetPassword()
		{
               string new_password = BusinessHelper.GenerateSevenDigitRandom();

			try
			{
				UpdatePassword(new_password);

			}
			catch (Exception ex)
			{
				throw ex;
			}
			return new_password;
		}

		public static partial class AdminProperties
		{
			public const string full_name = "full_name";
		}
	}
}
