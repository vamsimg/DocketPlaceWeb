/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 11/08/2012 4:51:35 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a OutgoingSMS.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("outgoingSMS_id: {outgoingSMS_id}")]
	public partial class OutgoingSMS
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _outgoingSMS_id = int.MinValue;
		/// <summary>
		/// outgoingSMS_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int outgoingSMS_id
		{
			[DebuggerStepThrough()]
			get { return this._outgoingSMS_id; }
			protected set 
			{
				if (this._outgoingSMS_id != value) 
				{
					this._outgoingSMS_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("outgoingSMS_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admin_id = int.MinValue;
		/// <summary>
		/// admin_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int admin_id
		{
			[DebuggerStepThrough()]
			get { return this._admin_id; }
			set 
			{
				if (this._admin_id != value) 
				{
					this._admin_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admin_id");
					this._admin_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _billingitem_id = int.MinValue;
		/// <summary>
		/// billingitem_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int billingitem_id
		{
			[DebuggerStepThrough()]
			get { return this._billingitem_id; }
			set 
			{
				if (this._billingitem_id != value) 
				{
					this._billingitem_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("billingitem_id");
					this._billingitem_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _customerlist_id = int.MinValue;
		/// <summary>
		/// customerlist_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int customerlist_id
		{
			[DebuggerStepThrough()]
			get { return this._customerlist_id; }
			set 
			{
				if (this._customerlist_id != value) 
				{
					this._customerlist_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("customerlist_id");
					this._customerlist_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _message_text = String.Empty;
		/// <summary>
		/// message_text
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string message_text
		{
			[DebuggerStepThrough()]
			get { return this._message_text; }
			set 
			{
				if (this._message_text != value) 
				{
					this._message_text = value;
					this.IsDirty = true;	
					OnPropertyChanged("message_text");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _notes = String.Empty;
		/// <summary>
		/// notes
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string notes
		{
			[DebuggerStepThrough()]
			get { return this._notes; }
			set 
			{
				if (this._notes != value) 
				{
					this._notes = value;
					this.IsDirty = true;	
					OnPropertyChanged("notes");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _receipient_list = String.Empty;
		/// <summary>
		/// receipient_list
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string receipient_list
		{
			[DebuggerStepThrough()]
			get { return this._receipient_list; }
			set 
			{
				if (this._receipient_list != value) 
				{
					this._receipient_list = value;
					this.IsDirty = true;	
					OnPropertyChanged("receipient_list");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _count = int.MinValue;
		/// <summary>
		/// count
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int count
		{
			[DebuggerStepThrough()]
			get { return this._count; }
			set 
			{
				if (this._count != value) 
				{
					this._count = value;
					this.IsDirty = true;	
					OnPropertyChanged("count");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _verification_sms = String.Empty;
		/// <summary>
		/// verification_sms
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string verification_sms
		{
			[DebuggerStepThrough()]
			get { return this._verification_sms; }
			set 
			{
				if (this._verification_sms != value) 
				{
					this._verification_sms = value;
					this.IsDirty = true;	
					OnPropertyChanged("verification_sms");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _unsubscribe_list = String.Empty;
		/// <summary>
		/// unsubscribe_list
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string unsubscribe_list
		{
			[DebuggerStepThrough()]
			get { return this._unsubscribe_list; }
			set 
			{
				if (this._unsubscribe_list != value) 
				{
					this._unsubscribe_list = value;
					this.IsDirty = true;	
					OnPropertyChanged("unsubscribe_list");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _sent_datetime = DateTime.MinValue;
		/// <summary>
		/// sent_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime sent_datetime
		{
			[DebuggerStepThrough()]
			get { return this._sent_datetime; }
			set 
			{
				if (this._sent_datetime != value) 
				{
					this._sent_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("sent_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _response_list = String.Empty;
		/// <summary>
		/// response_list
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string response_list
		{
			[DebuggerStepThrough()]
			get { return this._response_list; }
			set 
			{
				if (this._response_list != value) 
				{
					this._response_list = value;
					this.IsDirty = true;	
					OnPropertyChanged("response_list");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _broken_list = String.Empty;
		/// <summary>
		/// broken_list
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string broken_list
		{
			[DebuggerStepThrough()]
			get { return this._broken_list; }
			set 
			{
				if (this._broken_list != value) 
				{
					this._broken_list = value;
					this.IsDirty = true;	
					OnPropertyChanged("broken_list");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _admin_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin admin_
		{
			get 
			{
				if (_admin_ == null) 
				{
					_admin_ = GetParentEntity(Admin.GetAdmin(this.admin_id)) as Admin;
				}
				return _admin_;
			}
			set
			{
				if(_admin_ != value) 
				{
					_admin_ = value;
					
					if (value != null) 
					{
						this.admin_id = value.admin_id;
					}
					else 
					{
						this.admin_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private BillingItem _billingitem_ = null;
		/// <summary>
		/// The parent BillingItem object
		/// </summary>
		public BillingItem billingitem_
		{
			get 
			{
				if (_billingitem_ == null) 
				{
					_billingitem_ = GetParentEntity(BillingItem.GetBillingItem(this.billingitem_id)) as BillingItem;
				}
				return _billingitem_;
			}
			set
			{
				if(_billingitem_ != value) 
				{
					_billingitem_ = value;
					
					if (value != null) 
					{
						this.billingitem_id = value.billingitem_id;
					}
					else 
					{
						this.billingitem_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private CustomerList _customerlist_ = null;
		/// <summary>
		/// The parent CustomerList object
		/// </summary>
		public CustomerList customerlist_
		{
			get 
			{
				if (_customerlist_ == null) 
				{
					_customerlist_ = GetParentEntity(CustomerList.GetCustomerList(this.customerlist_id)) as CustomerList;
				}
				return _customerlist_;
			}
			set
			{
				if(_customerlist_ != value) 
				{
					_customerlist_ = value;
					
					if (value != null) 
					{
						this.customerlist_id = value.customerlist_id;
					}
					else 
					{
						this.customerlist_id = int.MinValue;
					}
				}
			}
		}
		
		
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(OutgoingSMS).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(OutgoingSMS).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(OutgoingSMS).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected OutgoingSMS() { }
		#endregion
		
		#region Public Methods
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetOutgoingSMS(this.outgoingSMS_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_admin_ != null)
			{	
				this.admin_id = this.admin_.admin_id;
			}
			
			if (_billingitem_ != null)
			{	
				this.billingitem_id = this.billingitem_.billingitem_id;
			}
			
			if (_customerlist_ != null)
			{	
				this.customerlist_id = this.customerlist_.customerlist_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[OutgoingSMS].[outgoingSMS_id],
	[OutgoingSMS].[admin_id],
	[OutgoingSMS].[billingitem_id],
	[OutgoingSMS].[customerlist_id],
	[OutgoingSMS].[message_text],
	[OutgoingSMS].[notes],
	[OutgoingSMS].[receipient_list],
	[OutgoingSMS].[count],
	[OutgoingSMS].[verification_sms],
	[OutgoingSMS].[unsubscribe_list],
	[OutgoingSMS].[sent_datetime],
	[OutgoingSMS].[response_list],
	[OutgoingSMS].[broken_list]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "OutgoingSMS";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a OutgoingSMS into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <param name="message_text">message_text</param>
		/// <param name="notes">notes</param>
		/// <param name="receipient_list">receipient_list</param>
		/// <param name="count">count</param>
		/// <param name="verification_sms">verification_sms</param>
		/// <param name="unsubscribe_list">unsubscribe_list</param>
		/// <param name="sent_datetime">sent_datetime</param>
		/// <param name="response_list">response_list</param>
		/// <param name="broken_list">broken_list</param>
		public static void InsertOutgoingSMS(int @admin_id, int @billingitem_id, int @customerlist_id, string @message_text, string @notes, string @receipient_list, int @count, string @verification_sms, string @unsubscribe_list, DateTime @sent_datetime, string @response_list, string @broken_list)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertOutgoingSMS(@admin_id, @billingitem_id, @customerlist_id, @message_text, @notes, @receipient_list, @count, @verification_sms, @unsubscribe_list, @sent_datetime, @response_list, @broken_list, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a OutgoingSMS into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <param name="message_text">message_text</param>
		/// <param name="notes">notes</param>
		/// <param name="receipient_list">receipient_list</param>
		/// <param name="count">count</param>
		/// <param name="verification_sms">verification_sms</param>
		/// <param name="unsubscribe_list">unsubscribe_list</param>
		/// <param name="sent_datetime">sent_datetime</param>
		/// <param name="response_list">response_list</param>
		/// <param name="broken_list">broken_list</param>
		/// <param name="helper">helper</param>
		internal static void InsertOutgoingSMS(int @admin_id, int @billingitem_id, int @customerlist_id, string @message_text, string @notes, string @receipient_list, int @count, string @verification_sms, string @unsubscribe_list, DateTime @sent_datetime, string @response_list, string @broken_list, SqlHelper @helper)
		{
			string commandText = "OutgoingSMSInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@billingitem_id", EntityBase.GetDatabaseValue(@billingitem_id)));
			parameters.Add(new SqlParameter("@customerlist_id", EntityBase.GetDatabaseValue(@customerlist_id)));
			parameters.Add(new SqlParameter("@message_text", EntityBase.GetDatabaseValue(@message_text)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@receipient_list", EntityBase.GetDatabaseValue(@receipient_list)));
			parameters.Add(new SqlParameter("@count", EntityBase.GetDatabaseValue(@count)));
			parameters.Add(new SqlParameter("@verification_sms", EntityBase.GetDatabaseValue(@verification_sms)));
			parameters.Add(new SqlParameter("@unsubscribe_list", EntityBase.GetDatabaseValue(@unsubscribe_list)));
			parameters.Add(new SqlParameter("@sent_datetime", EntityBase.GetDatabaseValue(@sent_datetime)));
			parameters.Add(new SqlParameter("@response_list", EntityBase.GetDatabaseValue(@response_list)));
			parameters.Add(new SqlParameter("@broken_list", EntityBase.GetDatabaseValue(@broken_list)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a OutgoingSMS into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="outgoingSMS_id">outgoingSMS_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <param name="message_text">message_text</param>
		/// <param name="notes">notes</param>
		/// <param name="receipient_list">receipient_list</param>
		/// <param name="count">count</param>
		/// <param name="verification_sms">verification_sms</param>
		/// <param name="unsubscribe_list">unsubscribe_list</param>
		/// <param name="sent_datetime">sent_datetime</param>
		/// <param name="response_list">response_list</param>
		/// <param name="broken_list">broken_list</param>
		public static void UpdateOutgoingSMS(int @outgoingSMS_id, int @admin_id, int @billingitem_id, int @customerlist_id, string @message_text, string @notes, string @receipient_list, int @count, string @verification_sms, string @unsubscribe_list, DateTime @sent_datetime, string @response_list, string @broken_list)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateOutgoingSMS(@outgoingSMS_id, @admin_id, @billingitem_id, @customerlist_id, @message_text, @notes, @receipient_list, @count, @verification_sms, @unsubscribe_list, @sent_datetime, @response_list, @broken_list, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a OutgoingSMS into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="outgoingSMS_id">outgoingSMS_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <param name="message_text">message_text</param>
		/// <param name="notes">notes</param>
		/// <param name="receipient_list">receipient_list</param>
		/// <param name="count">count</param>
		/// <param name="verification_sms">verification_sms</param>
		/// <param name="unsubscribe_list">unsubscribe_list</param>
		/// <param name="sent_datetime">sent_datetime</param>
		/// <param name="response_list">response_list</param>
		/// <param name="broken_list">broken_list</param>
		/// <param name="helper">helper</param>
		internal static void UpdateOutgoingSMS(int @outgoingSMS_id, int @admin_id, int @billingitem_id, int @customerlist_id, string @message_text, string @notes, string @receipient_list, int @count, string @verification_sms, string @unsubscribe_list, DateTime @sent_datetime, string @response_list, string @broken_list, SqlHelper @helper)
		{
			string commandText = "OutgoingSMSUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@outgoingSMS_id", EntityBase.GetDatabaseValue(@outgoingSMS_id)));
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@billingitem_id", EntityBase.GetDatabaseValue(@billingitem_id)));
			parameters.Add(new SqlParameter("@customerlist_id", EntityBase.GetDatabaseValue(@customerlist_id)));
			parameters.Add(new SqlParameter("@message_text", EntityBase.GetDatabaseValue(@message_text)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@receipient_list", EntityBase.GetDatabaseValue(@receipient_list)));
			parameters.Add(new SqlParameter("@count", EntityBase.GetDatabaseValue(@count)));
			parameters.Add(new SqlParameter("@verification_sms", EntityBase.GetDatabaseValue(@verification_sms)));
			parameters.Add(new SqlParameter("@unsubscribe_list", EntityBase.GetDatabaseValue(@unsubscribe_list)));
			parameters.Add(new SqlParameter("@sent_datetime", EntityBase.GetDatabaseValue(@sent_datetime)));
			parameters.Add(new SqlParameter("@response_list", EntityBase.GetDatabaseValue(@response_list)));
			parameters.Add(new SqlParameter("@broken_list", EntityBase.GetDatabaseValue(@broken_list)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a OutgoingSMS from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="outgoingSMS_id">outgoingSMS_id</param>
		public static void DeleteOutgoingSMS(int @outgoingSMS_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteOutgoingSMS(@outgoingSMS_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a OutgoingSMS from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="outgoingSMS_id">outgoingSMS_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteOutgoingSMS(int @outgoingSMS_id, SqlHelper @helper)
		{
			string commandText = "OutgoingSMSDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@outgoingSMS_id", @outgoingSMS_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new OutgoingSMS object.
		/// </summary>
		/// <returns>The newly created OutgoingSMS object.</returns>
		public static OutgoingSMS CreateOutgoingSMS()
		{
			return InitializeNew<OutgoingSMS>();
		}
		
		/// <summary>
		/// Retrieve information for a OutgoingSMS by a OutgoingSMS's unique identifier.
		/// </summary>
		/// <param name="outgoingSMS_id">outgoingSMS_id</param>
		/// <returns>OutgoingSMS</returns>
		public static OutgoingSMS GetOutgoingSMS(int outgoingSMS_id)
		{
			string commandText = "OutgoingSMSGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@outgoingSMS_id", outgoingSMS_id));
			
			return GetOne<OutgoingSMS>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection OutgoingSMS objects.
		/// </summary>
		/// <returns>The retrieved collection of OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMs()
		{
			string commandText = "OutgoingSMSGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<OutgoingSMS>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection OutgoingSMS objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of OutgoingSMS objects.</returns>
        protected static EntityList<OutgoingSMS> GetOutgoingSMs(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<OutgoingSMS>(SelectFieldList, "FROM [dbo].[OutgoingSMS]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection OutgoingSMS objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of OutgoingSMS objects.</returns>
        public static EntityList<OutgoingSMS> GetOutgoingSMs(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<OutgoingSMS>(SelectFieldList, "FROM [dbo].[OutgoingSMS]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection OutgoingSMS objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMs(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetOutgoingSMs(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection OutgoingSMS objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMs(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetOutgoingSMs(string.Empty, where, parameters, OutgoingSMS.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection OutgoingSMS objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMs(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetOutgoingSMs(prefix, where, parameters, OutgoingSMS.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection OutgoingSMS objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMs(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetOutgoingSMs(string.Empty, where, parameters, OutgoingSMS.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection OutgoingSMS objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMs(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetOutgoingSMs(prefix, where, parameters, OutgoingSMS.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection OutgoingSMS objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMs(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + OutgoingSMS.SelectFieldList + "FROM [dbo].[OutgoingSMS] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<OutgoingSMS>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<OutgoingSMS> GetOutgoingSMs(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<OutgoingSMS>(SelectFieldList, "FROM [dbo].[OutgoingSMS] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsByadmin_(Admin @admin_) 
		{
			string commandText = "OutgoingSMSGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<OutgoingSMS>(@admin_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMsByadmin_(Admin @admin_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of OutgoingSMS objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMsByadmin_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsByadmin_(Admin @admin_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of OutgoingSMS objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsByadmin_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsByadmin_(int @admin_id) 
		{
			string commandText = "OutgoingSMSGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<OutgoingSMS>(commandText, parameters);
		}

		/// <summary>
		/// Create a new OutgoingSMS object from a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>The newly created OutgoingSMS object.</returns>
		public static OutgoingSMS CreateOutgoingSMSByadmin_(Admin @admin_)
		{
			OutgoingSMS outgoingSMS = InitializeNew<OutgoingSMS>();
			
			outgoingSMS.admin_id = @admin_.admin_id;
			
			outgoingSMS.admin_ = @admin_;
			
			return outgoingSMS;
		}
		
		/// <summary>
		/// Deletes OutgoingSMS objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeleteOutgoingSMsByadmin_(Admin admin) 
		{
			string commandText = "OutgoingSMSDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes OutgoingSMS objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeleteOutgoingSMsByadmin_(int admin_id) 
		{
			string commandText = "OutgoingSMSDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a BillingItem object.
		/// </summary>
		/// <param name="billingitem_">billingitem_</param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsBybillingitem_(BillingItem @billingitem_) 
		{
			string commandText = "OutgoingSMSGetByBillingItem";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", @billingitem_.billingitem_id));
			
			return GetList<OutgoingSMS>(@billingitem_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a BillingItem object.
		/// </summary>
		/// <param name="billingItem">billingItem</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMsBybillingitem_(BillingItem @billingitem_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[billingitem_id] = @billingitem_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@billingitem_id", @billingitem_.billingitem_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of OutgoingSMS objects by a BillingItem object.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMsBybillingitem_(int @billingitem_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[billingitem_id] = @billingitem_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", @billingitem_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a BillingItem object.
		/// </summary>
		/// <param name="billingItem">billingItem</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsBybillingitem_(BillingItem @billingitem_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[billingitem_id] = @billingitem_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@billingitem_id", @billingitem_.billingitem_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of OutgoingSMS objects by a BillingItem object.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsBybillingitem_(int @billingitem_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[billingitem_id] = @billingitem_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", @billingitem_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a BillingItem unique identifier.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsBybillingitem_(int @billingitem_id) 
		{
			string commandText = "OutgoingSMSGetByBillingItem";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", @billingitem_id));
			
			return GetList<OutgoingSMS>(commandText, parameters);
		}

		/// <summary>
		/// Create a new OutgoingSMS object from a BillingItem object.
		/// </summary>
		/// <param name="billingitem_">billingitem_</param>
		/// <returns>The newly created OutgoingSMS object.</returns>
		public static OutgoingSMS CreateOutgoingSMSBybillingitem_(BillingItem @billingitem_)
		{
			OutgoingSMS outgoingSMS = InitializeNew<OutgoingSMS>();
			
			outgoingSMS.billingitem_id = @billingitem_.billingitem_id;
			
			outgoingSMS.billingitem_ = @billingitem_;
			
			return outgoingSMS;
		}
		
		/// <summary>
		/// Deletes OutgoingSMS objects by a BillingItem object.
		/// </summary>
		/// <param name="billingItem">billingItem</param>
		public static void DeleteOutgoingSMsBybillingitem_(BillingItem billingItem) 
		{
			string commandText = "OutgoingSMSDeleteByBillingItem";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", billingItem.billingitem_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes OutgoingSMS objects by a BillingItem unique identifier.
		/// </summary>
		/// <param name="billingitem_id">billingitem_id</param>
		public static void DeleteOutgoingSMsBybillingitem_(int billingitem_id) 
		{
			string commandText = "OutgoingSMSDeleteByBillingItem";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@billingitem_id", billingitem_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a CustomerList object.
		/// </summary>
		/// <param name="customerlist_">customerlist_</param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsBycustomerlist_(CustomerList @customerlist_) 
		{
			string commandText = "OutgoingSMSGetByCustomerList";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", @customerlist_.customerlist_id));
			
			return GetList<OutgoingSMS>(@customerlist_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a CustomerList object.
		/// </summary>
		/// <param name="customerList">customerList</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMsBycustomerlist_(CustomerList @customerlist_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[customerlist_id] = @customerlist_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customerlist_id", @customerlist_.customerlist_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of OutgoingSMS objects by a CustomerList object.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		protected static EntityList<OutgoingSMS> GetOutgoingSMsBycustomerlist_(int @customerlist_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[customerlist_id] = @customerlist_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", @customerlist_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a CustomerList object.
		/// </summary>
		/// <param name="customerList">customerList</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsBycustomerlist_(CustomerList @customerlist_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[customerlist_id] = @customerlist_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customerlist_id", @customerlist_.customerlist_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of OutgoingSMS objects by a CustomerList object.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsBycustomerlist_(int @customerlist_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[OutgoingSMS] 
WHERE 
	[OutgoingSMS].[customerlist_id] = @customerlist_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", @customerlist_id));
			
			return GetList<OutgoingSMS>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of OutgoingSMS objects by a CustomerList unique identifier.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <returns>A collection OutgoingSMS objects.</returns>
		public static EntityList<OutgoingSMS> GetOutgoingSMsBycustomerlist_(int @customerlist_id) 
		{
			string commandText = "OutgoingSMSGetByCustomerList";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", @customerlist_id));
			
			return GetList<OutgoingSMS>(commandText, parameters);
		}

		/// <summary>
		/// Create a new OutgoingSMS object from a CustomerList object.
		/// </summary>
		/// <param name="customerlist_">customerlist_</param>
		/// <returns>The newly created OutgoingSMS object.</returns>
		public static OutgoingSMS CreateOutgoingSMSBycustomerlist_(CustomerList @customerlist_)
		{
			OutgoingSMS outgoingSMS = InitializeNew<OutgoingSMS>();
			
			outgoingSMS.customerlist_id = @customerlist_.customerlist_id;
			
			outgoingSMS.customerlist_ = @customerlist_;
			
			return outgoingSMS;
		}
		
		/// <summary>
		/// Deletes OutgoingSMS objects by a CustomerList object.
		/// </summary>
		/// <param name="customerList">customerList</param>
		public static void DeleteOutgoingSMsBycustomerlist_(CustomerList customerList) 
		{
			string commandText = "OutgoingSMSDeleteByCustomerList";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", customerList.customerlist_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes OutgoingSMS objects by a CustomerList unique identifier.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
		public static void DeleteOutgoingSMsBycustomerlist_(int customerlist_id) 
		{
			string commandText = "OutgoingSMSDeleteByCustomerList";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", customerlist_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class OutgoingSMSProperties
		{
			public const string outgoingSMS_id = "outgoingSMS_id";
			public const string admin_id = "admin_id";
			public const string billingitem_id = "billingitem_id";
			public const string customerlist_id = "customerlist_id";
			public const string message_text = "message_text";
			public const string notes = "notes";
			public const string receipient_list = "receipient_list";
			public const string count = "count";
			public const string verification_sms = "verification_sms";
			public const string unsubscribe_list = "unsubscribe_list";
			public const string sent_datetime = "sent_datetime";
			public const string response_list = "response_list";
			public const string broken_list = "broken_list";
		}
		#endregion
	}
}
