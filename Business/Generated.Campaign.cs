/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 11/08/2012 4:49:48 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Campaign.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("campaign_id: {campaign_id}")]
	public partial class Campaign
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _campaign_id = int.MinValue;
		/// <summary>
		/// campaign_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int campaign_id
		{
			[DebuggerStepThrough()]
			get { return this._campaign_id; }
			protected set 
			{
				if (this._campaign_id != value) 
				{
					this._campaign_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("campaign_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _creator_id = int.MinValue;
		/// <summary>
		/// creator_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int creator_id
		{
			[DebuggerStepThrough()]
			get { return this._creator_id; }
			set 
			{
				if (this._creator_id != value) 
				{
					this._creator_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("creator_id");
					this._creator_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _title = String.Empty;
		/// <summary>
		/// title
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string title
		{
			[DebuggerStepThrough()]
			get { return this._title; }
			set 
			{
				if (this._title != value) 
				{
					this._title = value;
					this.IsDirty = true;	
					OnPropertyChanged("title");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _notes = String.Empty;
		/// <summary>
		/// notes
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string notes
		{
			[DebuggerStepThrough()]
			get { return this._notes; }
			set 
			{
				if (this._notes != value) 
				{
					this._notes = value;
					this.IsDirty = true;	
					OnPropertyChanged("notes");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _budget = int.MinValue;
		/// <summary>
		/// budget
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int budget
		{
			[DebuggerStepThrough()]
			get { return this._budget; }
			set 
			{
				if (this._budget != value) 
				{
					this._budget = value;
					this.IsDirty = true;	
					OnPropertyChanged("budget");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_active = false;
		/// <summary>
		/// is_active
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_active
		{
			[DebuggerStepThrough()]
			get { return this._is_active; }
			set 
			{
				if (this._is_active != value) 
				{
					this._is_active = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_active");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_archived = false;
		/// <summary>
		/// is_archived
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_archived
		{
			[DebuggerStepThrough()]
			get { return this._is_archived; }
			set 
			{
				if (this._is_archived != value) 
				{
					this._is_archived = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_archived");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _start_datetime = DateTime.MinValue;
		/// <summary>
		/// start_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime start_datetime
		{
			[DebuggerStepThrough()]
			get { return this._start_datetime; }
			set 
			{
				if (this._start_datetime != value) 
				{
					this._start_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("start_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _end_datetime = DateTime.MinValue;
		/// <summary>
		/// end_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime end_datetime
		{
			[DebuggerStepThrough()]
			get { return this._end_datetime; }
			set 
			{
				if (this._end_datetime != value) 
				{
					this._end_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("end_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _creator_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin creator_
		{
			get 
			{
				if (_creator_ == null) 
				{
					_creator_ = GetParentEntity(Admin.GetAdmin(this.creator_id)) as Admin;
				}
				return _creator_;
			}
			set
			{
				if(_creator_ != value) 
				{
					_creator_ = value;
					
					if (value != null) 
					{
						this.creator_id = value.admin_id;
					}
					else 
					{
						this.creator_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<AdGroup> _adGroupsBycampaign_ = null;
		/// <summary>
		/// A collection of AdGroup children objects
		/// </summary>
		public EntityList<AdGroup> AdGroupsBycampaign_
		{
			get 
			{
				if (_adGroupsBycampaign_ == null) {
					_adGroupsBycampaign_ = DocketPlace.Business.AdGroup.GetAdGroupsBycampaign_(this);
				}
				return _adGroupsBycampaign_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesBycampaign_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesBycampaign_
		{
			get 
			{
				if (_logEntriesBycampaign_ == null) {
					_logEntriesBycampaign_ = DocketPlace.Business.LogEntry.GetLogEntriesBycampaign_(this);
				}
				return _logEntriesBycampaign_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Campaign).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Campaign).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Campaign).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Campaign() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a AdGroup for this Campaign object
		/// </summary>
		public AdGroup CreateAdGroup()
		{
			return DocketPlace.Business.AdGroup.CreateAdGroupBycampaign_(this);
		}
		/// <summary>
		/// Creates a LogEntry for this Campaign object
		/// </summary>
		public LogEntry CreateLogEntry()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryBycampaign_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetCampaign(this.campaign_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
			if (_creator_ != null)
			{	
				this.creator_id = this.creator_.admin_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Campaigns].[campaign_id],
	[Campaigns].[company_id],
	[Campaigns].[creator_id],
	[Campaigns].[title],
	[Campaigns].[notes],
	[Campaigns].[budget],
	[Campaigns].[is_active],
	[Campaigns].[is_archived],
	[Campaigns].[start_datetime],
	[Campaigns].[end_datetime],
	[Campaigns].[creation_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Campaigns";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Campaign into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="title">title</param>
		/// <param name="notes">notes</param>
		/// <param name="budget">budget</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_archived">is_archived</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void InsertCampaign(int @company_id, int @creator_id, string @title, string @notes, int @budget, bool @is_active, bool @is_archived, DateTime @start_datetime, DateTime @end_datetime, DateTime @creation_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertCampaign(@company_id, @creator_id, @title, @notes, @budget, @is_active, @is_archived, @start_datetime, @end_datetime, @creation_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Campaign into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="title">title</param>
		/// <param name="notes">notes</param>
		/// <param name="budget">budget</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_archived">is_archived</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertCampaign(int @company_id, int @creator_id, string @title, string @notes, int @budget, bool @is_active, bool @is_archived, DateTime @start_datetime, DateTime @end_datetime, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "CampaignInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@creator_id", EntityBase.GetDatabaseValue(@creator_id)));
			parameters.Add(new SqlParameter("@title", EntityBase.GetDatabaseValue(@title)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@budget", EntityBase.GetDatabaseValue(@budget)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@is_archived", @is_archived));
			parameters.Add(new SqlParameter("@start_datetime", EntityBase.GetDatabaseValue(@start_datetime)));
			parameters.Add(new SqlParameter("@end_datetime", EntityBase.GetDatabaseValue(@end_datetime)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Campaign into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="title">title</param>
		/// <param name="notes">notes</param>
		/// <param name="budget">budget</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_archived">is_archived</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void UpdateCampaign(int @campaign_id, int @company_id, int @creator_id, string @title, string @notes, int @budget, bool @is_active, bool @is_archived, DateTime @start_datetime, DateTime @end_datetime, DateTime @creation_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateCampaign(@campaign_id, @company_id, @creator_id, @title, @notes, @budget, @is_active, @is_archived, @start_datetime, @end_datetime, @creation_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Campaign into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="creator_id">creator_id</param>
		/// <param name="title">title</param>
		/// <param name="notes">notes</param>
		/// <param name="budget">budget</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_archived">is_archived</param>
		/// <param name="start_datetime">start_datetime</param>
		/// <param name="end_datetime">end_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdateCampaign(int @campaign_id, int @company_id, int @creator_id, string @title, string @notes, int @budget, bool @is_active, bool @is_archived, DateTime @start_datetime, DateTime @end_datetime, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "CampaignUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", EntityBase.GetDatabaseValue(@campaign_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@creator_id", EntityBase.GetDatabaseValue(@creator_id)));
			parameters.Add(new SqlParameter("@title", EntityBase.GetDatabaseValue(@title)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@budget", EntityBase.GetDatabaseValue(@budget)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@is_archived", @is_archived));
			parameters.Add(new SqlParameter("@start_datetime", EntityBase.GetDatabaseValue(@start_datetime)));
			parameters.Add(new SqlParameter("@end_datetime", EntityBase.GetDatabaseValue(@end_datetime)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Campaign from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		public static void DeleteCampaign(int @campaign_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteCampaign(@campaign_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Campaign from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteCampaign(int @campaign_id, SqlHelper @helper)
		{
			string commandText = "CampaignDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", @campaign_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Campaign object.
		/// </summary>
		/// <returns>The newly created Campaign object.</returns>
		public static Campaign CreateCampaign()
		{
			return InitializeNew<Campaign>();
		}
		
		/// <summary>
		/// Retrieve information for a Campaign by a Campaign's unique identifier.
		/// </summary>
		/// <param name="campaign_id">campaign_id</param>
		/// <returns>Campaign</returns>
		public static Campaign GetCampaign(int campaign_id)
		{
			string commandText = "CampaignGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@campaign_id", campaign_id));
			
			return GetOne<Campaign>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Campaign objects.
		/// </summary>
		/// <returns>The retrieved collection of Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaigns()
		{
			string commandText = "CampaignGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Campaign>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Campaign objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Campaign objects.</returns>
        protected static EntityList<Campaign> GetCampaigns(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Campaign>(SelectFieldList, "FROM [dbo].[Campaigns]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Campaign objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Campaign objects.</returns>
        public static EntityList<Campaign> GetCampaigns(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Campaign>(SelectFieldList, "FROM [dbo].[Campaigns]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Campaign objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaigns(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCampaigns(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Campaign objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaigns(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCampaigns(string.Empty, where, parameters, Campaign.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Campaign objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaigns(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCampaigns(prefix, where, parameters, Campaign.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Campaign objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaigns(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetCampaigns(string.Empty, where, parameters, Campaign.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Campaign objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaigns(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetCampaigns(prefix, where, parameters, Campaign.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Campaign objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaigns(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Campaign.SelectFieldList + "FROM [dbo].[Campaigns] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Campaign>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Campaign> GetCampaigns(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Campaign>(SelectFieldList, "FROM [dbo].[Campaigns] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of Campaign objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaignsBycompany_(Company @company_) 
		{
			string commandText = "CampaignGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Campaign>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Campaign objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaignsBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Campaigns] 
WHERE 
	[Campaigns].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Campaign>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Campaign objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaignsBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Campaigns] 
WHERE 
	[Campaigns].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Campaign>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Campaign objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaignsBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Campaigns] 
WHERE 
	[Campaigns].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Campaign>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Campaign objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaignsBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Campaigns] 
WHERE 
	[Campaigns].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Campaign>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Campaign objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaignsBycompany_(int @company_id) 
		{
			string commandText = "CampaignGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Campaign>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Campaign object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created Campaign object.</returns>
		public static Campaign CreateCampaignBycompany_(Company @company_)
		{
			Campaign campaign = InitializeNew<Campaign>();
			
			campaign.company_id = @company_.company_id;
			
			campaign.company_ = @company_;
			
			return campaign;
		}
		
		/// <summary>
		/// Deletes Campaign objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeleteCampaignsBycompany_(Company company) 
		{
			string commandText = "CampaignDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Campaign objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeleteCampaignsBycompany_(int company_id) 
		{
			string commandText = "CampaignDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Campaign objects by a Admin object.
		/// </summary>
		/// <param name="creator_">creator_</param>
		/// <returns>A collection Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaignsBycreator_(Admin @creator_) 
		{
			string commandText = "CampaignGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<Campaign>(@creator_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Campaign objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaignsBycreator_(Admin @creator_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Campaigns] 
WHERE 
	[Campaigns].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<Campaign>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Campaign objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Campaign objects.</returns>
		protected static EntityList<Campaign> GetCampaignsBycreator_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Campaigns] 
WHERE 
	[Campaigns].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<Campaign>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Campaign objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaignsBycreator_(Admin @creator_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Campaigns] 
WHERE 
	[Campaigns].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@creator_id", @creator_.admin_id));
			
			return GetList<Campaign>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Campaign objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaignsBycreator_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Campaigns] 
WHERE 
	[Campaigns].[creator_id] = @creator_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<Campaign>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Campaign objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection Campaign objects.</returns>
		public static EntityList<Campaign> GetCampaignsBycreator_(int @admin_id) 
		{
			string commandText = "CampaignGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", @admin_id));
			
			return GetList<Campaign>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Campaign object from a Admin object.
		/// </summary>
		/// <param name="creator_">creator_</param>
		/// <returns>The newly created Campaign object.</returns>
		public static Campaign CreateCampaignBycreator_(Admin @creator_)
		{
			Campaign campaign = InitializeNew<Campaign>();
			
			campaign.creator_id = @creator_.admin_id;
			
			campaign.creator_ = @creator_;
			
			return campaign;
		}
		
		/// <summary>
		/// Deletes Campaign objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeleteCampaignsBycreator_(Admin admin) 
		{
			string commandText = "CampaignDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Campaign objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeleteCampaignsBycreator_(int admin_id) 
		{
			string commandText = "CampaignDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@creator_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class CampaignProperties
		{
			public const string campaign_id = "campaign_id";
			public const string company_id = "company_id";
			public const string creator_id = "creator_id";
			public const string title = "title";
			public const string notes = "notes";
			public const string budget = "budget";
			public const string is_active = "is_active";
			public const string is_archived = "is_archived";
			public const string start_datetime = "start_datetime";
			public const string end_datetime = "end_datetime";
			public const string creation_datetime = "creation_datetime";
		}
		#endregion
	}
}
