/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 8:49:31 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a LogCode.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("logcode_id: {logcode_id}")]
	public partial class LogCode
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _logcode_id = int.MinValue;
		/// <summary>
		/// logcode_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, false, false)]
		public int logcode_id
		{
			[DebuggerStepThrough()]
			get { return this._logcode_id; }
			set 
			{
				if (this._logcode_id != value) 
				{
					this._logcode_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("logcode_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _description = String.Empty;
		/// <summary>
		/// description
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string description
		{
			[DebuggerStepThrough()]
			get { return this._description; }
			set 
			{
				if (this._description != value) 
				{
					this._description = value;
					this.IsDirty = true;	
					OnPropertyChanged("description");
				}
			}
		}
		
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesBylogcode_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesBylogcode_
		{
			get 
			{
				if (_logEntriesBylogcode_ == null) {
					_logEntriesBylogcode_ = DocketPlace.Business.LogEntry.GetLogEntriesBylogcode_(this);
				}
				return _logEntriesBylogcode_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(LogCode).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(LogCode).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(LogCode).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected LogCode() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a LogEntry for this LogCode object
		/// </summary>
		public LogEntry CreateLogEntry()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryBylogcode_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetLogCode(this.logcode_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[LogCodes].[logcode_id],
	[LogCodes].[description]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "LogCodes";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a LogCode into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="description">description</param>
		public static void InsertLogCode(int @logcode_id, string @description)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertLogCode(@logcode_id, @description, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a LogCode into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="description">description</param>
		/// <param name="helper">helper</param>
		internal static void InsertLogCode(int @logcode_id, string @description, SqlHelper @helper)
		{
			string commandText = "LogCodeInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", EntityBase.GetDatabaseValue(@logcode_id)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a LogCode into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="description">description</param>
		public static void UpdateLogCode(int @logcode_id, string @description)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateLogCode(@logcode_id, @description, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a LogCode into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="description">description</param>
		/// <param name="helper">helper</param>
		internal static void UpdateLogCode(int @logcode_id, string @description, SqlHelper @helper)
		{
			string commandText = "LogCodeUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", EntityBase.GetDatabaseValue(@logcode_id)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a LogCode from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		public static void DeleteLogCode(int @logcode_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteLogCode(@logcode_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a LogCode from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteLogCode(int @logcode_id, SqlHelper @helper)
		{
			string commandText = "LogCodeDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", @logcode_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new LogCode object.
		/// </summary>
		/// <returns>The newly created LogCode object.</returns>
		public static LogCode CreateLogCode()
		{
			return InitializeNew<LogCode>();
		}
		
		/// <summary>
		/// Retrieve information for a LogCode by a LogCode's unique identifier.
		/// </summary>
		/// <param name="logcode_id">logcode_id</param>
		/// <returns>LogCode</returns>
		public static LogCode GetLogCode(int logcode_id)
		{
			string commandText = "LogCodeGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@logcode_id", logcode_id));
			
			return GetOne<LogCode>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection LogCode objects.
		/// </summary>
		/// <returns>The retrieved collection of LogCode objects.</returns>
		public static EntityList<LogCode> GetLogCodes()
		{
			string commandText = "LogCodeGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<LogCode>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection LogCode objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of LogCode objects.</returns>
        protected static EntityList<LogCode> GetLogCodes(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<LogCode>(SelectFieldList, "FROM [dbo].[LogCodes]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection LogCode objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of LogCode objects.</returns>
        public static EntityList<LogCode> GetLogCodes(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<LogCode>(SelectFieldList, "FROM [dbo].[LogCodes]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection LogCode objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of LogCode objects.</returns>
		protected static EntityList<LogCode> GetLogCodes(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetLogCodes(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection LogCode objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of LogCode objects.</returns>
		protected static EntityList<LogCode> GetLogCodes(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetLogCodes(string.Empty, where, parameters, LogCode.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection LogCode objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of LogCode objects.</returns>
		protected static EntityList<LogCode> GetLogCodes(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetLogCodes(prefix, where, parameters, LogCode.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection LogCode objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of LogCode objects.</returns>
		protected static EntityList<LogCode> GetLogCodes(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetLogCodes(string.Empty, where, parameters, LogCode.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection LogCode objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of LogCode objects.</returns>
		protected static EntityList<LogCode> GetLogCodes(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetLogCodes(prefix, where, parameters, LogCode.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection LogCode objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of LogCode objects.</returns>
		protected static EntityList<LogCode> GetLogCodes(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + LogCode.SelectFieldList + "FROM [dbo].[LogCodes] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<LogCode>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<LogCode> GetLogCodes(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<LogCode>(SelectFieldList, "FROM [dbo].[LogCodes] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		#endregion
		
		#region Subclasses
		public static partial class LogCodeProperties
		{
			public const string logcode_id = "logcode_id";
			public const string description = "description";
		}
		#endregion
	}
}
