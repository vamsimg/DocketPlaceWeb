/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 8:47:33 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Admin.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("admin_id: {admin_id}")]
	public partial class Admin
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admin_id = int.MinValue;
		/// <summary>
		/// admin_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int admin_id
		{
			[DebuggerStepThrough()]
			get { return this._admin_id; }
			protected set 
			{
				if (this._admin_id != value) 
				{
					this._admin_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admin_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _first_name = String.Empty;
		/// <summary>
		/// first_name
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string first_name
		{
			[DebuggerStepThrough()]
			get { return this._first_name; }
			set 
			{
				if (this._first_name != value) 
				{
					this._first_name = value;
					this.IsDirty = true;	
					OnPropertyChanged("first_name");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _last_name = String.Empty;
		/// <summary>
		/// last_name
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string last_name
		{
			[DebuggerStepThrough()]
			get { return this._last_name; }
			set 
			{
				if (this._last_name != value) 
				{
					this._last_name = value;
					this.IsDirty = true;	
					OnPropertyChanged("last_name");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _email = String.Empty;
		/// <summary>
		/// email
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string email
		{
			[DebuggerStepThrough()]
			get { return this._email; }
			set 
			{
				if (this._email != value) 
				{
					this._email = value;
					this.IsDirty = true;	
					OnPropertyChanged("email");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _phone = String.Empty;
		/// <summary>
		/// phone
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string phone
		{
			[DebuggerStepThrough()]
			get { return this._phone; }
			set 
			{
				if (this._phone != value) 
				{
					this._phone = value;
					this.IsDirty = true;	
					OnPropertyChanged("phone");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _mobile = String.Empty;
		/// <summary>
		/// mobile
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string mobile
		{
			[DebuggerStepThrough()]
			get { return this._mobile; }
			set 
			{
				if (this._mobile != value) 
				{
					this._mobile = value;
					this.IsDirty = true;	
					OnPropertyChanged("mobile");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _password_hash = String.Empty;
		/// <summary>
		/// password_hash
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string password_hash
		{
			[DebuggerStepThrough()]
			get { return this._password_hash; }
			set 
			{
				if (this._password_hash != value) 
				{
					this._password_hash = value;
					this.IsDirty = true;	
					OnPropertyChanged("password_hash");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_active = false;
		/// <summary>
		/// is_active
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_active
		{
			[DebuggerStepThrough()]
			get { return this._is_active; }
			set 
			{
				if (this._is_active != value) 
				{
					this._is_active = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_active");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<AdGroup> _adGroupsBycreator_ = null;
		/// <summary>
		/// A collection of AdGroup children objects
		/// </summary>
		public EntityList<AdGroup> AdGroupsBycreator_
		{
			get 
			{
				if (_adGroupsBycreator_ == null) {
					_adGroupsBycreator_ = DocketPlace.Business.AdGroup.GetAdGroupsBycreator_(this);
				}
				return _adGroupsBycreator_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Campaign> _campaignsBycreator_ = null;
		/// <summary>
		/// A collection of Campaign children objects
		/// </summary>
		public EntityList<Campaign> CampaignsBycreator_
		{
			get 
			{
				if (_campaignsBycreator_ == null) {
					_campaignsBycreator_ = DocketPlace.Business.Campaign.GetCampaignsBycreator_(this);
				}
				return _campaignsBycreator_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<CustomerList> _customerListsByadmin_ = null;
		/// <summary>
		/// A collection of CustomerList children objects
		/// </summary>
		public EntityList<CustomerList> CustomerListsByadmin_
		{
			get 
			{
				if (_customerListsByadmin_ == null) {
					_customerListsByadmin_ = DocketPlace.Business.CustomerList.GetCustomerListsByadmin_(this);
				}
				return _customerListsByadmin_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesByadmin_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesByadmin_
		{
			get 
			{
				if (_logEntriesByadmin_ == null) {
					_logEntriesByadmin_ = DocketPlace.Business.LogEntry.GetLogEntriesByadmin_(this);
				}
				return _logEntriesByadmin_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<LogEntry> _logEntriesByowner_ = null;
		/// <summary>
		/// A collection of LogEntry children objects
		/// </summary>
		public EntityList<LogEntry> LogEntriesByowner_
		{
			get 
			{
				if (_logEntriesByowner_ == null) {
					_logEntriesByowner_ = DocketPlace.Business.LogEntry.GetLogEntriesByowner_(this);
				}
				return _logEntriesByowner_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<OutgoingSMS> _outgoingSMsByadmin_ = null;
		/// <summary>
		/// A collection of OutgoingSMS children objects
		/// </summary>
		public EntityList<OutgoingSMS> OutgoingSMsByadmin_
		{
			get 
			{
				if (_outgoingSMsByadmin_ == null) {
					_outgoingSMsByadmin_ = DocketPlace.Business.OutgoingSMS.GetOutgoingSMsByadmin_(this);
				}
				return _outgoingSMsByadmin_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Permission> _permissionsByadmin_ = null;
		/// <summary>
		/// A collection of Permission children objects
		/// </summary>
		public EntityList<Permission> PermissionsByadmin_
		{
			get 
			{
				if (_permissionsByadmin_ == null) {
					_permissionsByadmin_ = DocketPlace.Business.Permission.GetPermissionsByadmin_(this);
				}
				return _permissionsByadmin_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Permission> _permissionsByauthoriser_ = null;
		/// <summary>
		/// A collection of Permission children objects
		/// </summary>
		public EntityList<Permission> PermissionsByauthoriser_
		{
			get 
			{
				if (_permissionsByauthoriser_ == null) {
					_permissionsByauthoriser_ = DocketPlace.Business.Permission.GetPermissionsByauthoriser_(this);
				}
				return _permissionsByauthoriser_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PointsLog> _pointsLogsByadmin_ = null;
		/// <summary>
		/// A collection of PointsLog children objects
		/// </summary>
		public EntityList<PointsLog> PointsLogsByadmin_
		{
			get 
			{
				if (_pointsLogsByadmin_ == null) {
					_pointsLogsByadmin_ = DocketPlace.Business.PointsLog.GetPointsLogsByadmin_(this);
				}
				return _pointsLogsByadmin_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Trigger> _triggersBycreator_ = null;
		/// <summary>
		/// A collection of Trigger children objects
		/// </summary>
		public EntityList<Trigger> TriggersBycreator_
		{
			get 
			{
				if (_triggersBycreator_ == null) {
					_triggersBycreator_ = DocketPlace.Business.Trigger.GetTriggersBycreator_(this);
				}
				return _triggersBycreator_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Admin).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Admin).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Admin).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Admin() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a AdGroup for this Admin object
		/// </summary>
		public AdGroup CreateAdGroup()
		{
			return DocketPlace.Business.AdGroup.CreateAdGroupBycreator_(this);
		}
		/// <summary>
		/// Creates a Campaign for this Admin object
		/// </summary>
		public Campaign CreateCampaign()
		{
			return DocketPlace.Business.Campaign.CreateCampaignBycreator_(this);
		}
		/// <summary>
		/// Creates a CustomerList for this Admin object
		/// </summary>
		public CustomerList CreateCustomerList()
		{
			return DocketPlace.Business.CustomerList.CreateCustomerListByadmin_(this);
		}
		/// <summary>
		/// Creates a LogEntry for this Admin object
		/// </summary>
		public LogEntry CreateLogEntryByadmin_()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryByadmin_(this);
		}
		/// <summary>
		/// Creates a LogEntry for this Admin object
		/// </summary>
		public LogEntry CreateLogEntryByowner_()
		{
			return DocketPlace.Business.LogEntry.CreateLogEntryByowner_(this);
		}
		/// <summary>
		/// Creates a OutgoingSMS for this Admin object
		/// </summary>
		public OutgoingSMS CreateOutgoingSMS()
		{
			return DocketPlace.Business.OutgoingSMS.CreateOutgoingSMSByadmin_(this);
		}
		/// <summary>
		/// Creates a Permission for this Admin object
		/// </summary>
		public Permission CreatePermissionByadmin_()
		{
			return DocketPlace.Business.Permission.CreatePermissionByadmin_(this);
		}
		/// <summary>
		/// Creates a Permission for this Admin object
		/// </summary>
		public Permission CreatePermissionByauthoriser_()
		{
			return DocketPlace.Business.Permission.CreatePermissionByauthoriser_(this);
		}
		/// <summary>
		/// Creates a PointsLog for this Admin object
		/// </summary>
		public PointsLog CreatePointsLog()
		{
			return DocketPlace.Business.PointsLog.CreatePointsLogByadmin_(this);
		}
		/// <summary>
		/// Creates a Trigger for this Admin object
		/// </summary>
		public Trigger CreateTrigger()
		{
			return DocketPlace.Business.Trigger.CreateTriggerBycreator_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetAdmin(this.admin_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Admins].[admin_id],
	[Admins].[first_name],
	[Admins].[last_name],
	[Admins].[email],
	[Admins].[phone],
	[Admins].[mobile],
	[Admins].[password_hash],
	[Admins].[is_active],
	[Admins].[creation_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Admins";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Admin into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="first_name">first_name</param>
		/// <param name="last_name">last_name</param>
		/// <param name="email">email</param>
		/// <param name="phone">phone</param>
		/// <param name="mobile">mobile</param>
		/// <param name="password_hash">password_hash</param>
		/// <param name="is_active">is_active</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void InsertAdmin(string @first_name, string @last_name, string @email, string @phone, string @mobile, string @password_hash, bool @is_active, DateTime @creation_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertAdmin(@first_name, @last_name, @email, @phone, @mobile, @password_hash, @is_active, @creation_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Admin into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="first_name">first_name</param>
		/// <param name="last_name">last_name</param>
		/// <param name="email">email</param>
		/// <param name="phone">phone</param>
		/// <param name="mobile">mobile</param>
		/// <param name="password_hash">password_hash</param>
		/// <param name="is_active">is_active</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertAdmin(string @first_name, string @last_name, string @email, string @phone, string @mobile, string @password_hash, bool @is_active, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "AdminInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@first_name", EntityBase.GetDatabaseValue(@first_name)));
			parameters.Add(new SqlParameter("@last_name", EntityBase.GetDatabaseValue(@last_name)));
			parameters.Add(new SqlParameter("@email", EntityBase.GetDatabaseValue(@email)));
			parameters.Add(new SqlParameter("@phone", EntityBase.GetDatabaseValue(@phone)));
			parameters.Add(new SqlParameter("@mobile", EntityBase.GetDatabaseValue(@mobile)));
			parameters.Add(new SqlParameter("@password_hash", EntityBase.GetDatabaseValue(@password_hash)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Admin into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <param name="first_name">first_name</param>
		/// <param name="last_name">last_name</param>
		/// <param name="email">email</param>
		/// <param name="phone">phone</param>
		/// <param name="mobile">mobile</param>
		/// <param name="password_hash">password_hash</param>
		/// <param name="is_active">is_active</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void UpdateAdmin(int @admin_id, string @first_name, string @last_name, string @email, string @phone, string @mobile, string @password_hash, bool @is_active, DateTime @creation_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateAdmin(@admin_id, @first_name, @last_name, @email, @phone, @mobile, @password_hash, @is_active, @creation_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Admin into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <param name="first_name">first_name</param>
		/// <param name="last_name">last_name</param>
		/// <param name="email">email</param>
		/// <param name="phone">phone</param>
		/// <param name="mobile">mobile</param>
		/// <param name="password_hash">password_hash</param>
		/// <param name="is_active">is_active</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdateAdmin(int @admin_id, string @first_name, string @last_name, string @email, string @phone, string @mobile, string @password_hash, bool @is_active, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "AdminUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@first_name", EntityBase.GetDatabaseValue(@first_name)));
			parameters.Add(new SqlParameter("@last_name", EntityBase.GetDatabaseValue(@last_name)));
			parameters.Add(new SqlParameter("@email", EntityBase.GetDatabaseValue(@email)));
			parameters.Add(new SqlParameter("@phone", EntityBase.GetDatabaseValue(@phone)));
			parameters.Add(new SqlParameter("@mobile", EntityBase.GetDatabaseValue(@mobile)));
			parameters.Add(new SqlParameter("@password_hash", EntityBase.GetDatabaseValue(@password_hash)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Admin from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeleteAdmin(int @admin_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteAdmin(@admin_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Admin from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteAdmin(int @admin_id, SqlHelper @helper)
		{
			string commandText = "AdminDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Admin object.
		/// </summary>
		/// <returns>The newly created Admin object.</returns>
		public static Admin CreateAdmin()
		{
			return InitializeNew<Admin>();
		}
		
		/// <summary>
		/// Retrieve information for a Admin by a Admin's unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>Admin</returns>
		public static Admin GetAdmin(int admin_id)
		{
			string commandText = "AdminGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin_id));
			
			return GetOne<Admin>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Admin objects.
		/// </summary>
		/// <returns>The retrieved collection of Admin objects.</returns>
		public static EntityList<Admin> GetAdmins()
		{
			string commandText = "AdminGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Admin>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Admin objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Admin objects.</returns>
        protected static EntityList<Admin> GetAdmins(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Admin>(SelectFieldList, "FROM [dbo].[Admins]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Admin objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Admin objects.</returns>
        public static EntityList<Admin> GetAdmins(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Admin>(SelectFieldList, "FROM [dbo].[Admins]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Admin objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Admin objects.</returns>
		protected static EntityList<Admin> GetAdmins(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdmins(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Admin objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Admin objects.</returns>
		protected static EntityList<Admin> GetAdmins(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdmins(string.Empty, where, parameters, Admin.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Admin objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Admin objects.</returns>
		protected static EntityList<Admin> GetAdmins(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAdmins(prefix, where, parameters, Admin.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Admin objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Admin objects.</returns>
		protected static EntityList<Admin> GetAdmins(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetAdmins(string.Empty, where, parameters, Admin.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Admin objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Admin objects.</returns>
		protected static EntityList<Admin> GetAdmins(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetAdmins(prefix, where, parameters, Admin.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Admin objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Admin objects.</returns>
		protected static EntityList<Admin> GetAdmins(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Admin.SelectFieldList + "FROM [dbo].[Admins] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Admin>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Admin> GetAdmins(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Admin>(SelectFieldList, "FROM [dbo].[Admins] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		#endregion
		
		#region Subclasses
		public static partial class AdminProperties
		{
			public const string admin_id = "admin_id";
			public const string first_name = "first_name";
			public const string last_name = "last_name";
			public const string email = "email";
			public const string phone = "phone";
			public const string mobile = "mobile";
			public const string password_hash = "password_hash";
			public const string is_active = "is_active";
			public const string creation_datetime = "creation_datetime";
		}
		#endregion
	}
}
