/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 09/09/2012 8:48:31 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a CustomerList.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("customerlist_id: {customerlist_id}")]
	public partial class CustomerList
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _customerlist_id = int.MinValue;
		/// <summary>
		/// customerlist_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int customerlist_id
		{
			[DebuggerStepThrough()]
			get { return this._customerlist_id; }
			protected set 
			{
				if (this._customerlist_id != value) 
				{
					this._customerlist_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("customerlist_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _admin_id = int.MinValue;
		/// <summary>
		/// admin_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int admin_id
		{
			[DebuggerStepThrough()]
			get { return this._admin_id; }
			set 
			{
				if (this._admin_id != value) 
				{
					this._admin_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("admin_id");
					this._admin_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _title = String.Empty;
		/// <summary>
		/// title
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string title
		{
			[DebuggerStepThrough()]
			get { return this._title; }
			set 
			{
				if (this._title != value) 
				{
					this._title = value;
					this.IsDirty = true;	
					OnPropertyChanged("title");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _select_statement = String.Empty;
		/// <summary>
		/// select_statement
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string select_statement
		{
			[DebuggerStepThrough()]
			get { return this._select_statement; }
			set 
			{
				if (this._select_statement != value) 
				{
					this._select_statement = value;
					this.IsDirty = true;	
					OnPropertyChanged("select_statement");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _notes = String.Empty;
		/// <summary>
		/// notes
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string notes
		{
			[DebuggerStepThrough()]
			get { return this._notes; }
			set 
			{
				if (this._notes != value) 
				{
					this._notes = value;
					this.IsDirty = true;	
					OnPropertyChanged("notes");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _mc_grouping_id = int.MinValue;
		/// <summary>
		/// mc_grouping_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int mc_grouping_id
		{
			[DebuggerStepThrough()]
			get { return this._mc_grouping_id; }
			set 
			{
				if (this._mc_grouping_id != value) 
				{
					this._mc_grouping_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("mc_grouping_id");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Admin _admin_ = null;
		/// <summary>
		/// The parent Admin object
		/// </summary>
		public Admin admin_
		{
			get 
			{
				if (_admin_ == null) 
				{
					_admin_ = GetParentEntity(Admin.GetAdmin(this.admin_id)) as Admin;
				}
				return _admin_;
			}
			set
			{
				if(_admin_ != value) 
				{
					_admin_ = value;
					
					if (value != null) 
					{
						this.admin_id = value.admin_id;
					}
					else 
					{
						this.admin_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<OutgoingSMS> _outgoingSMsBycustomerlist_ = null;
		/// <summary>
		/// A collection of OutgoingSMS children objects
		/// </summary>
		public EntityList<OutgoingSMS> OutgoingSMsBycustomerlist_
		{
			get 
			{
				if (_outgoingSMsBycustomerlist_ == null) {
					_outgoingSMsBycustomerlist_ = DocketPlace.Business.OutgoingSMS.GetOutgoingSMsBycustomerlist_(this);
				}
				return _outgoingSMsBycustomerlist_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(CustomerList).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(CustomerList).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(CustomerList).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected CustomerList() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a OutgoingSMS for this CustomerList object
		/// </summary>
		public OutgoingSMS CreateOutgoingSMS()
		{
			return DocketPlace.Business.OutgoingSMS.CreateOutgoingSMSBycustomerlist_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetCustomerList(this.customerlist_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_admin_ != null)
			{	
				this.admin_id = this.admin_.admin_id;
			}
			
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[CustomerLists].[customerlist_id],
	[CustomerLists].[admin_id],
	[CustomerLists].[company_id],
	[CustomerLists].[title],
	[CustomerLists].[select_statement],
	[CustomerLists].[notes],
	[CustomerLists].[creation_datetime],
	[CustomerLists].[mc_grouping_id]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "CustomerLists";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a CustomerList into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="title">title</param>
		/// <param name="select_statement">select_statement</param>
		/// <param name="notes">notes</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="mc_grouping_id">mc_grouping_id</param>
		public static void InsertCustomerList(int @admin_id, int @company_id, string @title, string @select_statement, string @notes, DateTime @creation_datetime, int @mc_grouping_id)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertCustomerList(@admin_id, @company_id, @title, @select_statement, @notes, @creation_datetime, @mc_grouping_id, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a CustomerList into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="title">title</param>
		/// <param name="select_statement">select_statement</param>
		/// <param name="notes">notes</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="mc_grouping_id">mc_grouping_id</param>
		/// <param name="helper">helper</param>
		internal static void InsertCustomerList(int @admin_id, int @company_id, string @title, string @select_statement, string @notes, DateTime @creation_datetime, int @mc_grouping_id, SqlHelper @helper)
		{
			string commandText = "CustomerListInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@title", EntityBase.GetDatabaseValue(@title)));
			parameters.Add(new SqlParameter("@select_statement", EntityBase.GetDatabaseValue(@select_statement)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@mc_grouping_id", EntityBase.GetDatabaseValue(@mc_grouping_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a CustomerList into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="title">title</param>
		/// <param name="select_statement">select_statement</param>
		/// <param name="notes">notes</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="mc_grouping_id">mc_grouping_id</param>
		public static void UpdateCustomerList(int @customerlist_id, int @admin_id, int @company_id, string @title, string @select_statement, string @notes, DateTime @creation_datetime, int @mc_grouping_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateCustomerList(@customerlist_id, @admin_id, @company_id, @title, @select_statement, @notes, @creation_datetime, @mc_grouping_id, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a CustomerList into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <param name="admin_id">admin_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="title">title</param>
		/// <param name="select_statement">select_statement</param>
		/// <param name="notes">notes</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="mc_grouping_id">mc_grouping_id</param>
		/// <param name="helper">helper</param>
		internal static void UpdateCustomerList(int @customerlist_id, int @admin_id, int @company_id, string @title, string @select_statement, string @notes, DateTime @creation_datetime, int @mc_grouping_id, SqlHelper @helper)
		{
			string commandText = "CustomerListUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", EntityBase.GetDatabaseValue(@customerlist_id)));
			parameters.Add(new SqlParameter("@admin_id", EntityBase.GetDatabaseValue(@admin_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@title", EntityBase.GetDatabaseValue(@title)));
			parameters.Add(new SqlParameter("@select_statement", EntityBase.GetDatabaseValue(@select_statement)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@mc_grouping_id", EntityBase.GetDatabaseValue(@mc_grouping_id)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a CustomerList from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
		public static void DeleteCustomerList(int @customerlist_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteCustomerList(@customerlist_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a CustomerList from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteCustomerList(int @customerlist_id, SqlHelper @helper)
		{
			string commandText = "CustomerListDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", @customerlist_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new CustomerList object.
		/// </summary>
		/// <returns>The newly created CustomerList object.</returns>
		public static CustomerList CreateCustomerList()
		{
			return InitializeNew<CustomerList>();
		}
		
		/// <summary>
		/// Retrieve information for a CustomerList by a CustomerList's unique identifier.
		/// </summary>
		/// <param name="customerlist_id">customerlist_id</param>
		/// <returns>CustomerList</returns>
		public static CustomerList GetCustomerList(int customerlist_id)
		{
			string commandText = "CustomerListGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customerlist_id", customerlist_id));
			
			return GetOne<CustomerList>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection CustomerList objects.
		/// </summary>
		/// <returns>The retrieved collection of CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerLists()
		{
			string commandText = "CustomerListGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<CustomerList>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection CustomerList objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of CustomerList objects.</returns>
        protected static EntityList<CustomerList> GetCustomerLists(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<CustomerList>(SelectFieldList, "FROM [dbo].[CustomerLists]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection CustomerList objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of CustomerList objects.</returns>
        public static EntityList<CustomerList> GetCustomerLists(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<CustomerList>(SelectFieldList, "FROM [dbo].[CustomerLists]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection CustomerList objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerLists(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCustomerLists(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection CustomerList objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerLists(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCustomerLists(string.Empty, where, parameters, CustomerList.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection CustomerList objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerLists(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCustomerLists(prefix, where, parameters, CustomerList.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection CustomerList objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerLists(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetCustomerLists(string.Empty, where, parameters, CustomerList.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection CustomerList objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerLists(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetCustomerLists(prefix, where, parameters, CustomerList.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection CustomerList objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerLists(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + CustomerList.SelectFieldList + "FROM [dbo].[CustomerLists] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<CustomerList>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<CustomerList> GetCustomerLists(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<CustomerList>(SelectFieldList, "FROM [dbo].[CustomerLists] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of CustomerList objects by a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>A collection CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerListsByadmin_(Admin @admin_) 
		{
			string commandText = "CustomerListGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<CustomerList>(@admin_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of CustomerList objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerListsByadmin_(Admin @admin_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[CustomerLists] 
WHERE 
	[CustomerLists].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<CustomerList>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of CustomerList objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerListsByadmin_(int @admin_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[CustomerLists] 
WHERE 
	[CustomerLists].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<CustomerList>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of CustomerList objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerListsByadmin_(Admin @admin_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[CustomerLists] 
WHERE 
	[CustomerLists].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@admin_id", @admin_.admin_id));
			
			return GetList<CustomerList>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of CustomerList objects by a Admin object.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerListsByadmin_(int @admin_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[CustomerLists] 
WHERE 
	[CustomerLists].[admin_id] = @admin_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<CustomerList>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of CustomerList objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		/// <returns>A collection CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerListsByadmin_(int @admin_id) 
		{
			string commandText = "CustomerListGetByAdmin";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", @admin_id));
			
			return GetList<CustomerList>(commandText, parameters);
		}

		/// <summary>
		/// Create a new CustomerList object from a Admin object.
		/// </summary>
		/// <param name="admin_">admin_</param>
		/// <returns>The newly created CustomerList object.</returns>
		public static CustomerList CreateCustomerListByadmin_(Admin @admin_)
		{
			CustomerList customerList = InitializeNew<CustomerList>();
			
			customerList.admin_id = @admin_.admin_id;
			
			customerList.admin_ = @admin_;
			
			return customerList;
		}
		
		/// <summary>
		/// Deletes CustomerList objects by a Admin object.
		/// </summary>
		/// <param name="admin">admin</param>
		public static void DeleteCustomerListsByadmin_(Admin admin) 
		{
			string commandText = "CustomerListDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin.admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes CustomerList objects by a Admin unique identifier.
		/// </summary>
		/// <param name="admin_id">admin_id</param>
		public static void DeleteCustomerListsByadmin_(int admin_id) 
		{
			string commandText = "CustomerListDeleteByAdmin";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@admin_id", admin_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of CustomerList objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerListsBycompany_(Company @company_) 
		{
			string commandText = "CustomerListGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<CustomerList>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of CustomerList objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerListsBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[CustomerLists] 
WHERE 
	[CustomerLists].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<CustomerList>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of CustomerList objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection CustomerList objects.</returns>
		protected static EntityList<CustomerList> GetCustomerListsBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[CustomerLists] 
WHERE 
	[CustomerLists].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<CustomerList>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of CustomerList objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerListsBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[CustomerLists] 
WHERE 
	[CustomerLists].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<CustomerList>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of CustomerList objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerListsBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[CustomerLists] 
WHERE 
	[CustomerLists].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<CustomerList>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of CustomerList objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection CustomerList objects.</returns>
		public static EntityList<CustomerList> GetCustomerListsBycompany_(int @company_id) 
		{
			string commandText = "CustomerListGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<CustomerList>(commandText, parameters);
		}

		/// <summary>
		/// Create a new CustomerList object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created CustomerList object.</returns>
		public static CustomerList CreateCustomerListBycompany_(Company @company_)
		{
			CustomerList customerList = InitializeNew<CustomerList>();
			
			customerList.company_id = @company_.company_id;
			
			customerList.company_ = @company_;
			
			return customerList;
		}
		
		/// <summary>
		/// Deletes CustomerList objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeleteCustomerListsBycompany_(Company company) 
		{
			string commandText = "CustomerListDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes CustomerList objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeleteCustomerListsBycompany_(int company_id) 
		{
			string commandText = "CustomerListDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class CustomerListProperties
		{
			public const string customerlist_id = "customerlist_id";
			public const string admin_id = "admin_id";
			public const string company_id = "company_id";
			public const string title = "title";
			public const string select_statement = "select_statement";
			public const string notes = "notes";
			public const string creation_datetime = "creation_datetime";
			public const string mc_grouping_id = "mc_grouping_id";
		}
		#endregion
	}
}
