/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 11/08/2012 4:50:46 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using DocketPlace.Business.Framework;


namespace DocketPlace.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Docket.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("docket_id: {docket_id}")]
	public partial class Docket
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _docket_id = int.MinValue;
		/// <summary>
		/// docket_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int docket_id
		{
			[DebuggerStepThrough()]
			get { return this._docket_id; }
			protected set 
			{
				if (this._docket_id != value) 
				{
					this._docket_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("docket_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _local_id = int.MinValue;
		/// <summary>
		/// local_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int local_id
		{
			[DebuggerStepThrough()]
			get { return this._local_id; }
			set 
			{
				if (this._local_id != value) 
				{
					this._local_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("local_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _code = String.Empty;
		/// <summary>
		/// code
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string code
		{
			[DebuggerStepThrough()]
			get { return this._code; }
			set 
			{
				if (this._code != value) 
				{
					this._code = value;
					this.IsDirty = true;	
					OnPropertyChanged("code");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _customer_id = int.MinValue;
		/// <summary>
		/// customer_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int customer_id
		{
			[DebuggerStepThrough()]
			get { return this._customer_id; }
			set 
			{
				if (this._customer_id != value) 
				{
					this._customer_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("customer_id");
					this._customer_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _store_id = int.MinValue;
		/// <summary>
		/// store_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int store_id
		{
			[DebuggerStepThrough()]
			get { return this._store_id; }
			set 
			{
				if (this._store_id != value) 
				{
					this._store_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("store_id");
					this._store_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _placedad_id = int.MinValue;
		/// <summary>
		/// placedad_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int placedad_id
		{
			[DebuggerStepThrough()]
			get { return this._placedad_id; }
			set 
			{
				if (this._placedad_id != value) 
				{
					this._placedad_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("placedad_id");
					this._placedad_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private decimal _total = decimal.MinValue;
		/// <summary>
		/// total
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public decimal total
		{
			[DebuggerStepThrough()]
			get { return this._total; }
			set 
			{
				if (this._total != value) 
				{
					this._total = value;
					this.IsDirty = true;	
					OnPropertyChanged("total");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _reward_points = int.MinValue;
		/// <summary>
		/// reward_points
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public int reward_points
		{
			[DebuggerStepThrough()]
			get { return this._reward_points; }
			set 
			{
				if (this._reward_points != value) 
				{
					this._reward_points = value;
					this.IsDirty = true;	
					OnPropertyChanged("reward_points");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _raw_content = String.Empty;
		/// <summary>
		/// raw_content
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string raw_content
		{
			[DebuggerStepThrough()]
			get { return this._raw_content; }
			set 
			{
				if (this._raw_content != value) 
				{
					this._raw_content = value;
					this.IsDirty = true;	
					OnPropertyChanged("raw_content");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Customer _customer_ = null;
		/// <summary>
		/// The parent Customer object
		/// </summary>
		public Customer customer_
		{
			get 
			{
				if (_customer_ == null) 
				{
					_customer_ = GetParentEntity(Customer.GetCustomer(this.customer_id)) as Customer;
				}
				return _customer_;
			}
			set
			{
				if(_customer_ != value) 
				{
					_customer_ = value;
					
					if (value != null) 
					{
						this.customer_id = value.customer_id;
					}
					else 
					{
						this.customer_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private PlacedAd _placedad_ = null;
		/// <summary>
		/// The parent PlacedAd object
		/// </summary>
		public PlacedAd placedad_
		{
			get 
			{
				if (_placedad_ == null) 
				{
					_placedad_ = GetParentEntity(PlacedAd.GetPlacedAd(this.placedad_id)) as PlacedAd;
				}
				return _placedad_;
			}
			set
			{
				if(_placedad_ != value) 
				{
					_placedad_ = value;
					
					if (value != null) 
					{
						this.placedad_id = value.placedad_id;
					}
					else 
					{
						this.placedad_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Store _store_ = null;
		/// <summary>
		/// The parent Store object
		/// </summary>
		public Store store_
		{
			get 
			{
				if (_store_ == null) 
				{
					_store_ = GetParentEntity(Store.GetStore(this.store_id)) as Store;
				}
				return _store_;
			}
			set
			{
				if(_store_ != value) 
				{
					_store_ = value;
					
					if (value != null) 
					{
						this.store_id = value.store_id;
					}
					else 
					{
						this.store_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<DocketItem> _docketItemsBydocket_ = null;
		/// <summary>
		/// A collection of DocketItem children objects
		/// </summary>
		public EntityList<DocketItem> DocketItemsBydocket_
		{
			get 
			{
				if (_docketItemsBydocket_ == null) {
					_docketItemsBydocket_ = DocketPlace.Business.DocketItem.GetDocketItemsBydocket_(this);
				}
				return _docketItemsBydocket_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PointsLog> _pointsLogsBydocket_ = null;
		/// <summary>
		/// A collection of PointsLog children objects
		/// </summary>
		public EntityList<PointsLog> PointsLogsBydocket_
		{
			get 
			{
				if (_pointsLogsBydocket_ == null) {
					_pointsLogsBydocket_ = DocketPlace.Business.PointsLog.GetPointsLogsBydocket_(this);
				}
				return _pointsLogsBydocket_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Docket).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Docket).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Docket).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Docket() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a DocketItem for this Docket object
		/// </summary>
		public DocketItem CreateDocketItem()
		{
			return DocketPlace.Business.DocketItem.CreateDocketItemBydocket_(this);
		}
		/// <summary>
		/// Creates a PointsLog for this Docket object
		/// </summary>
		public PointsLog CreatePointsLog()
		{
			return DocketPlace.Business.PointsLog.CreatePointsLogBydocket_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetDocket(this.docket_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_customer_ != null)
			{	
				this.customer_id = this.customer_.customer_id;
			}
			
			if (_placedad_ != null)
			{	
				this.placedad_id = this.placedad_.placedad_id;
			}
			
			if (_store_ != null)
			{	
				this.store_id = this.store_.store_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Dockets].[docket_id],
	[Dockets].[local_id],
	[Dockets].[code],
	[Dockets].[customer_id],
	[Dockets].[store_id],
	[Dockets].[placedad_id],
	[Dockets].[total],
	[Dockets].[reward_points],
	[Dockets].[raw_content],
	[Dockets].[creation_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Dockets";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Docket into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="local_id">local_id</param>
		/// <param name="code">code</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="placedad_id">placedad_id</param>
		/// <param name="total">total</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="raw_content">raw_content</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void InsertDocket(int @local_id, string @code, int @customer_id, int @store_id, int @placedad_id, decimal @total, int @reward_points, string @raw_content, DateTime @creation_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertDocket(@local_id, @code, @customer_id, @store_id, @placedad_id, @total, @reward_points, @raw_content, @creation_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Docket into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="local_id">local_id</param>
		/// <param name="code">code</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="placedad_id">placedad_id</param>
		/// <param name="total">total</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="raw_content">raw_content</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertDocket(int @local_id, string @code, int @customer_id, int @store_id, int @placedad_id, decimal @total, int @reward_points, string @raw_content, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "DocketInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@local_id", EntityBase.GetDatabaseValue(@local_id)));
			parameters.Add(new SqlParameter("@code", EntityBase.GetDatabaseValue(@code)));
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@placedad_id", EntityBase.GetDatabaseValue(@placedad_id)));
			parameters.Add(new SqlParameter("@total", EntityBase.GetDatabaseValue(@total)));
			parameters.Add(new SqlParameter("@reward_points", EntityBase.GetDatabaseValue(@reward_points)));
			parameters.Add(new SqlParameter("@raw_content", EntityBase.GetDatabaseValue(@raw_content)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Docket into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		/// <param name="local_id">local_id</param>
		/// <param name="code">code</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="placedad_id">placedad_id</param>
		/// <param name="total">total</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="raw_content">raw_content</param>
		/// <param name="creation_datetime">creation_datetime</param>
		public static void UpdateDocket(int @docket_id, int @local_id, string @code, int @customer_id, int @store_id, int @placedad_id, decimal @total, int @reward_points, string @raw_content, DateTime @creation_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateDocket(@docket_id, @local_id, @code, @customer_id, @store_id, @placedad_id, @total, @reward_points, @raw_content, @creation_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Docket into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		/// <param name="local_id">local_id</param>
		/// <param name="code">code</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="store_id">store_id</param>
		/// <param name="placedad_id">placedad_id</param>
		/// <param name="total">total</param>
		/// <param name="reward_points">reward_points</param>
		/// <param name="raw_content">raw_content</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdateDocket(int @docket_id, int @local_id, string @code, int @customer_id, int @store_id, int @placedad_id, decimal @total, int @reward_points, string @raw_content, DateTime @creation_datetime, SqlHelper @helper)
		{
			string commandText = "DocketUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", EntityBase.GetDatabaseValue(@docket_id)));
			parameters.Add(new SqlParameter("@local_id", EntityBase.GetDatabaseValue(@local_id)));
			parameters.Add(new SqlParameter("@code", EntityBase.GetDatabaseValue(@code)));
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@store_id", EntityBase.GetDatabaseValue(@store_id)));
			parameters.Add(new SqlParameter("@placedad_id", EntityBase.GetDatabaseValue(@placedad_id)));
			parameters.Add(new SqlParameter("@total", EntityBase.GetDatabaseValue(@total)));
			parameters.Add(new SqlParameter("@reward_points", EntityBase.GetDatabaseValue(@reward_points)));
			parameters.Add(new SqlParameter("@raw_content", EntityBase.GetDatabaseValue(@raw_content)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Docket from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		public static void DeleteDocket(int @docket_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteDocket(@docket_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Docket from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteDocket(int @docket_id, SqlHelper @helper)
		{
			string commandText = "DocketDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", @docket_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Docket object.
		/// </summary>
		/// <returns>The newly created Docket object.</returns>
		public static Docket CreateDocket()
		{
			return InitializeNew<Docket>();
		}
		
		/// <summary>
		/// Retrieve information for a Docket by a Docket's unique identifier.
		/// </summary>
		/// <param name="docket_id">docket_id</param>
		/// <returns>Docket</returns>
		public static Docket GetDocket(int docket_id)
		{
			string commandText = "DocketGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@docket_id", docket_id));
			
			return GetOne<Docket>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Docket objects.
		/// </summary>
		/// <returns>The retrieved collection of Docket objects.</returns>
		public static EntityList<Docket> GetDockets()
		{
			string commandText = "DocketGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Docket>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Docket objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Docket objects.</returns>
        protected static EntityList<Docket> GetDockets(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Docket>(SelectFieldList, "FROM [dbo].[Dockets]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Docket objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Docket objects.</returns>
        public static EntityList<Docket> GetDockets(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Docket>(SelectFieldList, "FROM [dbo].[Dockets]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Docket objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Docket objects.</returns>
		protected static EntityList<Docket> GetDockets(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetDockets(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Docket objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Docket objects.</returns>
		protected static EntityList<Docket> GetDockets(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetDockets(string.Empty, where, parameters, Docket.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Docket objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Docket objects.</returns>
		protected static EntityList<Docket> GetDockets(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetDockets(prefix, where, parameters, Docket.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Docket objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Docket objects.</returns>
		protected static EntityList<Docket> GetDockets(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetDockets(string.Empty, where, parameters, Docket.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Docket objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Docket objects.</returns>
		protected static EntityList<Docket> GetDockets(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetDockets(prefix, where, parameters, Docket.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Docket objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Docket objects.</returns>
		protected static EntityList<Docket> GetDockets(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Docket.SelectFieldList + "FROM [dbo].[Dockets] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Docket>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Docket> GetDockets(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Docket>(SelectFieldList, "FROM [dbo].[Dockets] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of Docket objects by a Customer object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsBycustomer_(Customer @customer_) 
		{
			string commandText = "DocketGetByCustomer";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<Docket>(@customer_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Docket objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		protected static EntityList<Docket> GetDocketsBycustomer_(Customer @customer_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Docket objects by a Customer object.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		protected static EntityList<Docket> GetDocketsBycustomer_(int @customer_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Docket objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsBycustomer_(Customer @customer_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.customer_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Docket objects by a Customer object.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsBycustomer_(int @customer_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Docket objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsBycustomer_(int @customer_id) 
		{
			string commandText = "DocketGetByCustomer";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_id));
			
			return GetList<Docket>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Docket object from a Customer object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>The newly created Docket object.</returns>
		public static Docket CreateDocketBycustomer_(Customer @customer_)
		{
			Docket docket = InitializeNew<Docket>();
			
			docket.customer_id = @customer_.customer_id;
			
			docket.customer_ = @customer_;
			
			return docket;
		}
		
		/// <summary>
		/// Deletes Docket objects by a Customer object.
		/// </summary>
		/// <param name="customer">customer</param>
		public static void DeleteDocketsBycustomer_(Customer customer) 
		{
			string commandText = "DocketDeleteByCustomer";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer.customer_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Docket objects by a Customer unique identifier.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		public static void DeleteDocketsBycustomer_(int customer_id) 
		{
			string commandText = "DocketDeleteByCustomer";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", customer_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Docket objects by a PlacedAd object.
		/// </summary>
		/// <param name="placedad_">placedad_</param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsByplacedad_(PlacedAd @placedad_) 
		{
			string commandText = "DocketGetByPlacedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", @placedad_.placedad_id));
			
			return GetList<Docket>(@placedad_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Docket objects by a PlacedAd object.
		/// </summary>
		/// <param name="placedAd">placedAd</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		protected static EntityList<Docket> GetDocketsByplacedad_(PlacedAd @placedad_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[placedad_id] = @placedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@placedad_id", @placedad_.placedad_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Docket objects by a PlacedAd object.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		protected static EntityList<Docket> GetDocketsByplacedad_(int @placedad_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[placedad_id] = @placedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", @placedad_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Docket objects by a PlacedAd object.
		/// </summary>
		/// <param name="placedAd">placedAd</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsByplacedad_(PlacedAd @placedad_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[placedad_id] = @placedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@placedad_id", @placedad_.placedad_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Docket objects by a PlacedAd object.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsByplacedad_(int @placedad_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[placedad_id] = @placedad_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", @placedad_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Docket objects by a PlacedAd unique identifier.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsByplacedad_(int @placedad_id) 
		{
			string commandText = "DocketGetByPlacedAd";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", @placedad_id));
			
			return GetList<Docket>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Docket object from a PlacedAd object.
		/// </summary>
		/// <param name="placedad_">placedad_</param>
		/// <returns>The newly created Docket object.</returns>
		public static Docket CreateDocketByplacedad_(PlacedAd @placedad_)
		{
			Docket docket = InitializeNew<Docket>();
			
			docket.placedad_id = @placedad_.placedad_id;
			
			docket.placedad_ = @placedad_;
			
			return docket;
		}
		
		/// <summary>
		/// Deletes Docket objects by a PlacedAd object.
		/// </summary>
		/// <param name="placedAd">placedAd</param>
		public static void DeleteDocketsByplacedad_(PlacedAd placedAd) 
		{
			string commandText = "DocketDeleteByPlacedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", placedAd.placedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Docket objects by a PlacedAd unique identifier.
		/// </summary>
		/// <param name="placedad_id">placedad_id</param>
		public static void DeleteDocketsByplacedad_(int placedad_id) 
		{
			string commandText = "DocketDeleteByPlacedAd";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@placedad_id", placedad_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of Docket objects by a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsBystore_(Store @store_) 
		{
			string commandText = "DocketGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Docket>(@store_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Docket objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		protected static EntityList<Docket> GetDocketsBystore_(Store @store_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Docket objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		protected static EntityList<Docket> GetDocketsBystore_(int @store_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Docket objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsBystore_(Store @store_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@store_id", @store_.store_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Docket objects by a Store object.
		/// </summary>
		/// <param name="store_id">store_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsBystore_(int @store_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Dockets] 
WHERE 
	[Dockets].[store_id] = @store_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Docket>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Docket objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		/// <returns>A collection Docket objects.</returns>
		public static EntityList<Docket> GetDocketsBystore_(int @store_id) 
		{
			string commandText = "DocketGetByStore";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", @store_id));
			
			return GetList<Docket>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Docket object from a Store object.
		/// </summary>
		/// <param name="store_">store_</param>
		/// <returns>The newly created Docket object.</returns>
		public static Docket CreateDocketBystore_(Store @store_)
		{
			Docket docket = InitializeNew<Docket>();
			
			docket.store_id = @store_.store_id;
			
			docket.store_ = @store_;
			
			return docket;
		}
		
		/// <summary>
		/// Deletes Docket objects by a Store object.
		/// </summary>
		/// <param name="store">store</param>
		public static void DeleteDocketsBystore_(Store store) 
		{
			string commandText = "DocketDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store.store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Docket objects by a Store unique identifier.
		/// </summary>
		/// <param name="store_id">store_id</param>
		public static void DeleteDocketsBystore_(int store_id) 
		{
			string commandText = "DocketDeleteByStore";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@store_id", store_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class DocketProperties
		{
			public const string docket_id = "docket_id";
			public const string local_id = "local_id";
			public const string code = "code";
			public const string customer_id = "customer_id";
			public const string store_id = "store_id";
			public const string placedad_id = "placedad_id";
			public const string total = "total";
			public const string reward_points = "reward_points";
			public const string raw_content = "raw_content";
			public const string creation_datetime = "creation_datetime";
		}
		#endregion
	}
}
